
stm32f429_test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db68  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  0800dd18  0800dd18  0001dd18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de70  0800de70  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800de70  0800de70  0001de70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800de78  0800de78  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de78  0800de78  0001de78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800de7c  0800de7c  0001de7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800de80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          00010e88  2000008c  2000008c  0002008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20010f14  20010f14  0002008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 14 .debug_info   000289fa  00000000  00000000  000200ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005a8b  00000000  00000000  00048af9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ee0  00000000  00000000  0004e588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000017c6  00000000  00000000  00050468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002c497  00000000  00000000  00051c2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000250f3  00000000  00000000  0007e0c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f5763  00000000  00000000  000a31b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000089fc  00000000  00000000  0019891c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  001a1318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800dd00 	.word	0x0800dd00

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000090 	.word	0x20000090
 80001ec:	0800dd00 	.word	0x0800dd00

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800059a:	2b00      	cmp	r3, #0
 800059c:	db0b      	blt.n	80005b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	f003 021f 	and.w	r2, r3, #31
 80005a4:	4907      	ldr	r1, [pc, #28]	; (80005c4 <__NVIC_EnableIRQ+0x38>)
 80005a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005aa:	095b      	lsrs	r3, r3, #5
 80005ac:	2001      	movs	r0, #1
 80005ae:	fa00 f202 	lsl.w	r2, r0, r2
 80005b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005b6:	bf00      	nop
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	e000e100 	.word	0xe000e100

080005c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	6039      	str	r1, [r7, #0]
 80005d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	db0a      	blt.n	80005f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	b2da      	uxtb	r2, r3
 80005e0:	490c      	ldr	r1, [pc, #48]	; (8000614 <__NVIC_SetPriority+0x4c>)
 80005e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e6:	0112      	lsls	r2, r2, #4
 80005e8:	b2d2      	uxtb	r2, r2
 80005ea:	440b      	add	r3, r1
 80005ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005f0:	e00a      	b.n	8000608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	b2da      	uxtb	r2, r3
 80005f6:	4908      	ldr	r1, [pc, #32]	; (8000618 <__NVIC_SetPriority+0x50>)
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	f003 030f 	and.w	r3, r3, #15
 80005fe:	3b04      	subs	r3, #4
 8000600:	0112      	lsls	r2, r2, #4
 8000602:	b2d2      	uxtb	r2, r2
 8000604:	440b      	add	r3, r1
 8000606:	761a      	strb	r2, [r3, #24]
}
 8000608:	bf00      	nop
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	e000e100 	.word	0xe000e100
 8000618:	e000ed00 	.word	0xe000ed00

0800061c <AD7190_Error_Handler>:

static SPI_HandleTypeDef spi1;
static GPIO_InitTypeDef NSS_Pin;


void AD7190_Error_Handler(void) {
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
    printf("Error initializing SPI1\n");
 8000620:	4801      	ldr	r0, [pc, #4]	; (8000628 <AD7190_Error_Handler+0xc>)
 8000622:	f00c fd4b 	bl	800d0bc <puts>

    while(1);
 8000626:	e7fe      	b.n	8000626 <AD7190_Error_Handler+0xa>
 8000628:	0800dd18 	.word	0x0800dd18

0800062c <ad7190_init>:
}




void ad7190_init(void){
 800062c:	b580      	push	{r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af00      	add	r7, sp, #0

	printf("Initializing AD7190\r\n");
 8000632:	483c      	ldr	r0, [pc, #240]	; (8000724 <ad7190_init+0xf8>)
 8000634:	f00c fd42 	bl	800d0bc <puts>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	4b3a      	ldr	r3, [pc, #232]	; (8000728 <ad7190_init+0xfc>)
 800063e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000640:	4a39      	ldr	r2, [pc, #228]	; (8000728 <ad7190_init+0xfc>)
 8000642:	f043 0301 	orr.w	r3, r3, #1
 8000646:	6313      	str	r3, [r2, #48]	; 0x30
 8000648:	4b37      	ldr	r3, [pc, #220]	; (8000728 <ad7190_init+0xfc>)
 800064a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064c:	f003 0301 	and.w	r3, r3, #1
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_SPI1_CLK_ENABLE();
 8000654:	2300      	movs	r3, #0
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	4b33      	ldr	r3, [pc, #204]	; (8000728 <ad7190_init+0xfc>)
 800065a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800065c:	4a32      	ldr	r2, [pc, #200]	; (8000728 <ad7190_init+0xfc>)
 800065e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000662:	6453      	str	r3, [r2, #68]	; 0x44
 8000664:	4b30      	ldr	r3, [pc, #192]	; (8000728 <ad7190_init+0xfc>)
 8000666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000668:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]
	__NVIC_EnableIRQ(SPI1_IRQn);
 8000670:	2023      	movs	r0, #35	; 0x23
 8000672:	f7ff ff8b 	bl	800058c <__NVIC_EnableIRQ>
	__NVIC_SetPriority(SPI1_IRQn, 9);
 8000676:	2109      	movs	r1, #9
 8000678:	2023      	movs	r0, #35	; 0x23
 800067a:	f7ff ffa5 	bl	80005c8 <__NVIC_SetPriority>

	GPIO_InitTypeDef gpioa;

	gpioa.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 800067e:	23f0      	movs	r3, #240	; 0xf0
 8000680:	60fb      	str	r3, [r7, #12]
	gpioa.Mode = GPIO_MODE_AF_PP;
 8000682:	2302      	movs	r3, #2
 8000684:	613b      	str	r3, [r7, #16]
	gpioa.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	617b      	str	r3, [r7, #20]
	gpioa.Speed = GPIO_SPEED_LOW;
 800068a:	2300      	movs	r3, #0
 800068c:	61bb      	str	r3, [r7, #24]
	gpioa.Alternate = GPIO_AF5_SPI1;
 800068e:	2305      	movs	r3, #5
 8000690:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &gpioa);
 8000692:	f107 030c 	add.w	r3, r7, #12
 8000696:	4619      	mov	r1, r3
 8000698:	4824      	ldr	r0, [pc, #144]	; (800072c <ad7190_init+0x100>)
 800069a:	f001 f9cf 	bl	8001a3c <HAL_GPIO_Init>

	NSS_Pin.Pin = GPIO_PIN_4;
 800069e:	4b24      	ldr	r3, [pc, #144]	; (8000730 <ad7190_init+0x104>)
 80006a0:	2210      	movs	r2, #16
 80006a2:	601a      	str	r2, [r3, #0]
	NSS_Pin.Mode = GPIO_MODE_OUTPUT_PP;
 80006a4:	4b22      	ldr	r3, [pc, #136]	; (8000730 <ad7190_init+0x104>)
 80006a6:	2201      	movs	r2, #1
 80006a8:	605a      	str	r2, [r3, #4]
	NSS_Pin.Pull = GPIO_NOPULL;
 80006aa:	4b21      	ldr	r3, [pc, #132]	; (8000730 <ad7190_init+0x104>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
	NSS_Pin.Speed = GPIO_SPEED_LOW;
 80006b0:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <ad7190_init+0x104>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
//	gpioa.Alternate = GPIO_AF5_SPI1;
	HAL_GPIO_Init(GPIOA, &NSS_Pin);
 80006b6:	491e      	ldr	r1, [pc, #120]	; (8000730 <ad7190_init+0x104>)
 80006b8:	481c      	ldr	r0, [pc, #112]	; (800072c <ad7190_init+0x100>)
 80006ba:	f001 f9bf 	bl	8001a3c <HAL_GPIO_Init>


    spi1.Instance = SPI1;
 80006be:	4b1d      	ldr	r3, [pc, #116]	; (8000734 <ad7190_init+0x108>)
 80006c0:	4a1d      	ldr	r2, [pc, #116]	; (8000738 <ad7190_init+0x10c>)
 80006c2:	601a      	str	r2, [r3, #0]
    spi1.Init.Mode = SPI_MODE_MASTER;
 80006c4:	4b1b      	ldr	r3, [pc, #108]	; (8000734 <ad7190_init+0x108>)
 80006c6:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006ca:	605a      	str	r2, [r3, #4]
    spi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006cc:	4b19      	ldr	r3, [pc, #100]	; (8000734 <ad7190_init+0x108>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
    spi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006d2:	4b18      	ldr	r3, [pc, #96]	; (8000734 <ad7190_init+0x108>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
    spi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80006d8:	4b16      	ldr	r3, [pc, #88]	; (8000734 <ad7190_init+0x108>)
 80006da:	2202      	movs	r2, #2
 80006dc:	611a      	str	r2, [r3, #16]
    spi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80006de:	4b15      	ldr	r3, [pc, #84]	; (8000734 <ad7190_init+0x108>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	615a      	str	r2, [r3, #20]
    spi1.Init.NSS = SPI_NSS_SOFT;
 80006e4:	4b13      	ldr	r3, [pc, #76]	; (8000734 <ad7190_init+0x108>)
 80006e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ea:	619a      	str	r2, [r3, #24]
    spi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80006ec:	4b11      	ldr	r3, [pc, #68]	; (8000734 <ad7190_init+0x108>)
 80006ee:	2230      	movs	r2, #48	; 0x30
 80006f0:	61da      	str	r2, [r3, #28]
    spi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006f2:	4b10      	ldr	r3, [pc, #64]	; (8000734 <ad7190_init+0x108>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]
    spi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006f8:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <ad7190_init+0x108>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	625a      	str	r2, [r3, #36]	; 0x24
    spi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006fe:	4b0d      	ldr	r3, [pc, #52]	; (8000734 <ad7190_init+0x108>)
 8000700:	2200      	movs	r2, #0
 8000702:	629a      	str	r2, [r3, #40]	; 0x28
    spi1.Init.CRCPolynomial = 10;
 8000704:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <ad7190_init+0x108>)
 8000706:	220a      	movs	r2, #10
 8000708:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_SPI_Init(&spi1) != HAL_OK)
 800070a:	480a      	ldr	r0, [pc, #40]	; (8000734 <ad7190_init+0x108>)
 800070c:	f003 fd0c 	bl	8004128 <HAL_SPI_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <ad7190_init+0xee>
    {
        AD7190_Error_Handler();
 8000716:	f7ff ff81 	bl	800061c <AD7190_Error_Handler>
    }


}
 800071a:	bf00      	nop
 800071c:	3720      	adds	r7, #32
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	0800dd30 	.word	0x0800dd30
 8000728:	40023800 	.word	0x40023800
 800072c:	40020000 	.word	0x40020000
 8000730:	20000100 	.word	0x20000100
 8000734:	200000a8 	.word	0x200000a8
 8000738:	40013000 	.word	0x40013000

0800073c <ad7190_reset>:


void ad7190_reset(void){
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
	uint8_t registerWord[7];

	registerWord[0] = 0x01;
 8000742:	2301      	movs	r3, #1
 8000744:	703b      	strb	r3, [r7, #0]
	registerWord[1] = 0xFF;
 8000746:	23ff      	movs	r3, #255	; 0xff
 8000748:	707b      	strb	r3, [r7, #1]
	registerWord[2] = 0xFF;
 800074a:	23ff      	movs	r3, #255	; 0xff
 800074c:	70bb      	strb	r3, [r7, #2]
	registerWord[3] = 0xFF;
 800074e:	23ff      	movs	r3, #255	; 0xff
 8000750:	70fb      	strb	r3, [r7, #3]
	registerWord[4] = 0xFF;
 8000752:	23ff      	movs	r3, #255	; 0xff
 8000754:	713b      	strb	r3, [r7, #4]
	registerWord[5] = 0xFF;
 8000756:	23ff      	movs	r3, #255	; 0xff
 8000758:	717b      	strb	r3, [r7, #5]
	registerWord[6] = 0xFF;
 800075a:	23ff      	movs	r3, #255	; 0xff
 800075c:	71bb      	strb	r3, [r7, #6]

	HAL_SPI_Transmit(&spi1, registerWord, 7, 0xffff);
 800075e:	4639      	mov	r1, r7
 8000760:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000764:	2207      	movs	r2, #7
 8000766:	4803      	ldr	r0, [pc, #12]	; (8000774 <ad7190_reset+0x38>)
 8000768:	f003 fd67 	bl	800423a <HAL_SPI_Transmit>
}
 800076c:	bf00      	nop
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	200000a8 	.word	0x200000a8

08000778 <ad7190_read_8bit>:


uint8_t ad7190_read_8bit(uint8_t cmd){
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	71fb      	strb	r3, [r7, #7]
    uint8_t receive = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	73fb      	strb	r3, [r7, #15]

    cmd |= AD7190_CR_WR;
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800078c:	b2db      	uxtb	r3, r3
 800078e:	71fb      	strb	r3, [r7, #7]

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000790:	2200      	movs	r2, #0
 8000792:	2110      	movs	r1, #16
 8000794:	480d      	ldr	r0, [pc, #52]	; (80007cc <ad7190_read_8bit+0x54>)
 8000796:	f001 fafd 	bl	8001d94 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&spi1, &cmd, 1, 1000);
 800079a:	1df9      	adds	r1, r7, #7
 800079c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a0:	2201      	movs	r2, #1
 80007a2:	480b      	ldr	r0, [pc, #44]	; (80007d0 <ad7190_read_8bit+0x58>)
 80007a4:	f003 fd49 	bl	800423a <HAL_SPI_Transmit>
//    for(int i=0; i<200; i++) {
//    	asm("nop");
//    };
    HAL_SPI_Receive(&spi1, &receive, 1, 1000);
 80007a8:	f107 010f 	add.w	r1, r7, #15
 80007ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007b0:	2201      	movs	r2, #1
 80007b2:	4807      	ldr	r0, [pc, #28]	; (80007d0 <ad7190_read_8bit+0x58>)
 80007b4:	f003 fe7d 	bl	80044b2 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80007b8:	2201      	movs	r2, #1
 80007ba:	2110      	movs	r1, #16
 80007bc:	4803      	ldr	r0, [pc, #12]	; (80007cc <ad7190_read_8bit+0x54>)
 80007be:	f001 fae9 	bl	8001d94 <HAL_GPIO_WritePin>

    return receive;
 80007c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40020000 	.word	0x40020000
 80007d0:	200000a8 	.word	0x200000a8

080007d4 <ad7190_read_24bit>:

uint32_t ad7190_read_24bit(uint8_t cmd){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
    uint32_t receive = 0;
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
    uint8_t temp = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	72fb      	strb	r3, [r7, #11]

    cmd |= AD7190_CR_WR;
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	71fb      	strb	r3, [r7, #7]

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2110      	movs	r1, #16
 80007f4:	481c      	ldr	r0, [pc, #112]	; (8000868 <ad7190_read_24bit+0x94>)
 80007f6:	f001 facd 	bl	8001d94 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&spi1, &cmd, 1, 1000);
 80007fa:	1df9      	adds	r1, r7, #7
 80007fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000800:	2201      	movs	r2, #1
 8000802:	481a      	ldr	r0, [pc, #104]	; (800086c <ad7190_read_24bit+0x98>)
 8000804:	f003 fd19 	bl	800423a <HAL_SPI_Transmit>
//    for(int i=0; i<200; i++) {
//    	asm("nop");
//    };
    HAL_SPI_Receive(&spi1, &temp, 1, 1000);
 8000808:	f107 010b 	add.w	r1, r7, #11
 800080c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000810:	2201      	movs	r2, #1
 8000812:	4816      	ldr	r0, [pc, #88]	; (800086c <ad7190_read_24bit+0x98>)
 8000814:	f003 fe4d 	bl	80044b2 <HAL_SPI_Receive>
    receive = (temp<<16);
 8000818:	7afb      	ldrb	r3, [r7, #11]
 800081a:	041b      	lsls	r3, r3, #16
 800081c:	60fb      	str	r3, [r7, #12]

    HAL_SPI_Receive(&spi1, &temp, 1, 1000);
 800081e:	f107 010b 	add.w	r1, r7, #11
 8000822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000826:	2201      	movs	r2, #1
 8000828:	4810      	ldr	r0, [pc, #64]	; (800086c <ad7190_read_24bit+0x98>)
 800082a:	f003 fe42 	bl	80044b2 <HAL_SPI_Receive>
    receive |= (temp<<8);
 800082e:	7afb      	ldrb	r3, [r7, #11]
 8000830:	021b      	lsls	r3, r3, #8
 8000832:	461a      	mov	r2, r3
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	4313      	orrs	r3, r2
 8000838:	60fb      	str	r3, [r7, #12]

    HAL_SPI_Receive(&spi1, &temp, 1, 1000);
 800083a:	f107 010b 	add.w	r1, r7, #11
 800083e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000842:	2201      	movs	r2, #1
 8000844:	4809      	ldr	r0, [pc, #36]	; (800086c <ad7190_read_24bit+0x98>)
 8000846:	f003 fe34 	bl	80044b2 <HAL_SPI_Receive>
    receive |= temp;
 800084a:	7afb      	ldrb	r3, [r7, #11]
 800084c:	461a      	mov	r2, r3
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	4313      	orrs	r3, r2
 8000852:	60fb      	str	r3, [r7, #12]


    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8000854:	2201      	movs	r2, #1
 8000856:	2110      	movs	r1, #16
 8000858:	4803      	ldr	r0, [pc, #12]	; (8000868 <ad7190_read_24bit+0x94>)
 800085a:	f001 fa9b 	bl	8001d94 <HAL_GPIO_WritePin>

    return receive;
 800085e:	68fb      	ldr	r3, [r7, #12]
}
 8000860:	4618      	mov	r0, r3
 8000862:	3710      	adds	r7, #16
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40020000 	.word	0x40020000
 800086c:	200000a8 	.word	0x200000a8

08000870 <SPI1_IRQHandler>:

}



void SPI1_IRQHandler(void){
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
	HAL_SPI_IRQHandler(&spi1);
 8000874:	4802      	ldr	r0, [pc, #8]	; (8000880 <SPI1_IRQHandler+0x10>)
 8000876:	f004 f8cf 	bl	8004a18 <HAL_SPI_IRQHandler>

}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200000a8 	.word	0x200000a8

08000884 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr

08000892 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000892:	b480      	push	{r7}
 8000894:	b083      	sub	sp, #12
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
 800089a:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800089c:	bf00      	nop
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
	...

080008b8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80008b8:	b480      	push	{r7}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	4a07      	ldr	r2, [pc, #28]	; (80008e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80008c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	4a06      	ldr	r2, [pc, #24]	; (80008e8 <vApplicationGetIdleTaskMemory+0x30>)
 80008ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2280      	movs	r2, #128	; 0x80
 80008d4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80008d6:	bf00      	nop
 80008d8:	3714      	adds	r7, #20
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	20000114 	.word	0x20000114
 80008e8:	200001b8 	.word	0x200001b8

080008ec <__NVIC_EnableIRQ>:
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	db0b      	blt.n	8000916 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	f003 021f 	and.w	r2, r3, #31
 8000904:	4907      	ldr	r1, [pc, #28]	; (8000924 <__NVIC_EnableIRQ+0x38>)
 8000906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090a:	095b      	lsrs	r3, r3, #5
 800090c:	2001      	movs	r0, #1
 800090e:	fa00 f202 	lsl.w	r2, r0, r2
 8000912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	e000e100 	.word	0xe000e100

08000928 <__NVIC_SetPriority>:
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	6039      	str	r1, [r7, #0]
 8000932:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000938:	2b00      	cmp	r3, #0
 800093a:	db0a      	blt.n	8000952 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	b2da      	uxtb	r2, r3
 8000940:	490c      	ldr	r1, [pc, #48]	; (8000974 <__NVIC_SetPriority+0x4c>)
 8000942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000946:	0112      	lsls	r2, r2, #4
 8000948:	b2d2      	uxtb	r2, r2
 800094a:	440b      	add	r3, r1
 800094c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000950:	e00a      	b.n	8000968 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	b2da      	uxtb	r2, r3
 8000956:	4908      	ldr	r1, [pc, #32]	; (8000978 <__NVIC_SetPriority+0x50>)
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	f003 030f 	and.w	r3, r3, #15
 800095e:	3b04      	subs	r3, #4
 8000960:	0112      	lsls	r2, r2, #4
 8000962:	b2d2      	uxtb	r2, r2
 8000964:	440b      	add	r3, r1
 8000966:	761a      	strb	r2, [r3, #24]
}
 8000968:	bf00      	nop
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	e000e100 	.word	0xe000e100
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <__io_putchar>:
/* USER CODE BEGIN PFP */
char data[256];


int __io_putchar(int ch)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000984:	1d39      	adds	r1, r7, #4
 8000986:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800098a:	2201      	movs	r2, #1
 800098c:	4807      	ldr	r0, [pc, #28]	; (80009ac <__io_putchar+0x30>)
 800098e:	f004 ff54 	bl	800583a <HAL_UART_Transmit>
 8000992:	4603      	mov	r3, r0
 8000994:	73fb      	strb	r3, [r7, #15]
    return (status == HAL_OK ? ch : 0);
 8000996:	7bfb      	ldrb	r3, [r7, #15]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d101      	bne.n	80009a0 <__io_putchar+0x24>
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	e000      	b.n	80009a2 <__io_putchar+0x26>
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	200004e8 	.word	0x200004e8

080009b0 <read_uart>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void read_uart(void const * arg){
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]


	while(1){
		if(osSignalWait(0x0001, osWaitForever).status == osEventSignal);
 80009b8:	f107 030c 	add.w	r3, r7, #12
 80009bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009c0:	2101      	movs	r1, #1
 80009c2:	4618      	mov	r0, r3
 80009c4:	f009 fa04 	bl	8009dd0 <osSignalWait>


		HAL_GPIO_TogglePin(GPIOG, LD3_Pin);
 80009c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009cc:	4803      	ldr	r0, [pc, #12]	; (80009dc <read_uart+0x2c>)
 80009ce:	f001 f9fa 	bl	8001dc6 <HAL_GPIO_TogglePin>
//		HAL_UART_Transmit(&huart1, (uint8_t*)&data, 256, 1000);

		osDelay(1000);
 80009d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009d6:	f009 f9a6 	bl	8009d26 <osDelay>
		if(osSignalWait(0x0001, osWaitForever).status == osEventSignal);
 80009da:	e7ed      	b.n	80009b8 <read_uart+0x8>
 80009dc:	40021800 	.word	0x40021800

080009e0 <blinky>:

	}
}

void blinky(void const * args){
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]

	while(1){

		osDelay(1000);
 80009e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009ec:	f009 f99b 	bl	8009d26 <osDelay>
 80009f0:	e7fa      	b.n	80009e8 <blinky+0x8>
	...

080009f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f4:	b5b0      	push	{r4, r5, r7, lr}
 80009f6:	b098      	sub	sp, #96	; 0x60
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009fa:	f000 fd35 	bl	8001468 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009fe:	f000 f879 	bl	8000af4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a02:	f000 f987 	bl	8000d14 <MX_GPIO_Init>
//  MX_DMA2D_Init();
//  MX_FMC_Init();
//  MX_I2C3_Init();
//  MX_LTDC_Init();
//  MX_SPI5_Init();
  MX_TIM1_Init();
 8000a06:	f000 f8df 	bl	8000bc8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000a0a:	f000 f92d 	bl	8000c68 <MX_USART1_UART_Init>

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

	ad7190_init();
 8000a0e:	f7ff fe0d 	bl	800062c <ad7190_init>
	ad7190_reset();
 8000a12:	f7ff fe93 	bl	800073c <ad7190_reset>
	HAL_Delay(1);
 8000a16:	2001      	movs	r0, #1
 8000a18:	f000 fd68 	bl	80014ec <HAL_Delay>

	int8_t id = ad7190_read_8bit(AD7190_ID_REGISTER);
 8000a1c:	2020      	movs	r0, #32
 8000a1e:	f7ff feab 	bl	8000778 <ad7190_read_8bit>
 8000a22:	4603      	mov	r3, r0
 8000a24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	printf("ID=%x\r\n", id);
 8000a28:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4828      	ldr	r0, [pc, #160]	; (8000ad0 <main+0xdc>)
 8000a30:	f00c fade 	bl	800cff0 <iprintf>

	int8_t status = ad7190_read_8bit(AD7190_STATUS_REGISTER);
 8000a34:	2000      	movs	r0, #0
 8000a36:	f7ff fe9f 	bl	8000778 <ad7190_read_8bit>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	printf("STATUS=%x\r\n", status);
 8000a40:	f997 305e 	ldrsb.w	r3, [r7, #94]	; 0x5e
 8000a44:	4619      	mov	r1, r3
 8000a46:	4823      	ldr	r0, [pc, #140]	; (8000ad4 <main+0xe0>)
 8000a48:	f00c fad2 	bl	800cff0 <iprintf>


	uint32_t config = ad7190_read_24bit(AD7190_CONFIGURATION_REGISTER);
 8000a4c:	2010      	movs	r0, #16
 8000a4e:	f7ff fec1 	bl	80007d4 <ad7190_read_24bit>
 8000a52:	65b8      	str	r0, [r7, #88]	; 0x58
	printf("CONFIG=%lx\r\n", config);
 8000a54:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000a56:	4820      	ldr	r0, [pc, #128]	; (8000ad8 <main+0xe4>)
 8000a58:	f00c faca 	bl	800cff0 <iprintf>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */

  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000a5c:	4b1f      	ldr	r3, [pc, #124]	; (8000adc <main+0xe8>)
 8000a5e:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000a62:	461d      	mov	r5, r3
 8000a64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a68:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000a70:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f009 f909 	bl	8009c8e <osThreadCreate>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	4a18      	ldr	r2, [pc, #96]	; (8000ae0 <main+0xec>)
 8000a80:	6013      	str	r3, [r2, #0]

  osThreadDef(read_uart, read_uart, osPriorityHigh, 0, 4096);
 8000a82:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <main+0xf0>)
 8000a84:	f107 0420 	add.w	r4, r7, #32
 8000a88:	461d      	mov	r5, r3
 8000a8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a8e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  read_uart_id = osThreadCreate(osThread(read_uart), NULL);
 8000a96:	f107 0320 	add.w	r3, r7, #32
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f009 f8f6 	bl	8009c8e <osThreadCreate>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	4a10      	ldr	r2, [pc, #64]	; (8000ae8 <main+0xf4>)
 8000aa6:	6013      	str	r3, [r2, #0]

  osThreadDef(blinky, blinky, osPriorityNormal, 0, 256);
 8000aa8:	4b10      	ldr	r3, [pc, #64]	; (8000aec <main+0xf8>)
 8000aaa:	1d3c      	adds	r4, r7, #4
 8000aac:	461d      	mov	r5, r3
 8000aae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ab0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ab2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ab6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  blinky_id = osThreadCreate(osThread(blinky), NULL);
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f009 f8e5 	bl	8009c8e <osThreadCreate>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	4a0a      	ldr	r2, [pc, #40]	; (8000af0 <main+0xfc>)
 8000ac8:	6013      	str	r3, [r2, #0]
  /* add threads, ... */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000aca:	f009 f8d9 	bl	8009c80 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ace:	e7fe      	b.n	8000ace <main+0xda>
 8000ad0:	0800dd48 	.word	0x0800dd48
 8000ad4:	0800dd50 	.word	0x0800dd50
 8000ad8:	0800dd5c 	.word	0x0800dd5c
 8000adc:	0800dd78 	.word	0x0800dd78
 8000ae0:	2000052c 	.word	0x2000052c
 8000ae4:	0800dda0 	.word	0x0800dda0
 8000ae8:	20000534 	.word	0x20000534
 8000aec:	0800ddc4 	.word	0x0800ddc4
 8000af0:	20000530 	.word	0x20000530

08000af4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b094      	sub	sp, #80	; 0x50
 8000af8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afa:	f107 0320 	add.w	r3, r7, #32
 8000afe:	2230      	movs	r2, #48	; 0x30
 8000b00:	2100      	movs	r1, #0
 8000b02:	4618      	mov	r0, r3
 8000b04:	f00c fbba 	bl	800d27c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b08:	f107 030c 	add.w	r3, r7, #12
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	4b28      	ldr	r3, [pc, #160]	; (8000bc0 <SystemClock_Config+0xcc>)
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b20:	4a27      	ldr	r2, [pc, #156]	; (8000bc0 <SystemClock_Config+0xcc>)
 8000b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b26:	6413      	str	r3, [r2, #64]	; 0x40
 8000b28:	4b25      	ldr	r3, [pc, #148]	; (8000bc0 <SystemClock_Config+0xcc>)
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b34:	2300      	movs	r3, #0
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	4b22      	ldr	r3, [pc, #136]	; (8000bc4 <SystemClock_Config+0xd0>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b40:	4a20      	ldr	r2, [pc, #128]	; (8000bc4 <SystemClock_Config+0xd0>)
 8000b42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b46:	6013      	str	r3, [r2, #0]
 8000b48:	4b1e      	ldr	r3, [pc, #120]	; (8000bc4 <SystemClock_Config+0xd0>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b54:	2301      	movs	r3, #1
 8000b56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b68:	2304      	movs	r3, #4
 8000b6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000b6c:	2348      	movs	r3, #72	; 0x48
 8000b6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b70:	2302      	movs	r3, #2
 8000b72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000b74:	2303      	movs	r3, #3
 8000b76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b78:	f107 0320 	add.w	r3, r7, #32
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f002 fe09 	bl	8003794 <HAL_RCC_OscConfig>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b88:	f000 f9f0 	bl	8000f6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b8c:	230f      	movs	r3, #15
 8000b8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b90:	2302      	movs	r3, #2
 8000b92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ba2:	f107 030c 	add.w	r3, r7, #12
 8000ba6:	2102      	movs	r1, #2
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f003 f86b 	bl	8003c84 <HAL_RCC_ClockConfig>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000bb4:	f000 f9da 	bl	8000f6c <Error_Handler>
  }
}
 8000bb8:	bf00      	nop
 8000bba:	3750      	adds	r7, #80	; 0x50
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40007000 	.word	0x40007000

08000bc8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bce:	f107 0308 	add.w	r3, r7, #8
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bdc:	463b      	mov	r3, r7
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000be4:	4b1e      	ldr	r3, [pc, #120]	; (8000c60 <MX_TIM1_Init+0x98>)
 8000be6:	4a1f      	ldr	r2, [pc, #124]	; (8000c64 <MX_TIM1_Init+0x9c>)
 8000be8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000bea:	4b1d      	ldr	r3, [pc, #116]	; (8000c60 <MX_TIM1_Init+0x98>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf0:	4b1b      	ldr	r3, [pc, #108]	; (8000c60 <MX_TIM1_Init+0x98>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000bf6:	4b1a      	ldr	r3, [pc, #104]	; (8000c60 <MX_TIM1_Init+0x98>)
 8000bf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bfc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bfe:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <MX_TIM1_Init+0x98>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c04:	4b16      	ldr	r3, [pc, #88]	; (8000c60 <MX_TIM1_Init+0x98>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <MX_TIM1_Init+0x98>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c10:	4813      	ldr	r0, [pc, #76]	; (8000c60 <MX_TIM1_Init+0x98>)
 8000c12:	f004 f943 	bl	8004e9c <HAL_TIM_Base_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000c1c:	f000 f9a6 	bl	8000f6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c26:	f107 0308 	add.w	r3, r7, #8
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	480c      	ldr	r0, [pc, #48]	; (8000c60 <MX_TIM1_Init+0x98>)
 8000c2e:	f004 fafd 	bl	800522c <HAL_TIM_ConfigClockSource>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000c38:	f000 f998 	bl	8000f6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c40:	2300      	movs	r3, #0
 8000c42:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c44:	463b      	mov	r3, r7
 8000c46:	4619      	mov	r1, r3
 8000c48:	4805      	ldr	r0, [pc, #20]	; (8000c60 <MX_TIM1_Init+0x98>)
 8000c4a:	f004 fd19 	bl	8005680 <HAL_TIMEx_MasterConfigSynchronization>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000c54:	f000 f98a 	bl	8000f6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c58:	bf00      	nop
 8000c5a:	3718      	adds	r7, #24
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	200004a0 	.word	0x200004a0
 8000c64:	40010000 	.word	0x40010000

08000c68 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */
 __NVIC_EnableIRQ(USART1_IRQn);
 8000c6c:	2025      	movs	r0, #37	; 0x25
 8000c6e:	f7ff fe3d 	bl	80008ec <__NVIC_EnableIRQ>
 __NVIC_SetPriority(USART1_IRQn, 10);
 8000c72:	210a      	movs	r1, #10
 8000c74:	2025      	movs	r0, #37	; 0x25
 8000c76:	f7ff fe57 	bl	8000928 <__NVIC_SetPriority>
  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c7a:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <MX_USART1_UART_Init+0x68>)
 8000c7c:	4a15      	ldr	r2, [pc, #84]	; (8000cd4 <MX_USART1_UART_Init+0x6c>)
 8000c7e:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c80:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <MX_USART1_UART_Init+0x68>)
 8000c82:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c86:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <MX_USART1_UART_Init+0x68>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <MX_USART1_UART_Init+0x68>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c94:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <MX_USART1_UART_Init+0x68>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c9a:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <MX_USART1_UART_Init+0x68>)
 8000c9c:	220c      	movs	r2, #12
 8000c9e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <MX_USART1_UART_Init+0x68>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca6:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <MX_USART1_UART_Init+0x68>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	61da      	str	r2, [r3, #28]



  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cac:	4808      	ldr	r0, [pc, #32]	; (8000cd0 <MX_USART1_UART_Init+0x68>)
 8000cae:	f004 fd77 	bl	80057a0 <HAL_UART_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8000cb8:	f000 f958 	bl	8000f6c <Error_Handler>
  }

  /* USER CODE BEGIN USART1_Init 2 */
  huart1.Instance->CR1 |= USART_CR1_RXNEIE;
 8000cbc:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <MX_USART1_UART_Init+0x68>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	68da      	ldr	r2, [r3, #12]
 8000cc2:	4b03      	ldr	r3, [pc, #12]	; (8000cd0 <MX_USART1_UART_Init+0x68>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f042 0220 	orr.w	r2, r2, #32
 8000cca:	60da      	str	r2, [r3, #12]

  /* USER CODE END USART1_Init 2 */

}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	200004e8 	.word	0x200004e8
 8000cd4:	40011000 	.word	0x40011000

08000cd8 <USART1_IRQHandler>:

void USART1_IRQHandler(void){
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart1);
 8000cdc:	480a      	ldr	r0, [pc, #40]	; (8000d08 <USART1_IRQHandler+0x30>)
 8000cde:	f004 fe3f 	bl	8005960 <HAL_UART_IRQHandler>
	if(huart1.Instance->DR == '\r'){
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <USART1_IRQHandler+0x30>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	2b0d      	cmp	r3, #13
 8000cea:	d10a      	bne.n	8000d02 <USART1_IRQHandler+0x2a>
		HAL_GPIO_TogglePin(GPIOG, LD4_Pin);
 8000cec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cf0:	4806      	ldr	r0, [pc, #24]	; (8000d0c <USART1_IRQHandler+0x34>)
 8000cf2:	f001 f868 	bl	8001dc6 <HAL_GPIO_TogglePin>
		osSignalSet(read_uart_id, 0x0001);
 8000cf6:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <USART1_IRQHandler+0x38>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f009 f827 	bl	8009d50 <osSignalSet>
	}
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	200004e8 	.word	0x200004e8
 8000d0c:	40021800 	.word	0x40021800
 8000d10:	20000534 	.word	0x20000534

08000d14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08e      	sub	sp, #56	; 0x38
 8000d18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]
 8000d28:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	623b      	str	r3, [r7, #32]
 8000d2e:	4b7b      	ldr	r3, [pc, #492]	; (8000f1c <MX_GPIO_Init+0x208>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a7a      	ldr	r2, [pc, #488]	; (8000f1c <MX_GPIO_Init+0x208>)
 8000d34:	f043 0304 	orr.w	r3, r3, #4
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b78      	ldr	r3, [pc, #480]	; (8000f1c <MX_GPIO_Init+0x208>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0304 	and.w	r3, r3, #4
 8000d42:	623b      	str	r3, [r7, #32]
 8000d44:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]
 8000d4a:	4b74      	ldr	r3, [pc, #464]	; (8000f1c <MX_GPIO_Init+0x208>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a73      	ldr	r2, [pc, #460]	; (8000f1c <MX_GPIO_Init+0x208>)
 8000d50:	f043 0320 	orr.w	r3, r3, #32
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b71      	ldr	r3, [pc, #452]	; (8000f1c <MX_GPIO_Init+0x208>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0320 	and.w	r3, r3, #32
 8000d5e:	61fb      	str	r3, [r7, #28]
 8000d60:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	61bb      	str	r3, [r7, #24]
 8000d66:	4b6d      	ldr	r3, [pc, #436]	; (8000f1c <MX_GPIO_Init+0x208>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a6c      	ldr	r2, [pc, #432]	; (8000f1c <MX_GPIO_Init+0x208>)
 8000d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b6a      	ldr	r3, [pc, #424]	; (8000f1c <MX_GPIO_Init+0x208>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d7a:	61bb      	str	r3, [r7, #24]
 8000d7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
 8000d82:	4b66      	ldr	r3, [pc, #408]	; (8000f1c <MX_GPIO_Init+0x208>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a65      	ldr	r2, [pc, #404]	; (8000f1c <MX_GPIO_Init+0x208>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b63      	ldr	r3, [pc, #396]	; (8000f1c <MX_GPIO_Init+0x208>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	4b5f      	ldr	r3, [pc, #380]	; (8000f1c <MX_GPIO_Init+0x208>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a5e      	ldr	r2, [pc, #376]	; (8000f1c <MX_GPIO_Init+0x208>)
 8000da4:	f043 0302 	orr.w	r3, r3, #2
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b5c      	ldr	r3, [pc, #368]	; (8000f1c <MX_GPIO_Init+0x208>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	4b58      	ldr	r3, [pc, #352]	; (8000f1c <MX_GPIO_Init+0x208>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a57      	ldr	r2, [pc, #348]	; (8000f1c <MX_GPIO_Init+0x208>)
 8000dc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b55      	ldr	r3, [pc, #340]	; (8000f1c <MX_GPIO_Init+0x208>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	4b51      	ldr	r3, [pc, #324]	; (8000f1c <MX_GPIO_Init+0x208>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4a50      	ldr	r2, [pc, #320]	; (8000f1c <MX_GPIO_Init+0x208>)
 8000ddc:	f043 0310 	orr.w	r3, r3, #16
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4b4e      	ldr	r3, [pc, #312]	; (8000f1c <MX_GPIO_Init+0x208>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f003 0310 	and.w	r3, r3, #16
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	4b4a      	ldr	r3, [pc, #296]	; (8000f1c <MX_GPIO_Init+0x208>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	4a49      	ldr	r2, [pc, #292]	; (8000f1c <MX_GPIO_Init+0x208>)
 8000df8:	f043 0308 	orr.w	r3, r3, #8
 8000dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfe:	4b47      	ldr	r3, [pc, #284]	; (8000f1c <MX_GPIO_Init+0x208>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	f003 0308 	and.w	r3, r3, #8
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2116      	movs	r1, #22
 8000e0e:	4844      	ldr	r0, [pc, #272]	; (8000f20 <MX_GPIO_Init+0x20c>)
 8000e10:	f000 ffc0 	bl	8001d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000e14:	2200      	movs	r2, #0
 8000e16:	2180      	movs	r1, #128	; 0x80
 8000e18:	4842      	ldr	r0, [pc, #264]	; (8000f24 <MX_GPIO_Init+0x210>)
 8000e1a:	f000 ffbb 	bl	8001d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000e24:	4840      	ldr	r0, [pc, #256]	; (8000f28 <MX_GPIO_Init+0x214>)
 8000e26:	f000 ffb5 	bl	8001d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000e30:	483e      	ldr	r0, [pc, #248]	; (8000f2c <MX_GPIO_Init+0x218>)
 8000e32:	f000 ffaf 	bl	8001d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000e36:	2316      	movs	r3, #22
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4834      	ldr	r0, [pc, #208]	; (8000f20 <MX_GPIO_Init+0x20c>)
 8000e4e:	f000 fdf5 	bl	8001a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000e52:	f248 0307 	movw	r3, #32775	; 0x8007
 8000e56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e58:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e66:	4619      	mov	r1, r3
 8000e68:	482e      	ldr	r0, [pc, #184]	; (8000f24 <MX_GPIO_Init+0x210>)
 8000e6a:	f000 fde7 	bl	8001a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000e6e:	2380      	movs	r3, #128	; 0x80
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e72:	2301      	movs	r3, #1
 8000e74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e82:	4619      	mov	r1, r3
 8000e84:	4827      	ldr	r0, [pc, #156]	; (8000f24 <MX_GPIO_Init+0x210>)
 8000e86:	f000 fdd9 	bl	8001a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000e8a:	2320      	movs	r3, #32
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e8e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000e98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4820      	ldr	r0, [pc, #128]	; (8000f20 <MX_GPIO_Init+0x20c>)
 8000ea0:	f000 fdcc 	bl	8001a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000ea4:	2304      	movs	r3, #4
 8000ea6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000eb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	481e      	ldr	r0, [pc, #120]	; (8000f30 <MX_GPIO_Init+0x21c>)
 8000eb8:	f000 fdc0 	bl	8001a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000ebc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000eca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4815      	ldr	r0, [pc, #84]	; (8000f28 <MX_GPIO_Init+0x214>)
 8000ed2:	f000 fdb3 	bl	8001a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000ed6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000eda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000edc:	2301      	movs	r3, #1
 8000ede:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ee8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eec:	4619      	mov	r1, r3
 8000eee:	480e      	ldr	r0, [pc, #56]	; (8000f28 <MX_GPIO_Init+0x214>)
 8000ef0:	f000 fda4 	bl	8001a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000ef4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000ef8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efa:	2301      	movs	r3, #1
 8000efc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2300      	movs	r3, #0
 8000f04:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4807      	ldr	r0, [pc, #28]	; (8000f2c <MX_GPIO_Init+0x218>)
 8000f0e:	f000 fd95 	bl	8001a3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f12:	bf00      	nop
 8000f14:	3738      	adds	r7, #56	; 0x38
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40020800 	.word	0x40020800
 8000f24:	40020000 	.word	0x40020000
 8000f28:	40020c00 	.word	0x40020c00
 8000f2c:	40021800 	.word	0x40021800
 8000f30:	40020400 	.word	0x40020400

08000f34 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000f3c:	f00b fbd2 	bl	800c6e4 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f40:	2001      	movs	r0, #1
 8000f42:	f008 fef0 	bl	8009d26 <osDelay>
 8000f46:	e7fb      	b.n	8000f40 <StartDefaultTask+0xc>

08000f48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a04      	ldr	r2, [pc, #16]	; (8000f68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d101      	bne.n	8000f5e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f5a:	f000 faa7 	bl	80014ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40001000 	.word	0x40001000

08000f6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f70:	b672      	cpsid	i
}
 8000f72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <Error_Handler+0x8>
	...

08000f78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <HAL_MspInit+0x54>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f86:	4a11      	ldr	r2, [pc, #68]	; (8000fcc <HAL_MspInit+0x54>)
 8000f88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <HAL_MspInit+0x54>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	603b      	str	r3, [r7, #0]
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <HAL_MspInit+0x54>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <HAL_MspInit+0x54>)
 8000fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8000faa:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <HAL_MspInit+0x54>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb2:	603b      	str	r3, [r7, #0]
 8000fb4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	210f      	movs	r1, #15
 8000fba:	f06f 0001 	mvn.w	r0, #1
 8000fbe:	f000 fb71 	bl	80016a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40023800 	.word	0x40023800

08000fd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	; 0x28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a19      	ldr	r2, [pc, #100]	; (8001054 <HAL_SPI_MspInit+0x84>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d12c      	bne.n	800104c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	4b18      	ldr	r3, [pc, #96]	; (8001058 <HAL_SPI_MspInit+0x88>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffa:	4a17      	ldr	r2, [pc, #92]	; (8001058 <HAL_SPI_MspInit+0x88>)
 8000ffc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001000:	6453      	str	r3, [r2, #68]	; 0x44
 8001002:	4b15      	ldr	r3, [pc, #84]	; (8001058 <HAL_SPI_MspInit+0x88>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001006:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800100a:	613b      	str	r3, [r7, #16]
 800100c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	4b11      	ldr	r3, [pc, #68]	; (8001058 <HAL_SPI_MspInit+0x88>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a10      	ldr	r2, [pc, #64]	; (8001058 <HAL_SPI_MspInit+0x88>)
 8001018:	f043 0320 	orr.w	r3, r3, #32
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <HAL_SPI_MspInit+0x88>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0320 	and.w	r3, r3, #32
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800102a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800102e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	2302      	movs	r3, #2
 8001032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800103c:	2305      	movs	r3, #5
 800103e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	4619      	mov	r1, r3
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <HAL_SPI_MspInit+0x8c>)
 8001048:	f000 fcf8 	bl	8001a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800104c:	bf00      	nop
 800104e:	3728      	adds	r7, #40	; 0x28
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40015000 	.word	0x40015000
 8001058:	40023800 	.word	0x40023800
 800105c:	40021400 	.word	0x40021400

08001060 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a0b      	ldr	r2, [pc, #44]	; (800109c <HAL_TIM_Base_MspInit+0x3c>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d10d      	bne.n	800108e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <HAL_TIM_Base_MspInit+0x40>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107a:	4a09      	ldr	r2, [pc, #36]	; (80010a0 <HAL_TIM_Base_MspInit+0x40>)
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	6453      	str	r3, [r2, #68]	; 0x44
 8001082:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <HAL_TIM_Base_MspInit+0x40>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800108e:	bf00      	nop
 8001090:	3714      	adds	r7, #20
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	40010000 	.word	0x40010000
 80010a0:	40023800 	.word	0x40023800

080010a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	; 0x28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a19      	ldr	r2, [pc, #100]	; (8001128 <HAL_UART_MspInit+0x84>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d12c      	bne.n	8001120 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
 80010ca:	4b18      	ldr	r3, [pc, #96]	; (800112c <HAL_UART_MspInit+0x88>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ce:	4a17      	ldr	r2, [pc, #92]	; (800112c <HAL_UART_MspInit+0x88>)
 80010d0:	f043 0310 	orr.w	r3, r3, #16
 80010d4:	6453      	str	r3, [r2, #68]	; 0x44
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <HAL_UART_MspInit+0x88>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	f003 0310 	and.w	r3, r3, #16
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	4b11      	ldr	r3, [pc, #68]	; (800112c <HAL_UART_MspInit+0x88>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a10      	ldr	r2, [pc, #64]	; (800112c <HAL_UART_MspInit+0x88>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <HAL_UART_MspInit+0x88>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80010fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001102:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001104:	2302      	movs	r3, #2
 8001106:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110c:	2303      	movs	r3, #3
 800110e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001110:	2307      	movs	r3, #7
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	4619      	mov	r1, r3
 800111a:	4805      	ldr	r0, [pc, #20]	; (8001130 <HAL_UART_MspInit+0x8c>)
 800111c:	f000 fc8e 	bl	8001a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001120:	bf00      	nop
 8001122:	3728      	adds	r7, #40	; 0x28
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40011000 	.word	0x40011000
 800112c:	40023800 	.word	0x40023800
 8001130:	40020000 	.word	0x40020000

08001134 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08e      	sub	sp, #56	; 0x38
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800113c:	2300      	movs	r3, #0
 800113e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001140:	2300      	movs	r3, #0
 8001142:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001144:	2300      	movs	r3, #0
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	4b33      	ldr	r3, [pc, #204]	; (8001218 <HAL_InitTick+0xe4>)
 800114a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114c:	4a32      	ldr	r2, [pc, #200]	; (8001218 <HAL_InitTick+0xe4>)
 800114e:	f043 0310 	orr.w	r3, r3, #16
 8001152:	6413      	str	r3, [r2, #64]	; 0x40
 8001154:	4b30      	ldr	r3, [pc, #192]	; (8001218 <HAL_InitTick+0xe4>)
 8001156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001158:	f003 0310 	and.w	r3, r3, #16
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001160:	f107 0210 	add.w	r2, r7, #16
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	4611      	mov	r1, r2
 800116a:	4618      	mov	r0, r3
 800116c:	f002 ffaa 	bl	80040c4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001170:	6a3b      	ldr	r3, [r7, #32]
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001176:	2b00      	cmp	r3, #0
 8001178:	d103      	bne.n	8001182 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800117a:	f002 ff7b 	bl	8004074 <HAL_RCC_GetPCLK1Freq>
 800117e:	6378      	str	r0, [r7, #52]	; 0x34
 8001180:	e004      	b.n	800118c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001182:	f002 ff77 	bl	8004074 <HAL_RCC_GetPCLK1Freq>
 8001186:	4603      	mov	r3, r0
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800118c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800118e:	4a23      	ldr	r2, [pc, #140]	; (800121c <HAL_InitTick+0xe8>)
 8001190:	fba2 2303 	umull	r2, r3, r2, r3
 8001194:	0c9b      	lsrs	r3, r3, #18
 8001196:	3b01      	subs	r3, #1
 8001198:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800119a:	4b21      	ldr	r3, [pc, #132]	; (8001220 <HAL_InitTick+0xec>)
 800119c:	4a21      	ldr	r2, [pc, #132]	; (8001224 <HAL_InitTick+0xf0>)
 800119e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80011a0:	4b1f      	ldr	r3, [pc, #124]	; (8001220 <HAL_InitTick+0xec>)
 80011a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011a6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80011a8:	4a1d      	ldr	r2, [pc, #116]	; (8001220 <HAL_InitTick+0xec>)
 80011aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ac:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80011ae:	4b1c      	ldr	r3, [pc, #112]	; (8001220 <HAL_InitTick+0xec>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b4:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <HAL_InitTick+0xec>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ba:	4b19      	ldr	r3, [pc, #100]	; (8001220 <HAL_InitTick+0xec>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80011c0:	4817      	ldr	r0, [pc, #92]	; (8001220 <HAL_InitTick+0xec>)
 80011c2:	f003 fe6b 	bl	8004e9c <HAL_TIM_Base_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80011cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d11b      	bne.n	800120c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80011d4:	4812      	ldr	r0, [pc, #72]	; (8001220 <HAL_InitTick+0xec>)
 80011d6:	f003 feb1 	bl	8004f3c <HAL_TIM_Base_Start_IT>
 80011da:	4603      	mov	r3, r0
 80011dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80011e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d111      	bne.n	800120c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011e8:	2036      	movs	r0, #54	; 0x36
 80011ea:	f000 fa77 	bl	80016dc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b0f      	cmp	r3, #15
 80011f2:	d808      	bhi.n	8001206 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80011f4:	2200      	movs	r2, #0
 80011f6:	6879      	ldr	r1, [r7, #4]
 80011f8:	2036      	movs	r0, #54	; 0x36
 80011fa:	f000 fa53 	bl	80016a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011fe:	4a0a      	ldr	r2, [pc, #40]	; (8001228 <HAL_InitTick+0xf4>)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6013      	str	r3, [r2, #0]
 8001204:	e002      	b.n	800120c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800120c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001210:	4618      	mov	r0, r3
 8001212:	3738      	adds	r7, #56	; 0x38
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40023800 	.word	0x40023800
 800121c:	431bde83 	.word	0x431bde83
 8001220:	20000538 	.word	0x20000538
 8001224:	40001000 	.word	0x40001000
 8001228:	20000004 	.word	0x20000004

0800122c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001230:	e7fe      	b.n	8001230 <NMI_Handler+0x4>

08001232 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001236:	e7fe      	b.n	8001236 <HardFault_Handler+0x4>

08001238 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800123c:	e7fe      	b.n	800123c <MemManage_Handler+0x4>

0800123e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001242:	e7fe      	b.n	8001242 <BusFault_Handler+0x4>

08001244 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001248:	e7fe      	b.n	8001248 <UsageFault_Handler+0x4>

0800124a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800125c:	4802      	ldr	r0, [pc, #8]	; (8001268 <TIM6_DAC_IRQHandler+0x10>)
 800125e:	f003 fedd 	bl	800501c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000538 	.word	0x20000538

0800126c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001270:	4802      	ldr	r0, [pc, #8]	; (800127c <OTG_HS_IRQHandler+0x10>)
 8001272:	f001 f82d 	bl	80022d0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20010ac4 	.word	0x20010ac4

08001280 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001284:	4802      	ldr	r0, [pc, #8]	; (8001290 <LTDC_IRQHandler+0x10>)
 8001286:	f002 f9c3 	bl	8003610 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200003f8 	.word	0x200003f8

08001294 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001298:	4802      	ldr	r0, [pc, #8]	; (80012a4 <DMA2D_IRQHandler+0x10>)
 800129a:	f000 fabf 	bl	800181c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	200003b8 	.word	0x200003b8

080012a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
 80012b8:	e00a      	b.n	80012d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012ba:	f3af 8000 	nop.w
 80012be:	4601      	mov	r1, r0
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	1c5a      	adds	r2, r3, #1
 80012c4:	60ba      	str	r2, [r7, #8]
 80012c6:	b2ca      	uxtb	r2, r1
 80012c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	3301      	adds	r3, #1
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	697a      	ldr	r2, [r7, #20]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	dbf0      	blt.n	80012ba <_read+0x12>
  }

  return len;
 80012d8:	687b      	ldr	r3, [r7, #4]
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b086      	sub	sp, #24
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	60f8      	str	r0, [r7, #12]
 80012ea:	60b9      	str	r1, [r7, #8]
 80012ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	e009      	b.n	8001308 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	1c5a      	adds	r2, r3, #1
 80012f8:	60ba      	str	r2, [r7, #8]
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff fb3d 	bl	800097c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	3301      	adds	r3, #1
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	697a      	ldr	r2, [r7, #20]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	429a      	cmp	r2, r3
 800130e:	dbf1      	blt.n	80012f4 <_write+0x12>
  }
  return len;
 8001310:	687b      	ldr	r3, [r7, #4]
}
 8001312:	4618      	mov	r0, r3
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <_close>:

int _close(int file)
{
 800131a:	b480      	push	{r7}
 800131c:	b083      	sub	sp, #12
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001322:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
 800133a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001342:	605a      	str	r2, [r3, #4]
  return 0;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <_isatty>:

int _isatty(int file)
{
 8001352:	b480      	push	{r7}
 8001354:	b083      	sub	sp, #12
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800135a:	2301      	movs	r3, #1
}
 800135c:	4618      	mov	r0, r3
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
	...

08001384 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800138c:	4a14      	ldr	r2, [pc, #80]	; (80013e0 <_sbrk+0x5c>)
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <_sbrk+0x60>)
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001398:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <_sbrk+0x64>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d102      	bne.n	80013a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <_sbrk+0x64>)
 80013a2:	4a12      	ldr	r2, [pc, #72]	; (80013ec <_sbrk+0x68>)
 80013a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013a6:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <_sbrk+0x64>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4413      	add	r3, r2
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d207      	bcs.n	80013c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013b4:	f00c f816 	bl	800d3e4 <__errno>
 80013b8:	4603      	mov	r3, r0
 80013ba:	220c      	movs	r2, #12
 80013bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013c2:	e009      	b.n	80013d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <_sbrk+0x64>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ca:	4b07      	ldr	r3, [pc, #28]	; (80013e8 <_sbrk+0x64>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	4a05      	ldr	r2, [pc, #20]	; (80013e8 <_sbrk+0x64>)
 80013d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013d6:	68fb      	ldr	r3, [r7, #12]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3718      	adds	r7, #24
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20030000 	.word	0x20030000
 80013e4:	00000400 	.word	0x00000400
 80013e8:	20000580 	.word	0x20000580
 80013ec:	20010f18 	.word	0x20010f18

080013f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <SystemInit+0x20>)
 80013f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013fa:	4a05      	ldr	r2, [pc, #20]	; (8001410 <SystemInit+0x20>)
 80013fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001400:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001414:	f8df d034 	ldr.w	sp, [pc, #52]	; 800144c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001418:	480d      	ldr	r0, [pc, #52]	; (8001450 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800141a:	490e      	ldr	r1, [pc, #56]	; (8001454 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800141c:	4a0e      	ldr	r2, [pc, #56]	; (8001458 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800141e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001420:	e002      	b.n	8001428 <LoopCopyDataInit>

08001422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001426:	3304      	adds	r3, #4

08001428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800142a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800142c:	d3f9      	bcc.n	8001422 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800142e:	4a0b      	ldr	r2, [pc, #44]	; (800145c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001430:	4c0b      	ldr	r4, [pc, #44]	; (8001460 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001434:	e001      	b.n	800143a <LoopFillZerobss>

08001436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001438:	3204      	adds	r2, #4

0800143a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800143a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800143c:	d3fb      	bcc.n	8001436 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800143e:	f7ff ffd7 	bl	80013f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001442:	f00b ffd5 	bl	800d3f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001446:	f7ff fad5 	bl	80009f4 <main>
  bx  lr    
 800144a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800144c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001454:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001458:	0800de80 	.word	0x0800de80
  ldr r2, =_sbss
 800145c:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001460:	20010f14 	.word	0x20010f14

08001464 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001464:	e7fe      	b.n	8001464 <ADC_IRQHandler>
	...

08001468 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800146c:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <HAL_Init+0x40>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a0d      	ldr	r2, [pc, #52]	; (80014a8 <HAL_Init+0x40>)
 8001472:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001476:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001478:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <HAL_Init+0x40>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a0a      	ldr	r2, [pc, #40]	; (80014a8 <HAL_Init+0x40>)
 800147e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001482:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001484:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <HAL_Init+0x40>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a07      	ldr	r2, [pc, #28]	; (80014a8 <HAL_Init+0x40>)
 800148a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800148e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001490:	2003      	movs	r0, #3
 8001492:	f000 f8fc 	bl	800168e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001496:	2000      	movs	r0, #0
 8001498:	f7ff fe4c 	bl	8001134 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800149c:	f7ff fd6c 	bl	8000f78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40023c00 	.word	0x40023c00

080014ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <HAL_IncTick+0x20>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_IncTick+0x24>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4413      	add	r3, r2
 80014bc:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <HAL_IncTick+0x24>)
 80014be:	6013      	str	r3, [r2, #0]
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	20000008 	.word	0x20000008
 80014d0:	20000584 	.word	0x20000584

080014d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  return uwTick;
 80014d8:	4b03      	ldr	r3, [pc, #12]	; (80014e8 <HAL_GetTick+0x14>)
 80014da:	681b      	ldr	r3, [r3, #0]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	20000584 	.word	0x20000584

080014ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014f4:	f7ff ffee 	bl	80014d4 <HAL_GetTick>
 80014f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001504:	d005      	beq.n	8001512 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001506:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <HAL_Delay+0x44>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	461a      	mov	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	4413      	add	r3, r2
 8001510:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001512:	bf00      	nop
 8001514:	f7ff ffde 	bl	80014d4 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	429a      	cmp	r2, r3
 8001522:	d8f7      	bhi.n	8001514 <HAL_Delay+0x28>
  {
  }
}
 8001524:	bf00      	nop
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000008 	.word	0x20000008

08001534 <__NVIC_SetPriorityGrouping>:
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001544:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <__NVIC_SetPriorityGrouping+0x44>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800154a:	68ba      	ldr	r2, [r7, #8]
 800154c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001550:	4013      	ands	r3, r2
 8001552:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800155c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001566:	4a04      	ldr	r2, [pc, #16]	; (8001578 <__NVIC_SetPriorityGrouping+0x44>)
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	60d3      	str	r3, [r2, #12]
}
 800156c:	bf00      	nop
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <__NVIC_GetPriorityGrouping>:
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001580:	4b04      	ldr	r3, [pc, #16]	; (8001594 <__NVIC_GetPriorityGrouping+0x18>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	0a1b      	lsrs	r3, r3, #8
 8001586:	f003 0307 	and.w	r3, r3, #7
}
 800158a:	4618      	mov	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <__NVIC_EnableIRQ>:
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	db0b      	blt.n	80015c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	f003 021f 	and.w	r2, r3, #31
 80015b0:	4907      	ldr	r1, [pc, #28]	; (80015d0 <__NVIC_EnableIRQ+0x38>)
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	095b      	lsrs	r3, r3, #5
 80015b8:	2001      	movs	r0, #1
 80015ba:	fa00 f202 	lsl.w	r2, r0, r2
 80015be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	e000e100 	.word	0xe000e100

080015d4 <__NVIC_SetPriority>:
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	6039      	str	r1, [r7, #0]
 80015de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	db0a      	blt.n	80015fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	490c      	ldr	r1, [pc, #48]	; (8001620 <__NVIC_SetPriority+0x4c>)
 80015ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f2:	0112      	lsls	r2, r2, #4
 80015f4:	b2d2      	uxtb	r2, r2
 80015f6:	440b      	add	r3, r1
 80015f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80015fc:	e00a      	b.n	8001614 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	b2da      	uxtb	r2, r3
 8001602:	4908      	ldr	r1, [pc, #32]	; (8001624 <__NVIC_SetPriority+0x50>)
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	f003 030f 	and.w	r3, r3, #15
 800160a:	3b04      	subs	r3, #4
 800160c:	0112      	lsls	r2, r2, #4
 800160e:	b2d2      	uxtb	r2, r2
 8001610:	440b      	add	r3, r1
 8001612:	761a      	strb	r2, [r3, #24]
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000e100 	.word	0xe000e100
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001628:	b480      	push	{r7}
 800162a:	b089      	sub	sp, #36	; 0x24
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	f1c3 0307 	rsb	r3, r3, #7
 8001642:	2b04      	cmp	r3, #4
 8001644:	bf28      	it	cs
 8001646:	2304      	movcs	r3, #4
 8001648:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	3304      	adds	r3, #4
 800164e:	2b06      	cmp	r3, #6
 8001650:	d902      	bls.n	8001658 <NVIC_EncodePriority+0x30>
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3b03      	subs	r3, #3
 8001656:	e000      	b.n	800165a <NVIC_EncodePriority+0x32>
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800165c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43da      	mvns	r2, r3
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	401a      	ands	r2, r3
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001670:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	fa01 f303 	lsl.w	r3, r1, r3
 800167a:	43d9      	mvns	r1, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001680:	4313      	orrs	r3, r2
         );
}
 8001682:	4618      	mov	r0, r3
 8001684:	3724      	adds	r7, #36	; 0x24
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff ff4c 	bl	8001534 <__NVIC_SetPriorityGrouping>
}
 800169c:	bf00      	nop
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
 80016b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016b6:	f7ff ff61 	bl	800157c <__NVIC_GetPriorityGrouping>
 80016ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	68b9      	ldr	r1, [r7, #8]
 80016c0:	6978      	ldr	r0, [r7, #20]
 80016c2:	f7ff ffb1 	bl	8001628 <NVIC_EncodePriority>
 80016c6:	4602      	mov	r2, r0
 80016c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016cc:	4611      	mov	r1, r2
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff ff80 	bl	80015d4 <__NVIC_SetPriority>
}
 80016d4:	bf00      	nop
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff ff54 	bl	8001598 <__NVIC_EnableIRQ>
}
 80016f0:	bf00      	nop
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001704:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001706:	f7ff fee5 	bl	80014d4 <HAL_GetTick>
 800170a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001712:	b2db      	uxtb	r3, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d008      	beq.n	800172a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2280      	movs	r2, #128	; 0x80
 800171c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e052      	b.n	80017d0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 0216 	bic.w	r2, r2, #22
 8001738:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	695a      	ldr	r2, [r3, #20]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001748:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	2b00      	cmp	r3, #0
 8001750:	d103      	bne.n	800175a <HAL_DMA_Abort+0x62>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001756:	2b00      	cmp	r3, #0
 8001758:	d007      	beq.n	800176a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 0208 	bic.w	r2, r2, #8
 8001768:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 0201 	bic.w	r2, r2, #1
 8001778:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800177a:	e013      	b.n	80017a4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800177c:	f7ff feaa 	bl	80014d4 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b05      	cmp	r3, #5
 8001788:	d90c      	bls.n	80017a4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2220      	movs	r2, #32
 800178e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2203      	movs	r2, #3
 8001794:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e015      	b.n	80017d0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1e4      	bne.n	800177c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b6:	223f      	movs	r2, #63	; 0x3f
 80017b8:	409a      	lsls	r2, r3
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2201      	movs	r2, #1
 80017c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d004      	beq.n	80017f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2280      	movs	r2, #128	; 0x80
 80017f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e00c      	b.n	8001810 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2205      	movs	r2, #5
 80017fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f022 0201 	bic.w	r2, r2, #1
 800180c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b00      	cmp	r3, #0
 800183c:	d026      	beq.n	800188c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001844:	2b00      	cmp	r3, #0
 8001846:	d021      	beq.n	800188c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001856:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800185c:	f043 0201 	orr.w	r2, r3, #1
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2201      	movs	r2, #1
 800186a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2204      	movs	r2, #4
 8001870:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	695b      	ldr	r3, [r3, #20]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d003      	beq.n	800188c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	695b      	ldr	r3, [r3, #20]
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f003 0320 	and.w	r3, r3, #32
 8001892:	2b00      	cmp	r3, #0
 8001894:	d026      	beq.n	80018e4 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d021      	beq.n	80018e4 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80018ae:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2220      	movs	r2, #32
 80018b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018bc:	f043 0202 	orr.w	r2, r3, #2
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2204      	movs	r2, #4
 80018c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d003      	beq.n	80018e4 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	695b      	ldr	r3, [r3, #20]
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f003 0308 	and.w	r3, r3, #8
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d026      	beq.n	800193c <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d021      	beq.n	800193c <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001906:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2208      	movs	r2, #8
 800190e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001914:	f043 0204 	orr.w	r2, r3, #4
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2204      	movs	r2, #4
 8001920:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d003      	beq.n	800193c <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	695b      	ldr	r3, [r3, #20]
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f003 0304 	and.w	r3, r3, #4
 8001942:	2b00      	cmp	r3, #0
 8001944:	d013      	beq.n	800196e <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800194c:	2b00      	cmp	r3, #0
 800194e:	d00e      	beq.n	800196e <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800195e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2204      	movs	r2, #4
 8001966:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 f853 	bl	8001a14 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d024      	beq.n	80019c2 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800197e:	2b00      	cmp	r3, #0
 8001980:	d01f      	beq.n	80019c2 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001990:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2202      	movs	r2, #2
 8001998:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2201      	movs	r2, #1
 80019a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	f003 0310 	and.w	r3, r3, #16
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d01f      	beq.n	8001a0c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d01a      	beq.n	8001a0c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80019e4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2210      	movs	r2, #16
 80019ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2201      	movs	r2, #1
 80019fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 f80e 	bl	8001a28 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001a0c:	bf00      	nop
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b089      	sub	sp, #36	; 0x24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a52:	2300      	movs	r3, #0
 8001a54:	61fb      	str	r3, [r7, #28]
 8001a56:	e177      	b.n	8001d48 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a58:	2201      	movs	r2, #1
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	f040 8166 	bne.w	8001d42 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d005      	beq.n	8001a8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d130      	bne.n	8001af0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	2203      	movs	r2, #3
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	68da      	ldr	r2, [r3, #12]
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	091b      	lsrs	r3, r3, #4
 8001ada:	f003 0201 	and.w	r2, r3, #1
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 0303 	and.w	r3, r3, #3
 8001af8:	2b03      	cmp	r3, #3
 8001afa:	d017      	beq.n	8001b2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	2203      	movs	r2, #3
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d123      	bne.n	8001b80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	08da      	lsrs	r2, r3, #3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3208      	adds	r2, #8
 8001b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	220f      	movs	r2, #15
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	691a      	ldr	r2, [r3, #16]
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	08da      	lsrs	r2, r3, #3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3208      	adds	r2, #8
 8001b7a:	69b9      	ldr	r1, [r7, #24]
 8001b7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 0203 	and.w	r2, r3, #3
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f000 80c0 	beq.w	8001d42 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	4b66      	ldr	r3, [pc, #408]	; (8001d60 <HAL_GPIO_Init+0x324>)
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bca:	4a65      	ldr	r2, [pc, #404]	; (8001d60 <HAL_GPIO_Init+0x324>)
 8001bcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bd2:	4b63      	ldr	r3, [pc, #396]	; (8001d60 <HAL_GPIO_Init+0x324>)
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bde:	4a61      	ldr	r2, [pc, #388]	; (8001d64 <HAL_GPIO_Init+0x328>)
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	089b      	lsrs	r3, r3, #2
 8001be4:	3302      	adds	r3, #2
 8001be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f003 0303 	and.w	r3, r3, #3
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	220f      	movs	r2, #15
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a58      	ldr	r2, [pc, #352]	; (8001d68 <HAL_GPIO_Init+0x32c>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d037      	beq.n	8001c7a <HAL_GPIO_Init+0x23e>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a57      	ldr	r2, [pc, #348]	; (8001d6c <HAL_GPIO_Init+0x330>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d031      	beq.n	8001c76 <HAL_GPIO_Init+0x23a>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a56      	ldr	r2, [pc, #344]	; (8001d70 <HAL_GPIO_Init+0x334>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d02b      	beq.n	8001c72 <HAL_GPIO_Init+0x236>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a55      	ldr	r2, [pc, #340]	; (8001d74 <HAL_GPIO_Init+0x338>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d025      	beq.n	8001c6e <HAL_GPIO_Init+0x232>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a54      	ldr	r2, [pc, #336]	; (8001d78 <HAL_GPIO_Init+0x33c>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d01f      	beq.n	8001c6a <HAL_GPIO_Init+0x22e>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a53      	ldr	r2, [pc, #332]	; (8001d7c <HAL_GPIO_Init+0x340>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d019      	beq.n	8001c66 <HAL_GPIO_Init+0x22a>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a52      	ldr	r2, [pc, #328]	; (8001d80 <HAL_GPIO_Init+0x344>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d013      	beq.n	8001c62 <HAL_GPIO_Init+0x226>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a51      	ldr	r2, [pc, #324]	; (8001d84 <HAL_GPIO_Init+0x348>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d00d      	beq.n	8001c5e <HAL_GPIO_Init+0x222>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a50      	ldr	r2, [pc, #320]	; (8001d88 <HAL_GPIO_Init+0x34c>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d007      	beq.n	8001c5a <HAL_GPIO_Init+0x21e>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a4f      	ldr	r2, [pc, #316]	; (8001d8c <HAL_GPIO_Init+0x350>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d101      	bne.n	8001c56 <HAL_GPIO_Init+0x21a>
 8001c52:	2309      	movs	r3, #9
 8001c54:	e012      	b.n	8001c7c <HAL_GPIO_Init+0x240>
 8001c56:	230a      	movs	r3, #10
 8001c58:	e010      	b.n	8001c7c <HAL_GPIO_Init+0x240>
 8001c5a:	2308      	movs	r3, #8
 8001c5c:	e00e      	b.n	8001c7c <HAL_GPIO_Init+0x240>
 8001c5e:	2307      	movs	r3, #7
 8001c60:	e00c      	b.n	8001c7c <HAL_GPIO_Init+0x240>
 8001c62:	2306      	movs	r3, #6
 8001c64:	e00a      	b.n	8001c7c <HAL_GPIO_Init+0x240>
 8001c66:	2305      	movs	r3, #5
 8001c68:	e008      	b.n	8001c7c <HAL_GPIO_Init+0x240>
 8001c6a:	2304      	movs	r3, #4
 8001c6c:	e006      	b.n	8001c7c <HAL_GPIO_Init+0x240>
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e004      	b.n	8001c7c <HAL_GPIO_Init+0x240>
 8001c72:	2302      	movs	r3, #2
 8001c74:	e002      	b.n	8001c7c <HAL_GPIO_Init+0x240>
 8001c76:	2301      	movs	r3, #1
 8001c78:	e000      	b.n	8001c7c <HAL_GPIO_Init+0x240>
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	69fa      	ldr	r2, [r7, #28]
 8001c7e:	f002 0203 	and.w	r2, r2, #3
 8001c82:	0092      	lsls	r2, r2, #2
 8001c84:	4093      	lsls	r3, r2
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c8c:	4935      	ldr	r1, [pc, #212]	; (8001d64 <HAL_GPIO_Init+0x328>)
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	089b      	lsrs	r3, r3, #2
 8001c92:	3302      	adds	r3, #2
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c9a:	4b3d      	ldr	r3, [pc, #244]	; (8001d90 <HAL_GPIO_Init+0x354>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cbe:	4a34      	ldr	r2, [pc, #208]	; (8001d90 <HAL_GPIO_Init+0x354>)
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cc4:	4b32      	ldr	r3, [pc, #200]	; (8001d90 <HAL_GPIO_Init+0x354>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ce8:	4a29      	ldr	r2, [pc, #164]	; (8001d90 <HAL_GPIO_Init+0x354>)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cee:	4b28      	ldr	r3, [pc, #160]	; (8001d90 <HAL_GPIO_Init+0x354>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d12:	4a1f      	ldr	r2, [pc, #124]	; (8001d90 <HAL_GPIO_Init+0x354>)
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d18:	4b1d      	ldr	r3, [pc, #116]	; (8001d90 <HAL_GPIO_Init+0x354>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	43db      	mvns	r3, r3
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4013      	ands	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d3c:	4a14      	ldr	r2, [pc, #80]	; (8001d90 <HAL_GPIO_Init+0x354>)
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3301      	adds	r3, #1
 8001d46:	61fb      	str	r3, [r7, #28]
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	2b0f      	cmp	r3, #15
 8001d4c:	f67f ae84 	bls.w	8001a58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d50:	bf00      	nop
 8001d52:	bf00      	nop
 8001d54:	3724      	adds	r7, #36	; 0x24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40013800 	.word	0x40013800
 8001d68:	40020000 	.word	0x40020000
 8001d6c:	40020400 	.word	0x40020400
 8001d70:	40020800 	.word	0x40020800
 8001d74:	40020c00 	.word	0x40020c00
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40021400 	.word	0x40021400
 8001d80:	40021800 	.word	0x40021800
 8001d84:	40021c00 	.word	0x40021c00
 8001d88:	40022000 	.word	0x40022000
 8001d8c:	40022400 	.word	0x40022400
 8001d90:	40013c00 	.word	0x40013c00

08001d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	807b      	strh	r3, [r7, #2]
 8001da0:	4613      	mov	r3, r2
 8001da2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001da4:	787b      	ldrb	r3, [r7, #1]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001daa:	887a      	ldrh	r2, [r7, #2]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001db0:	e003      	b.n	8001dba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001db2:	887b      	ldrh	r3, [r7, #2]
 8001db4:	041a      	lsls	r2, r3, #16
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	619a      	str	r2, [r3, #24]
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b085      	sub	sp, #20
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	460b      	mov	r3, r1
 8001dd0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dd8:	887a      	ldrh	r2, [r7, #2]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	041a      	lsls	r2, r3, #16
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	43d9      	mvns	r1, r3
 8001de4:	887b      	ldrh	r3, [r7, #2]
 8001de6:	400b      	ands	r3, r1
 8001de8:	431a      	orrs	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	619a      	str	r2, [r3, #24]
}
 8001dee:	bf00      	nop
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001dfa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dfc:	b08f      	sub	sp, #60	; 0x3c
 8001dfe:	af0a      	add	r7, sp, #40	; 0x28
 8001e00:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e054      	b.n	8001eb6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d106      	bne.n	8001e2c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f00a fcb0 	bl	800c78c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2203      	movs	r2, #3
 8001e30:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d102      	bne.n	8001e46 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f004 fd2e 	bl	80068ac <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	603b      	str	r3, [r7, #0]
 8001e56:	687e      	ldr	r6, [r7, #4]
 8001e58:	466d      	mov	r5, sp
 8001e5a:	f106 0410 	add.w	r4, r6, #16
 8001e5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e66:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e6a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e6e:	1d33      	adds	r3, r6, #4
 8001e70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e72:	6838      	ldr	r0, [r7, #0]
 8001e74:	f004 fca8 	bl	80067c8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f004 fd25 	bl	80068ce <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	603b      	str	r3, [r7, #0]
 8001e8a:	687e      	ldr	r6, [r7, #4]
 8001e8c:	466d      	mov	r5, sp
 8001e8e:	f106 0410 	add.w	r4, r6, #16
 8001e92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e9a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e9e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ea2:	1d33      	adds	r3, r6, #4
 8001ea4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ea6:	6838      	ldr	r0, [r7, #0]
 8001ea8:	f004 feae 	bl	8006c08 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3714      	adds	r7, #20
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ebe <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001ebe:	b590      	push	{r4, r7, lr}
 8001ec0:	b089      	sub	sp, #36	; 0x24
 8001ec2:	af04      	add	r7, sp, #16
 8001ec4:	6078      	str	r0, [r7, #4]
 8001ec6:	4608      	mov	r0, r1
 8001ec8:	4611      	mov	r1, r2
 8001eca:	461a      	mov	r2, r3
 8001ecc:	4603      	mov	r3, r0
 8001ece:	70fb      	strb	r3, [r7, #3]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	70bb      	strb	r3, [r7, #2]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d101      	bne.n	8001ee6 <HAL_HCD_HC_Init+0x28>
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	e076      	b.n	8001fd4 <HAL_HCD_HC_Init+0x116>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001eee:	78fb      	ldrb	r3, [r7, #3]
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	212c      	movs	r1, #44	; 0x2c
 8001ef4:	fb01 f303 	mul.w	r3, r1, r3
 8001ef8:	4413      	add	r3, r2
 8001efa:	333d      	adds	r3, #61	; 0x3d
 8001efc:	2200      	movs	r2, #0
 8001efe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001f00:	78fb      	ldrb	r3, [r7, #3]
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	212c      	movs	r1, #44	; 0x2c
 8001f06:	fb01 f303 	mul.w	r3, r1, r3
 8001f0a:	4413      	add	r3, r2
 8001f0c:	3338      	adds	r3, #56	; 0x38
 8001f0e:	787a      	ldrb	r2, [r7, #1]
 8001f10:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001f12:	78fb      	ldrb	r3, [r7, #3]
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	212c      	movs	r1, #44	; 0x2c
 8001f18:	fb01 f303 	mul.w	r3, r1, r3
 8001f1c:	4413      	add	r3, r2
 8001f1e:	3340      	adds	r3, #64	; 0x40
 8001f20:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001f22:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001f24:	78fb      	ldrb	r3, [r7, #3]
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	212c      	movs	r1, #44	; 0x2c
 8001f2a:	fb01 f303 	mul.w	r3, r1, r3
 8001f2e:	4413      	add	r3, r2
 8001f30:	3339      	adds	r3, #57	; 0x39
 8001f32:	78fa      	ldrb	r2, [r7, #3]
 8001f34:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001f36:	78fb      	ldrb	r3, [r7, #3]
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	212c      	movs	r1, #44	; 0x2c
 8001f3c:	fb01 f303 	mul.w	r3, r1, r3
 8001f40:	4413      	add	r3, r2
 8001f42:	333f      	adds	r3, #63	; 0x3f
 8001f44:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001f48:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001f4a:	78fb      	ldrb	r3, [r7, #3]
 8001f4c:	78ba      	ldrb	r2, [r7, #2]
 8001f4e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f52:	b2d0      	uxtb	r0, r2
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	212c      	movs	r1, #44	; 0x2c
 8001f58:	fb01 f303 	mul.w	r3, r1, r3
 8001f5c:	4413      	add	r3, r2
 8001f5e:	333a      	adds	r3, #58	; 0x3a
 8001f60:	4602      	mov	r2, r0
 8001f62:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001f64:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	da09      	bge.n	8001f80 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001f6c:	78fb      	ldrb	r3, [r7, #3]
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	212c      	movs	r1, #44	; 0x2c
 8001f72:	fb01 f303 	mul.w	r3, r1, r3
 8001f76:	4413      	add	r3, r2
 8001f78:	333b      	adds	r3, #59	; 0x3b
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	701a      	strb	r2, [r3, #0]
 8001f7e:	e008      	b.n	8001f92 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001f80:	78fb      	ldrb	r3, [r7, #3]
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	212c      	movs	r1, #44	; 0x2c
 8001f86:	fb01 f303 	mul.w	r3, r1, r3
 8001f8a:	4413      	add	r3, r2
 8001f8c:	333b      	adds	r3, #59	; 0x3b
 8001f8e:	2200      	movs	r2, #0
 8001f90:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001f92:	78fb      	ldrb	r3, [r7, #3]
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	212c      	movs	r1, #44	; 0x2c
 8001f98:	fb01 f303 	mul.w	r3, r1, r3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	333c      	adds	r3, #60	; 0x3c
 8001fa0:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001fa4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6818      	ldr	r0, [r3, #0]
 8001faa:	787c      	ldrb	r4, [r7, #1]
 8001fac:	78ba      	ldrb	r2, [r7, #2]
 8001fae:	78f9      	ldrb	r1, [r7, #3]
 8001fb0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001fb2:	9302      	str	r3, [sp, #8]
 8001fb4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001fb8:	9301      	str	r3, [sp, #4]
 8001fba:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	4623      	mov	r3, r4
 8001fc2:	f004 ffa7 	bl	8006f14 <USB_HC_Init>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd90      	pop	{r4, r7, pc}

08001fdc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d101      	bne.n	8001ffa <HAL_HCD_HC_Halt+0x1e>
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	e00f      	b.n	800201a <HAL_HCD_HC_Halt+0x3e>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	78fa      	ldrb	r2, [r7, #3]
 8002008:	4611      	mov	r1, r2
 800200a:	4618      	mov	r0, r3
 800200c:	f005 f9f7 	bl	80073fe <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002018:	7bfb      	ldrb	r3, [r7, #15]
}
 800201a:	4618      	mov	r0, r3
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
	...

08002024 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	4608      	mov	r0, r1
 800202e:	4611      	mov	r1, r2
 8002030:	461a      	mov	r2, r3
 8002032:	4603      	mov	r3, r0
 8002034:	70fb      	strb	r3, [r7, #3]
 8002036:	460b      	mov	r3, r1
 8002038:	70bb      	strb	r3, [r7, #2]
 800203a:	4613      	mov	r3, r2
 800203c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800203e:	78fb      	ldrb	r3, [r7, #3]
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	212c      	movs	r1, #44	; 0x2c
 8002044:	fb01 f303 	mul.w	r3, r1, r3
 8002048:	4413      	add	r3, r2
 800204a:	333b      	adds	r3, #59	; 0x3b
 800204c:	78ba      	ldrb	r2, [r7, #2]
 800204e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002050:	78fb      	ldrb	r3, [r7, #3]
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	212c      	movs	r1, #44	; 0x2c
 8002056:	fb01 f303 	mul.w	r3, r1, r3
 800205a:	4413      	add	r3, r2
 800205c:	333f      	adds	r3, #63	; 0x3f
 800205e:	787a      	ldrb	r2, [r7, #1]
 8002060:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002062:	7c3b      	ldrb	r3, [r7, #16]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d112      	bne.n	800208e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002068:	78fb      	ldrb	r3, [r7, #3]
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	212c      	movs	r1, #44	; 0x2c
 800206e:	fb01 f303 	mul.w	r3, r1, r3
 8002072:	4413      	add	r3, r2
 8002074:	3342      	adds	r3, #66	; 0x42
 8002076:	2203      	movs	r2, #3
 8002078:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800207a:	78fb      	ldrb	r3, [r7, #3]
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	212c      	movs	r1, #44	; 0x2c
 8002080:	fb01 f303 	mul.w	r3, r1, r3
 8002084:	4413      	add	r3, r2
 8002086:	333d      	adds	r3, #61	; 0x3d
 8002088:	7f3a      	ldrb	r2, [r7, #28]
 800208a:	701a      	strb	r2, [r3, #0]
 800208c:	e008      	b.n	80020a0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800208e:	78fb      	ldrb	r3, [r7, #3]
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	212c      	movs	r1, #44	; 0x2c
 8002094:	fb01 f303 	mul.w	r3, r1, r3
 8002098:	4413      	add	r3, r2
 800209a:	3342      	adds	r3, #66	; 0x42
 800209c:	2202      	movs	r2, #2
 800209e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80020a0:	787b      	ldrb	r3, [r7, #1]
 80020a2:	2b03      	cmp	r3, #3
 80020a4:	f200 80c6 	bhi.w	8002234 <HAL_HCD_HC_SubmitRequest+0x210>
 80020a8:	a201      	add	r2, pc, #4	; (adr r2, 80020b0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80020aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ae:	bf00      	nop
 80020b0:	080020c1 	.word	0x080020c1
 80020b4:	08002221 	.word	0x08002221
 80020b8:	08002125 	.word	0x08002125
 80020bc:	080021a3 	.word	0x080021a3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80020c0:	7c3b      	ldrb	r3, [r7, #16]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	f040 80b8 	bne.w	8002238 <HAL_HCD_HC_SubmitRequest+0x214>
 80020c8:	78bb      	ldrb	r3, [r7, #2]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f040 80b4 	bne.w	8002238 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80020d0:	8b3b      	ldrh	r3, [r7, #24]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d108      	bne.n	80020e8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80020d6:	78fb      	ldrb	r3, [r7, #3]
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	212c      	movs	r1, #44	; 0x2c
 80020dc:	fb01 f303 	mul.w	r3, r1, r3
 80020e0:	4413      	add	r3, r2
 80020e2:	3355      	adds	r3, #85	; 0x55
 80020e4:	2201      	movs	r2, #1
 80020e6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80020e8:	78fb      	ldrb	r3, [r7, #3]
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	212c      	movs	r1, #44	; 0x2c
 80020ee:	fb01 f303 	mul.w	r3, r1, r3
 80020f2:	4413      	add	r3, r2
 80020f4:	3355      	adds	r3, #85	; 0x55
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d109      	bne.n	8002110 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020fc:	78fb      	ldrb	r3, [r7, #3]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	212c      	movs	r1, #44	; 0x2c
 8002102:	fb01 f303 	mul.w	r3, r1, r3
 8002106:	4413      	add	r3, r2
 8002108:	3342      	adds	r3, #66	; 0x42
 800210a:	2200      	movs	r2, #0
 800210c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800210e:	e093      	b.n	8002238 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002110:	78fb      	ldrb	r3, [r7, #3]
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	212c      	movs	r1, #44	; 0x2c
 8002116:	fb01 f303 	mul.w	r3, r1, r3
 800211a:	4413      	add	r3, r2
 800211c:	3342      	adds	r3, #66	; 0x42
 800211e:	2202      	movs	r2, #2
 8002120:	701a      	strb	r2, [r3, #0]
      break;
 8002122:	e089      	b.n	8002238 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002124:	78bb      	ldrb	r3, [r7, #2]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d11d      	bne.n	8002166 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800212a:	78fb      	ldrb	r3, [r7, #3]
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	212c      	movs	r1, #44	; 0x2c
 8002130:	fb01 f303 	mul.w	r3, r1, r3
 8002134:	4413      	add	r3, r2
 8002136:	3355      	adds	r3, #85	; 0x55
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d109      	bne.n	8002152 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800213e:	78fb      	ldrb	r3, [r7, #3]
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	212c      	movs	r1, #44	; 0x2c
 8002144:	fb01 f303 	mul.w	r3, r1, r3
 8002148:	4413      	add	r3, r2
 800214a:	3342      	adds	r3, #66	; 0x42
 800214c:	2200      	movs	r2, #0
 800214e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002150:	e073      	b.n	800223a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002152:	78fb      	ldrb	r3, [r7, #3]
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	212c      	movs	r1, #44	; 0x2c
 8002158:	fb01 f303 	mul.w	r3, r1, r3
 800215c:	4413      	add	r3, r2
 800215e:	3342      	adds	r3, #66	; 0x42
 8002160:	2202      	movs	r2, #2
 8002162:	701a      	strb	r2, [r3, #0]
      break;
 8002164:	e069      	b.n	800223a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002166:	78fb      	ldrb	r3, [r7, #3]
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	212c      	movs	r1, #44	; 0x2c
 800216c:	fb01 f303 	mul.w	r3, r1, r3
 8002170:	4413      	add	r3, r2
 8002172:	3354      	adds	r3, #84	; 0x54
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d109      	bne.n	800218e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800217a:	78fb      	ldrb	r3, [r7, #3]
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	212c      	movs	r1, #44	; 0x2c
 8002180:	fb01 f303 	mul.w	r3, r1, r3
 8002184:	4413      	add	r3, r2
 8002186:	3342      	adds	r3, #66	; 0x42
 8002188:	2200      	movs	r2, #0
 800218a:	701a      	strb	r2, [r3, #0]
      break;
 800218c:	e055      	b.n	800223a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800218e:	78fb      	ldrb	r3, [r7, #3]
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	212c      	movs	r1, #44	; 0x2c
 8002194:	fb01 f303 	mul.w	r3, r1, r3
 8002198:	4413      	add	r3, r2
 800219a:	3342      	adds	r3, #66	; 0x42
 800219c:	2202      	movs	r2, #2
 800219e:	701a      	strb	r2, [r3, #0]
      break;
 80021a0:	e04b      	b.n	800223a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80021a2:	78bb      	ldrb	r3, [r7, #2]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d11d      	bne.n	80021e4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80021a8:	78fb      	ldrb	r3, [r7, #3]
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	212c      	movs	r1, #44	; 0x2c
 80021ae:	fb01 f303 	mul.w	r3, r1, r3
 80021b2:	4413      	add	r3, r2
 80021b4:	3355      	adds	r3, #85	; 0x55
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d109      	bne.n	80021d0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	212c      	movs	r1, #44	; 0x2c
 80021c2:	fb01 f303 	mul.w	r3, r1, r3
 80021c6:	4413      	add	r3, r2
 80021c8:	3342      	adds	r3, #66	; 0x42
 80021ca:	2200      	movs	r2, #0
 80021cc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80021ce:	e034      	b.n	800223a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021d0:	78fb      	ldrb	r3, [r7, #3]
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	212c      	movs	r1, #44	; 0x2c
 80021d6:	fb01 f303 	mul.w	r3, r1, r3
 80021da:	4413      	add	r3, r2
 80021dc:	3342      	adds	r3, #66	; 0x42
 80021de:	2202      	movs	r2, #2
 80021e0:	701a      	strb	r2, [r3, #0]
      break;
 80021e2:	e02a      	b.n	800223a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80021e4:	78fb      	ldrb	r3, [r7, #3]
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	212c      	movs	r1, #44	; 0x2c
 80021ea:	fb01 f303 	mul.w	r3, r1, r3
 80021ee:	4413      	add	r3, r2
 80021f0:	3354      	adds	r3, #84	; 0x54
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d109      	bne.n	800220c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021f8:	78fb      	ldrb	r3, [r7, #3]
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	212c      	movs	r1, #44	; 0x2c
 80021fe:	fb01 f303 	mul.w	r3, r1, r3
 8002202:	4413      	add	r3, r2
 8002204:	3342      	adds	r3, #66	; 0x42
 8002206:	2200      	movs	r2, #0
 8002208:	701a      	strb	r2, [r3, #0]
      break;
 800220a:	e016      	b.n	800223a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800220c:	78fb      	ldrb	r3, [r7, #3]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	212c      	movs	r1, #44	; 0x2c
 8002212:	fb01 f303 	mul.w	r3, r1, r3
 8002216:	4413      	add	r3, r2
 8002218:	3342      	adds	r3, #66	; 0x42
 800221a:	2202      	movs	r2, #2
 800221c:	701a      	strb	r2, [r3, #0]
      break;
 800221e:	e00c      	b.n	800223a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002220:	78fb      	ldrb	r3, [r7, #3]
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	212c      	movs	r1, #44	; 0x2c
 8002226:	fb01 f303 	mul.w	r3, r1, r3
 800222a:	4413      	add	r3, r2
 800222c:	3342      	adds	r3, #66	; 0x42
 800222e:	2200      	movs	r2, #0
 8002230:	701a      	strb	r2, [r3, #0]
      break;
 8002232:	e002      	b.n	800223a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002234:	bf00      	nop
 8002236:	e000      	b.n	800223a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002238:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800223a:	78fb      	ldrb	r3, [r7, #3]
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	212c      	movs	r1, #44	; 0x2c
 8002240:	fb01 f303 	mul.w	r3, r1, r3
 8002244:	4413      	add	r3, r2
 8002246:	3344      	adds	r3, #68	; 0x44
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800224c:	78fb      	ldrb	r3, [r7, #3]
 800224e:	8b3a      	ldrh	r2, [r7, #24]
 8002250:	6879      	ldr	r1, [r7, #4]
 8002252:	202c      	movs	r0, #44	; 0x2c
 8002254:	fb00 f303 	mul.w	r3, r0, r3
 8002258:	440b      	add	r3, r1
 800225a:	334c      	adds	r3, #76	; 0x4c
 800225c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800225e:	78fb      	ldrb	r3, [r7, #3]
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	212c      	movs	r1, #44	; 0x2c
 8002264:	fb01 f303 	mul.w	r3, r1, r3
 8002268:	4413      	add	r3, r2
 800226a:	3360      	adds	r3, #96	; 0x60
 800226c:	2200      	movs	r2, #0
 800226e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002270:	78fb      	ldrb	r3, [r7, #3]
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	212c      	movs	r1, #44	; 0x2c
 8002276:	fb01 f303 	mul.w	r3, r1, r3
 800227a:	4413      	add	r3, r2
 800227c:	3350      	adds	r3, #80	; 0x50
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002282:	78fb      	ldrb	r3, [r7, #3]
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	212c      	movs	r1, #44	; 0x2c
 8002288:	fb01 f303 	mul.w	r3, r1, r3
 800228c:	4413      	add	r3, r2
 800228e:	3339      	adds	r3, #57	; 0x39
 8002290:	78fa      	ldrb	r2, [r7, #3]
 8002292:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002294:	78fb      	ldrb	r3, [r7, #3]
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	212c      	movs	r1, #44	; 0x2c
 800229a:	fb01 f303 	mul.w	r3, r1, r3
 800229e:	4413      	add	r3, r2
 80022a0:	3361      	adds	r3, #97	; 0x61
 80022a2:	2200      	movs	r2, #0
 80022a4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6818      	ldr	r0, [r3, #0]
 80022aa:	78fb      	ldrb	r3, [r7, #3]
 80022ac:	222c      	movs	r2, #44	; 0x2c
 80022ae:	fb02 f303 	mul.w	r3, r2, r3
 80022b2:	3338      	adds	r3, #56	; 0x38
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	18d1      	adds	r1, r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	461a      	mov	r2, r3
 80022c0:	f004 ff4a 	bl	8007158 <USB_HC_StartXfer>
 80022c4:	4603      	mov	r3, r0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop

080022d0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f004 fc4b 	bl	8006b82 <USB_GetMode>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	f040 80f6 	bne.w	80024e0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f004 fc2f 	bl	8006b5c <USB_ReadInterrupts>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	f000 80ec 	beq.w	80024de <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f004 fc26 	bl	8006b5c <USB_ReadInterrupts>
 8002310:	4603      	mov	r3, r0
 8002312:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002316:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800231a:	d104      	bne.n	8002326 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002324:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f004 fc16 	bl	8006b5c <USB_ReadInterrupts>
 8002330:	4603      	mov	r3, r0
 8002332:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002336:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800233a:	d104      	bne.n	8002346 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002344:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f004 fc06 	bl	8006b5c <USB_ReadInterrupts>
 8002350:	4603      	mov	r3, r0
 8002352:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002356:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800235a:	d104      	bne.n	8002366 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002364:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f004 fbf6 	bl	8006b5c <USB_ReadInterrupts>
 8002370:	4603      	mov	r3, r0
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b02      	cmp	r3, #2
 8002378:	d103      	bne.n	8002382 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2202      	movs	r2, #2
 8002380:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f004 fbe8 	bl	8006b5c <USB_ReadInterrupts>
 800238c:	4603      	mov	r3, r0
 800238e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002392:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002396:	d11c      	bne.n	80023d2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80023a0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10f      	bne.n	80023d2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80023b2:	2110      	movs	r1, #16
 80023b4:	6938      	ldr	r0, [r7, #16]
 80023b6:	f004 fad7 	bl	8006968 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80023ba:	6938      	ldr	r0, [r7, #16]
 80023bc:	f004 fb08 	bl	80069d0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2101      	movs	r1, #1
 80023c6:	4618      	mov	r0, r3
 80023c8:	f004 fcde 	bl	8006d88 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f00a fa57 	bl	800c880 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f004 fbc0 	bl	8006b5c <USB_ReadInterrupts>
 80023dc:	4603      	mov	r3, r0
 80023de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023e6:	d102      	bne.n	80023ee <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f001 f89e 	bl	800352a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f004 fbb2 	bl	8006b5c <USB_ReadInterrupts>
 80023f8:	4603      	mov	r3, r0
 80023fa:	f003 0308 	and.w	r3, r3, #8
 80023fe:	2b08      	cmp	r3, #8
 8002400:	d106      	bne.n	8002410 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f00a fa20 	bl	800c848 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2208      	movs	r2, #8
 800240e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4618      	mov	r0, r3
 8002416:	f004 fba1 	bl	8006b5c <USB_ReadInterrupts>
 800241a:	4603      	mov	r3, r0
 800241c:	f003 0310 	and.w	r3, r3, #16
 8002420:	2b10      	cmp	r3, #16
 8002422:	d101      	bne.n	8002428 <HAL_HCD_IRQHandler+0x158>
 8002424:	2301      	movs	r3, #1
 8002426:	e000      	b.n	800242a <HAL_HCD_IRQHandler+0x15a>
 8002428:	2300      	movs	r3, #0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d012      	beq.n	8002454 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	699a      	ldr	r2, [r3, #24]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 0210 	bic.w	r2, r2, #16
 800243c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 ffa1 	bl	8003386 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	699a      	ldr	r2, [r3, #24]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 0210 	orr.w	r2, r2, #16
 8002452:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4618      	mov	r0, r3
 800245a:	f004 fb7f 	bl	8006b5c <USB_ReadInterrupts>
 800245e:	4603      	mov	r3, r0
 8002460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002464:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002468:	d13a      	bne.n	80024e0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f004 ffb4 	bl	80073dc <USB_HC_ReadInterrupt>
 8002474:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002476:	2300      	movs	r3, #0
 8002478:	617b      	str	r3, [r7, #20]
 800247a:	e025      	b.n	80024c8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	fa22 f303 	lsr.w	r3, r2, r3
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b00      	cmp	r3, #0
 800248e:	d018      	beq.n	80024c2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	015a      	lsls	r2, r3, #5
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	4413      	add	r3, r2
 8002498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024a6:	d106      	bne.n	80024b6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	4619      	mov	r1, r3
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 f8ab 	bl	800260a <HCD_HC_IN_IRQHandler>
 80024b4:	e005      	b.n	80024c2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	4619      	mov	r1, r3
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 fbf9 	bl	8002cb4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	3301      	adds	r3, #1
 80024c6:	617b      	str	r3, [r7, #20]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d3d4      	bcc.n	800247c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024da:	615a      	str	r2, [r3, #20]
 80024dc:	e000      	b.n	80024e0 <HAL_HCD_IRQHandler+0x210>
      return;
 80024de:	bf00      	nop
    }
  }
}
 80024e0:	3718      	adds	r7, #24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b082      	sub	sp, #8
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d101      	bne.n	80024fc <HAL_HCD_Start+0x16>
 80024f8:	2302      	movs	r3, #2
 80024fa:	e013      	b.n	8002524 <HAL_HCD_Start+0x3e>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2101      	movs	r1, #1
 800250a:	4618      	mov	r0, r3
 800250c:	f004 fca0 	bl	8006e50 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f004 f9b8 	bl	800688a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800253a:	2b01      	cmp	r3, #1
 800253c:	d101      	bne.n	8002542 <HAL_HCD_Stop+0x16>
 800253e:	2302      	movs	r3, #2
 8002540:	e00d      	b.n	800255e <HAL_HCD_Stop+0x32>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f005 f88e 	bl	8007670 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b082      	sub	sp, #8
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f004 fc42 	bl	8006dfc <USB_ResetPort>
 8002578:	4603      	mov	r3, r0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002582:	b480      	push	{r7}
 8002584:	b083      	sub	sp, #12
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
 800258a:	460b      	mov	r3, r1
 800258c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800258e:	78fb      	ldrb	r3, [r7, #3]
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	212c      	movs	r1, #44	; 0x2c
 8002594:	fb01 f303 	mul.w	r3, r1, r3
 8002598:	4413      	add	r3, r2
 800259a:	3360      	adds	r3, #96	; 0x60
 800259c:	781b      	ldrb	r3, [r3, #0]
}
 800259e:	4618      	mov	r0, r3
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
 80025b2:	460b      	mov	r3, r1
 80025b4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80025b6:	78fb      	ldrb	r3, [r7, #3]
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	212c      	movs	r1, #44	; 0x2c
 80025bc:	fb01 f303 	mul.w	r3, r1, r3
 80025c0:	4413      	add	r3, r2
 80025c2:	3350      	adds	r3, #80	; 0x50
 80025c4:	681b      	ldr	r3, [r3, #0]
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b082      	sub	sp, #8
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f004 fc86 	bl	8006ef0 <USB_GetCurrentFrame>
 80025e4:	4603      	mov	r3, r0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b082      	sub	sp, #8
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f004 fc61 	bl	8006ec2 <USB_GetHostSpeed>
 8002600:	4603      	mov	r3, r0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b086      	sub	sp, #24
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
 8002612:	460b      	mov	r3, r1
 8002614:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002620:	78fb      	ldrb	r3, [r7, #3]
 8002622:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	015a      	lsls	r2, r3, #5
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	4413      	add	r3, r2
 800262c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 0304 	and.w	r3, r3, #4
 8002636:	2b04      	cmp	r3, #4
 8002638:	d11a      	bne.n	8002670 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	015a      	lsls	r2, r3, #5
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	4413      	add	r3, r2
 8002642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002646:	461a      	mov	r2, r3
 8002648:	2304      	movs	r3, #4
 800264a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	212c      	movs	r1, #44	; 0x2c
 8002652:	fb01 f303 	mul.w	r3, r1, r3
 8002656:	4413      	add	r3, r2
 8002658:	3361      	adds	r3, #97	; 0x61
 800265a:	2206      	movs	r2, #6
 800265c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	b2d2      	uxtb	r2, r2
 8002666:	4611      	mov	r1, r2
 8002668:	4618      	mov	r0, r3
 800266a:	f004 fec8 	bl	80073fe <USB_HC_Halt>
 800266e:	e0af      	b.n	80027d0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	015a      	lsls	r2, r3, #5
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	4413      	add	r3, r2
 8002678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002682:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002686:	d11b      	bne.n	80026c0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	015a      	lsls	r2, r3, #5
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	4413      	add	r3, r2
 8002690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002694:	461a      	mov	r2, r3
 8002696:	f44f 7380 	mov.w	r3, #256	; 0x100
 800269a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	212c      	movs	r1, #44	; 0x2c
 80026a2:	fb01 f303 	mul.w	r3, r1, r3
 80026a6:	4413      	add	r3, r2
 80026a8:	3361      	adds	r3, #97	; 0x61
 80026aa:	2207      	movs	r2, #7
 80026ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	4611      	mov	r1, r2
 80026b8:	4618      	mov	r0, r3
 80026ba:	f004 fea0 	bl	80073fe <USB_HC_Halt>
 80026be:	e087      	b.n	80027d0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	015a      	lsls	r2, r3, #5
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	4413      	add	r3, r2
 80026c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 0320 	and.w	r3, r3, #32
 80026d2:	2b20      	cmp	r3, #32
 80026d4:	d109      	bne.n	80026ea <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	015a      	lsls	r2, r3, #5
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	4413      	add	r3, r2
 80026de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e2:	461a      	mov	r2, r3
 80026e4:	2320      	movs	r3, #32
 80026e6:	6093      	str	r3, [r2, #8]
 80026e8:	e072      	b.n	80027d0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	015a      	lsls	r2, r3, #5
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	4413      	add	r3, r2
 80026f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 0308 	and.w	r3, r3, #8
 80026fc:	2b08      	cmp	r3, #8
 80026fe:	d11a      	bne.n	8002736 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	015a      	lsls	r2, r3, #5
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	4413      	add	r3, r2
 8002708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270c:	461a      	mov	r2, r3
 800270e:	2308      	movs	r3, #8
 8002710:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	212c      	movs	r1, #44	; 0x2c
 8002718:	fb01 f303 	mul.w	r3, r1, r3
 800271c:	4413      	add	r3, r2
 800271e:	3361      	adds	r3, #97	; 0x61
 8002720:	2205      	movs	r2, #5
 8002722:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	4611      	mov	r1, r2
 800272e:	4618      	mov	r0, r3
 8002730:	f004 fe65 	bl	80073fe <USB_HC_Halt>
 8002734:	e04c      	b.n	80027d0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	015a      	lsls	r2, r3, #5
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	4413      	add	r3, r2
 800273e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002748:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800274c:	d11b      	bne.n	8002786 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	015a      	lsls	r2, r3, #5
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	4413      	add	r3, r2
 8002756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275a:	461a      	mov	r2, r3
 800275c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002760:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	212c      	movs	r1, #44	; 0x2c
 8002768:	fb01 f303 	mul.w	r3, r1, r3
 800276c:	4413      	add	r3, r2
 800276e:	3361      	adds	r3, #97	; 0x61
 8002770:	2208      	movs	r2, #8
 8002772:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	4611      	mov	r1, r2
 800277e:	4618      	mov	r0, r3
 8002780:	f004 fe3d 	bl	80073fe <USB_HC_Halt>
 8002784:	e024      	b.n	80027d0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	015a      	lsls	r2, r3, #5
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	4413      	add	r3, r2
 800278e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002798:	2b80      	cmp	r3, #128	; 0x80
 800279a:	d119      	bne.n	80027d0 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	015a      	lsls	r2, r3, #5
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	4413      	add	r3, r2
 80027a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a8:	461a      	mov	r2, r3
 80027aa:	2380      	movs	r3, #128	; 0x80
 80027ac:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	212c      	movs	r1, #44	; 0x2c
 80027b4:	fb01 f303 	mul.w	r3, r1, r3
 80027b8:	4413      	add	r3, r2
 80027ba:	3361      	adds	r3, #97	; 0x61
 80027bc:	2206      	movs	r2, #6
 80027be:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	4611      	mov	r1, r2
 80027ca:	4618      	mov	r0, r3
 80027cc:	f004 fe17 	bl	80073fe <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	015a      	lsls	r2, r3, #5
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	4413      	add	r3, r2
 80027d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027e6:	d112      	bne.n	800280e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	4611      	mov	r1, r2
 80027f2:	4618      	mov	r0, r3
 80027f4:	f004 fe03 	bl	80073fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	015a      	lsls	r2, r3, #5
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	4413      	add	r3, r2
 8002800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002804:	461a      	mov	r2, r3
 8002806:	f44f 7300 	mov.w	r3, #512	; 0x200
 800280a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800280c:	e24e      	b.n	8002cac <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	015a      	lsls	r2, r3, #5
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	4413      	add	r3, r2
 8002816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b01      	cmp	r3, #1
 8002822:	f040 80df 	bne.w	80029e4 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d019      	beq.n	8002862 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	212c      	movs	r1, #44	; 0x2c
 8002834:	fb01 f303 	mul.w	r3, r1, r3
 8002838:	4413      	add	r3, r2
 800283a:	3348      	adds	r3, #72	; 0x48
 800283c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	0159      	lsls	r1, r3, #5
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	440b      	add	r3, r1
 8002846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002850:	1ad2      	subs	r2, r2, r3
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	202c      	movs	r0, #44	; 0x2c
 8002858:	fb00 f303 	mul.w	r3, r0, r3
 800285c:	440b      	add	r3, r1
 800285e:	3350      	adds	r3, #80	; 0x50
 8002860:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	212c      	movs	r1, #44	; 0x2c
 8002868:	fb01 f303 	mul.w	r3, r1, r3
 800286c:	4413      	add	r3, r2
 800286e:	3361      	adds	r3, #97	; 0x61
 8002870:	2201      	movs	r2, #1
 8002872:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	212c      	movs	r1, #44	; 0x2c
 800287a:	fb01 f303 	mul.w	r3, r1, r3
 800287e:	4413      	add	r3, r2
 8002880:	335c      	adds	r3, #92	; 0x5c
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	015a      	lsls	r2, r3, #5
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	4413      	add	r3, r2
 800288e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002892:	461a      	mov	r2, r3
 8002894:	2301      	movs	r3, #1
 8002896:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	212c      	movs	r1, #44	; 0x2c
 800289e:	fb01 f303 	mul.w	r3, r1, r3
 80028a2:	4413      	add	r3, r2
 80028a4:	333f      	adds	r3, #63	; 0x3f
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d009      	beq.n	80028c0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	212c      	movs	r1, #44	; 0x2c
 80028b2:	fb01 f303 	mul.w	r3, r1, r3
 80028b6:	4413      	add	r3, r2
 80028b8:	333f      	adds	r3, #63	; 0x3f
 80028ba:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d111      	bne.n	80028e4 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	4611      	mov	r1, r2
 80028ca:	4618      	mov	r0, r3
 80028cc:	f004 fd97 	bl	80073fe <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	015a      	lsls	r2, r3, #5
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	4413      	add	r3, r2
 80028d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028dc:	461a      	mov	r2, r3
 80028de:	2310      	movs	r3, #16
 80028e0:	6093      	str	r3, [r2, #8]
 80028e2:	e03a      	b.n	800295a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	212c      	movs	r1, #44	; 0x2c
 80028ea:	fb01 f303 	mul.w	r3, r1, r3
 80028ee:	4413      	add	r3, r2
 80028f0:	333f      	adds	r3, #63	; 0x3f
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	d009      	beq.n	800290c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	212c      	movs	r1, #44	; 0x2c
 80028fe:	fb01 f303 	mul.w	r3, r1, r3
 8002902:	4413      	add	r3, r2
 8002904:	333f      	adds	r3, #63	; 0x3f
 8002906:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002908:	2b01      	cmp	r3, #1
 800290a:	d126      	bne.n	800295a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	015a      	lsls	r2, r3, #5
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	4413      	add	r3, r2
 8002914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	0151      	lsls	r1, r2, #5
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	440a      	add	r2, r1
 8002922:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002926:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800292a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	212c      	movs	r1, #44	; 0x2c
 8002932:	fb01 f303 	mul.w	r3, r1, r3
 8002936:	4413      	add	r3, r2
 8002938:	3360      	adds	r3, #96	; 0x60
 800293a:	2201      	movs	r2, #1
 800293c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	b2d9      	uxtb	r1, r3
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	202c      	movs	r0, #44	; 0x2c
 8002948:	fb00 f303 	mul.w	r3, r0, r3
 800294c:	4413      	add	r3, r2
 800294e:	3360      	adds	r3, #96	; 0x60
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	461a      	mov	r2, r3
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f009 ffa1 	bl	800c89c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d12b      	bne.n	80029ba <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	212c      	movs	r1, #44	; 0x2c
 8002968:	fb01 f303 	mul.w	r3, r1, r3
 800296c:	4413      	add	r3, r2
 800296e:	3348      	adds	r3, #72	; 0x48
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	202c      	movs	r0, #44	; 0x2c
 8002978:	fb00 f202 	mul.w	r2, r0, r2
 800297c:	440a      	add	r2, r1
 800297e:	3240      	adds	r2, #64	; 0x40
 8002980:	8812      	ldrh	r2, [r2, #0]
 8002982:	fbb3 f3f2 	udiv	r3, r3, r2
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 818e 	beq.w	8002cac <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	212c      	movs	r1, #44	; 0x2c
 8002996:	fb01 f303 	mul.w	r3, r1, r3
 800299a:	4413      	add	r3, r2
 800299c:	3354      	adds	r3, #84	; 0x54
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	f083 0301 	eor.w	r3, r3, #1
 80029a4:	b2d8      	uxtb	r0, r3
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	212c      	movs	r1, #44	; 0x2c
 80029ac:	fb01 f303 	mul.w	r3, r1, r3
 80029b0:	4413      	add	r3, r2
 80029b2:	3354      	adds	r3, #84	; 0x54
 80029b4:	4602      	mov	r2, r0
 80029b6:	701a      	strb	r2, [r3, #0]
}
 80029b8:	e178      	b.n	8002cac <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	212c      	movs	r1, #44	; 0x2c
 80029c0:	fb01 f303 	mul.w	r3, r1, r3
 80029c4:	4413      	add	r3, r2
 80029c6:	3354      	adds	r3, #84	; 0x54
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	f083 0301 	eor.w	r3, r3, #1
 80029ce:	b2d8      	uxtb	r0, r3
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	212c      	movs	r1, #44	; 0x2c
 80029d6:	fb01 f303 	mul.w	r3, r1, r3
 80029da:	4413      	add	r3, r2
 80029dc:	3354      	adds	r3, #84	; 0x54
 80029de:	4602      	mov	r2, r0
 80029e0:	701a      	strb	r2, [r3, #0]
}
 80029e2:	e163      	b.n	8002cac <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	015a      	lsls	r2, r3, #5
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	4413      	add	r3, r2
 80029ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	f040 80f6 	bne.w	8002be8 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	212c      	movs	r1, #44	; 0x2c
 8002a02:	fb01 f303 	mul.w	r3, r1, r3
 8002a06:	4413      	add	r3, r2
 8002a08:	3361      	adds	r3, #97	; 0x61
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d109      	bne.n	8002a24 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	212c      	movs	r1, #44	; 0x2c
 8002a16:	fb01 f303 	mul.w	r3, r1, r3
 8002a1a:	4413      	add	r3, r2
 8002a1c:	3360      	adds	r3, #96	; 0x60
 8002a1e:	2201      	movs	r2, #1
 8002a20:	701a      	strb	r2, [r3, #0]
 8002a22:	e0c9      	b.n	8002bb8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	212c      	movs	r1, #44	; 0x2c
 8002a2a:	fb01 f303 	mul.w	r3, r1, r3
 8002a2e:	4413      	add	r3, r2
 8002a30:	3361      	adds	r3, #97	; 0x61
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b05      	cmp	r3, #5
 8002a36:	d109      	bne.n	8002a4c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	212c      	movs	r1, #44	; 0x2c
 8002a3e:	fb01 f303 	mul.w	r3, r1, r3
 8002a42:	4413      	add	r3, r2
 8002a44:	3360      	adds	r3, #96	; 0x60
 8002a46:	2205      	movs	r2, #5
 8002a48:	701a      	strb	r2, [r3, #0]
 8002a4a:	e0b5      	b.n	8002bb8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	212c      	movs	r1, #44	; 0x2c
 8002a52:	fb01 f303 	mul.w	r3, r1, r3
 8002a56:	4413      	add	r3, r2
 8002a58:	3361      	adds	r3, #97	; 0x61
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b06      	cmp	r3, #6
 8002a5e:	d009      	beq.n	8002a74 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	212c      	movs	r1, #44	; 0x2c
 8002a66:	fb01 f303 	mul.w	r3, r1, r3
 8002a6a:	4413      	add	r3, r2
 8002a6c:	3361      	adds	r3, #97	; 0x61
 8002a6e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a70:	2b08      	cmp	r3, #8
 8002a72:	d150      	bne.n	8002b16 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	212c      	movs	r1, #44	; 0x2c
 8002a7a:	fb01 f303 	mul.w	r3, r1, r3
 8002a7e:	4413      	add	r3, r2
 8002a80:	335c      	adds	r3, #92	; 0x5c
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	1c5a      	adds	r2, r3, #1
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	202c      	movs	r0, #44	; 0x2c
 8002a8c:	fb00 f303 	mul.w	r3, r0, r3
 8002a90:	440b      	add	r3, r1
 8002a92:	335c      	adds	r3, #92	; 0x5c
 8002a94:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	212c      	movs	r1, #44	; 0x2c
 8002a9c:	fb01 f303 	mul.w	r3, r1, r3
 8002aa0:	4413      	add	r3, r2
 8002aa2:	335c      	adds	r3, #92	; 0x5c
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d912      	bls.n	8002ad0 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	212c      	movs	r1, #44	; 0x2c
 8002ab0:	fb01 f303 	mul.w	r3, r1, r3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	335c      	adds	r3, #92	; 0x5c
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	212c      	movs	r1, #44	; 0x2c
 8002ac2:	fb01 f303 	mul.w	r3, r1, r3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	3360      	adds	r3, #96	; 0x60
 8002aca:	2204      	movs	r2, #4
 8002acc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ace:	e073      	b.n	8002bb8 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	212c      	movs	r1, #44	; 0x2c
 8002ad6:	fb01 f303 	mul.w	r3, r1, r3
 8002ada:	4413      	add	r3, r2
 8002adc:	3360      	adds	r3, #96	; 0x60
 8002ade:	2202      	movs	r2, #2
 8002ae0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	015a      	lsls	r2, r3, #5
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	4413      	add	r3, r2
 8002aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002af8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b00:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	015a      	lsls	r2, r3, #5
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	4413      	add	r3, r2
 8002b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b0e:	461a      	mov	r2, r3
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b14:	e050      	b.n	8002bb8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	212c      	movs	r1, #44	; 0x2c
 8002b1c:	fb01 f303 	mul.w	r3, r1, r3
 8002b20:	4413      	add	r3, r2
 8002b22:	3361      	adds	r3, #97	; 0x61
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	2b03      	cmp	r3, #3
 8002b28:	d122      	bne.n	8002b70 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	212c      	movs	r1, #44	; 0x2c
 8002b30:	fb01 f303 	mul.w	r3, r1, r3
 8002b34:	4413      	add	r3, r2
 8002b36:	3360      	adds	r3, #96	; 0x60
 8002b38:	2202      	movs	r2, #2
 8002b3a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	015a      	lsls	r2, r3, #5
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	4413      	add	r3, r2
 8002b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b52:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b5a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	015a      	lsls	r2, r3, #5
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	4413      	add	r3, r2
 8002b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b68:	461a      	mov	r2, r3
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	6013      	str	r3, [r2, #0]
 8002b6e:	e023      	b.n	8002bb8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	212c      	movs	r1, #44	; 0x2c
 8002b76:	fb01 f303 	mul.w	r3, r1, r3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	3361      	adds	r3, #97	; 0x61
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b07      	cmp	r3, #7
 8002b82:	d119      	bne.n	8002bb8 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	212c      	movs	r1, #44	; 0x2c
 8002b8a:	fb01 f303 	mul.w	r3, r1, r3
 8002b8e:	4413      	add	r3, r2
 8002b90:	335c      	adds	r3, #92	; 0x5c
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	1c5a      	adds	r2, r3, #1
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	202c      	movs	r0, #44	; 0x2c
 8002b9c:	fb00 f303 	mul.w	r3, r0, r3
 8002ba0:	440b      	add	r3, r1
 8002ba2:	335c      	adds	r3, #92	; 0x5c
 8002ba4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	212c      	movs	r1, #44	; 0x2c
 8002bac:	fb01 f303 	mul.w	r3, r1, r3
 8002bb0:	4413      	add	r3, r2
 8002bb2:	3360      	adds	r3, #96	; 0x60
 8002bb4:	2204      	movs	r2, #4
 8002bb6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	015a      	lsls	r2, r3, #5
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	b2d9      	uxtb	r1, r3
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	202c      	movs	r0, #44	; 0x2c
 8002bd4:	fb00 f303 	mul.w	r3, r0, r3
 8002bd8:	4413      	add	r3, r2
 8002bda:	3360      	adds	r3, #96	; 0x60
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	461a      	mov	r2, r3
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f009 fe5b 	bl	800c89c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002be6:	e061      	b.n	8002cac <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	015a      	lsls	r2, r3, #5
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	4413      	add	r3, r2
 8002bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 0310 	and.w	r3, r3, #16
 8002bfa:	2b10      	cmp	r3, #16
 8002bfc:	d156      	bne.n	8002cac <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	212c      	movs	r1, #44	; 0x2c
 8002c04:	fb01 f303 	mul.w	r3, r1, r3
 8002c08:	4413      	add	r3, r2
 8002c0a:	333f      	adds	r3, #63	; 0x3f
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	2b03      	cmp	r3, #3
 8002c10:	d111      	bne.n	8002c36 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	212c      	movs	r1, #44	; 0x2c
 8002c18:	fb01 f303 	mul.w	r3, r1, r3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	335c      	adds	r3, #92	; 0x5c
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	4611      	mov	r1, r2
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f004 fbe5 	bl	80073fe <USB_HC_Halt>
 8002c34:	e031      	b.n	8002c9a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	212c      	movs	r1, #44	; 0x2c
 8002c3c:	fb01 f303 	mul.w	r3, r1, r3
 8002c40:	4413      	add	r3, r2
 8002c42:	333f      	adds	r3, #63	; 0x3f
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d009      	beq.n	8002c5e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	212c      	movs	r1, #44	; 0x2c
 8002c50:	fb01 f303 	mul.w	r3, r1, r3
 8002c54:	4413      	add	r3, r2
 8002c56:	333f      	adds	r3, #63	; 0x3f
 8002c58:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d11d      	bne.n	8002c9a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	212c      	movs	r1, #44	; 0x2c
 8002c64:	fb01 f303 	mul.w	r3, r1, r3
 8002c68:	4413      	add	r3, r2
 8002c6a:	335c      	adds	r3, #92	; 0x5c
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d110      	bne.n	8002c9a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	212c      	movs	r1, #44	; 0x2c
 8002c7e:	fb01 f303 	mul.w	r3, r1, r3
 8002c82:	4413      	add	r3, r2
 8002c84:	3361      	adds	r3, #97	; 0x61
 8002c86:	2203      	movs	r2, #3
 8002c88:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	b2d2      	uxtb	r2, r2
 8002c92:	4611      	mov	r1, r2
 8002c94:	4618      	mov	r0, r3
 8002c96:	f004 fbb2 	bl	80073fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	015a      	lsls	r2, r3, #5
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	2310      	movs	r3, #16
 8002caa:	6093      	str	r3, [r2, #8]
}
 8002cac:	bf00      	nop
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b088      	sub	sp, #32
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002cca:	78fb      	ldrb	r3, [r7, #3]
 8002ccc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	015a      	lsls	r2, r3, #5
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	2b04      	cmp	r3, #4
 8002ce2:	d11a      	bne.n	8002d1a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	015a      	lsls	r2, r3, #5
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	4413      	add	r3, r2
 8002cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	2304      	movs	r3, #4
 8002cf4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	212c      	movs	r1, #44	; 0x2c
 8002cfc:	fb01 f303 	mul.w	r3, r1, r3
 8002d00:	4413      	add	r3, r2
 8002d02:	3361      	adds	r3, #97	; 0x61
 8002d04:	2206      	movs	r2, #6
 8002d06:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	4611      	mov	r1, r2
 8002d12:	4618      	mov	r0, r3
 8002d14:	f004 fb73 	bl	80073fe <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002d18:	e331      	b.n	800337e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	015a      	lsls	r2, r3, #5
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	4413      	add	r3, r2
 8002d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f003 0320 	and.w	r3, r3, #32
 8002d2c:	2b20      	cmp	r3, #32
 8002d2e:	d12e      	bne.n	8002d8e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	015a      	lsls	r2, r3, #5
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	4413      	add	r3, r2
 8002d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	2320      	movs	r3, #32
 8002d40:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	212c      	movs	r1, #44	; 0x2c
 8002d48:	fb01 f303 	mul.w	r3, r1, r3
 8002d4c:	4413      	add	r3, r2
 8002d4e:	333d      	adds	r3, #61	; 0x3d
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	f040 8313 	bne.w	800337e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	212c      	movs	r1, #44	; 0x2c
 8002d5e:	fb01 f303 	mul.w	r3, r1, r3
 8002d62:	4413      	add	r3, r2
 8002d64:	333d      	adds	r3, #61	; 0x3d
 8002d66:	2200      	movs	r2, #0
 8002d68:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	212c      	movs	r1, #44	; 0x2c
 8002d70:	fb01 f303 	mul.w	r3, r1, r3
 8002d74:	4413      	add	r3, r2
 8002d76:	3360      	adds	r3, #96	; 0x60
 8002d78:	2202      	movs	r2, #2
 8002d7a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	4611      	mov	r1, r2
 8002d86:	4618      	mov	r0, r3
 8002d88:	f004 fb39 	bl	80073fe <USB_HC_Halt>
}
 8002d8c:	e2f7      	b.n	800337e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	015a      	lsls	r2, r3, #5
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	4413      	add	r3, r2
 8002d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002da4:	d112      	bne.n	8002dcc <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	015a      	lsls	r2, r3, #5
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	4413      	add	r3, r2
 8002dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db2:	461a      	mov	r2, r3
 8002db4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002db8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	b2d2      	uxtb	r2, r2
 8002dc2:	4611      	mov	r1, r2
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f004 fb1a 	bl	80073fe <USB_HC_Halt>
}
 8002dca:	e2d8      	b.n	800337e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	015a      	lsls	r2, r3, #5
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d140      	bne.n	8002e64 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	212c      	movs	r1, #44	; 0x2c
 8002de8:	fb01 f303 	mul.w	r3, r1, r3
 8002dec:	4413      	add	r3, r2
 8002dee:	335c      	adds	r3, #92	; 0x5c
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	015a      	lsls	r2, r3, #5
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e06:	2b40      	cmp	r3, #64	; 0x40
 8002e08:	d111      	bne.n	8002e2e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	212c      	movs	r1, #44	; 0x2c
 8002e10:	fb01 f303 	mul.w	r3, r1, r3
 8002e14:	4413      	add	r3, r2
 8002e16:	333d      	adds	r3, #61	; 0x3d
 8002e18:	2201      	movs	r2, #1
 8002e1a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	015a      	lsls	r2, r3, #5
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	4413      	add	r3, r2
 8002e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e28:	461a      	mov	r2, r3
 8002e2a:	2340      	movs	r3, #64	; 0x40
 8002e2c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	015a      	lsls	r2, r3, #5
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	4413      	add	r3, r2
 8002e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	212c      	movs	r1, #44	; 0x2c
 8002e46:	fb01 f303 	mul.w	r3, r1, r3
 8002e4a:	4413      	add	r3, r2
 8002e4c:	3361      	adds	r3, #97	; 0x61
 8002e4e:	2201      	movs	r2, #1
 8002e50:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	b2d2      	uxtb	r2, r2
 8002e5a:	4611      	mov	r1, r2
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f004 face 	bl	80073fe <USB_HC_Halt>
}
 8002e62:	e28c      	b.n	800337e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	015a      	lsls	r2, r3, #5
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e76:	2b40      	cmp	r3, #64	; 0x40
 8002e78:	d12c      	bne.n	8002ed4 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	212c      	movs	r1, #44	; 0x2c
 8002e80:	fb01 f303 	mul.w	r3, r1, r3
 8002e84:	4413      	add	r3, r2
 8002e86:	3361      	adds	r3, #97	; 0x61
 8002e88:	2204      	movs	r2, #4
 8002e8a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	212c      	movs	r1, #44	; 0x2c
 8002e92:	fb01 f303 	mul.w	r3, r1, r3
 8002e96:	4413      	add	r3, r2
 8002e98:	333d      	adds	r3, #61	; 0x3d
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	212c      	movs	r1, #44	; 0x2c
 8002ea4:	fb01 f303 	mul.w	r3, r1, r3
 8002ea8:	4413      	add	r3, r2
 8002eaa:	335c      	adds	r3, #92	; 0x5c
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	4611      	mov	r1, r2
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f004 fa9f 	bl	80073fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	015a      	lsls	r2, r3, #5
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ecc:	461a      	mov	r2, r3
 8002ece:	2340      	movs	r3, #64	; 0x40
 8002ed0:	6093      	str	r3, [r2, #8]
}
 8002ed2:	e254      	b.n	800337e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	015a      	lsls	r2, r3, #5
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	4413      	add	r3, r2
 8002edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 0308 	and.w	r3, r3, #8
 8002ee6:	2b08      	cmp	r3, #8
 8002ee8:	d11a      	bne.n	8002f20 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	015a      	lsls	r2, r3, #5
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	2308      	movs	r3, #8
 8002efa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	212c      	movs	r1, #44	; 0x2c
 8002f02:	fb01 f303 	mul.w	r3, r1, r3
 8002f06:	4413      	add	r3, r2
 8002f08:	3361      	adds	r3, #97	; 0x61
 8002f0a:	2205      	movs	r2, #5
 8002f0c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	b2d2      	uxtb	r2, r2
 8002f16:	4611      	mov	r1, r2
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f004 fa70 	bl	80073fe <USB_HC_Halt>
}
 8002f1e:	e22e      	b.n	800337e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	015a      	lsls	r2, r3, #5
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	4413      	add	r3, r2
 8002f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f003 0310 	and.w	r3, r3, #16
 8002f32:	2b10      	cmp	r3, #16
 8002f34:	d140      	bne.n	8002fb8 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	212c      	movs	r1, #44	; 0x2c
 8002f3c:	fb01 f303 	mul.w	r3, r1, r3
 8002f40:	4413      	add	r3, r2
 8002f42:	335c      	adds	r3, #92	; 0x5c
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	212c      	movs	r1, #44	; 0x2c
 8002f4e:	fb01 f303 	mul.w	r3, r1, r3
 8002f52:	4413      	add	r3, r2
 8002f54:	3361      	adds	r3, #97	; 0x61
 8002f56:	2203      	movs	r2, #3
 8002f58:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	212c      	movs	r1, #44	; 0x2c
 8002f60:	fb01 f303 	mul.w	r3, r1, r3
 8002f64:	4413      	add	r3, r2
 8002f66:	333d      	adds	r3, #61	; 0x3d
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d112      	bne.n	8002f94 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	212c      	movs	r1, #44	; 0x2c
 8002f74:	fb01 f303 	mul.w	r3, r1, r3
 8002f78:	4413      	add	r3, r2
 8002f7a:	333c      	adds	r3, #60	; 0x3c
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d108      	bne.n	8002f94 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	212c      	movs	r1, #44	; 0x2c
 8002f88:	fb01 f303 	mul.w	r3, r1, r3
 8002f8c:	4413      	add	r3, r2
 8002f8e:	333d      	adds	r3, #61	; 0x3d
 8002f90:	2201      	movs	r2, #1
 8002f92:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	4611      	mov	r1, r2
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f004 fa2d 	bl	80073fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	015a      	lsls	r2, r3, #5
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	4413      	add	r3, r2
 8002fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	2310      	movs	r3, #16
 8002fb4:	6093      	str	r3, [r2, #8]
}
 8002fb6:	e1e2      	b.n	800337e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	015a      	lsls	r2, r3, #5
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fca:	2b80      	cmp	r3, #128	; 0x80
 8002fcc:	d164      	bne.n	8003098 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d111      	bne.n	8002ffa <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	212c      	movs	r1, #44	; 0x2c
 8002fdc:	fb01 f303 	mul.w	r3, r1, r3
 8002fe0:	4413      	add	r3, r2
 8002fe2:	3361      	adds	r3, #97	; 0x61
 8002fe4:	2206      	movs	r2, #6
 8002fe6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	4611      	mov	r1, r2
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f004 fa03 	bl	80073fe <USB_HC_Halt>
 8002ff8:	e044      	b.n	8003084 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	212c      	movs	r1, #44	; 0x2c
 8003000:	fb01 f303 	mul.w	r3, r1, r3
 8003004:	4413      	add	r3, r2
 8003006:	335c      	adds	r3, #92	; 0x5c
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	1c5a      	adds	r2, r3, #1
 800300c:	6879      	ldr	r1, [r7, #4]
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	202c      	movs	r0, #44	; 0x2c
 8003012:	fb00 f303 	mul.w	r3, r0, r3
 8003016:	440b      	add	r3, r1
 8003018:	335c      	adds	r3, #92	; 0x5c
 800301a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	212c      	movs	r1, #44	; 0x2c
 8003022:	fb01 f303 	mul.w	r3, r1, r3
 8003026:	4413      	add	r3, r2
 8003028:	335c      	adds	r3, #92	; 0x5c
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2b02      	cmp	r3, #2
 800302e:	d920      	bls.n	8003072 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	212c      	movs	r1, #44	; 0x2c
 8003036:	fb01 f303 	mul.w	r3, r1, r3
 800303a:	4413      	add	r3, r2
 800303c:	335c      	adds	r3, #92	; 0x5c
 800303e:	2200      	movs	r2, #0
 8003040:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	212c      	movs	r1, #44	; 0x2c
 8003048:	fb01 f303 	mul.w	r3, r1, r3
 800304c:	4413      	add	r3, r2
 800304e:	3360      	adds	r3, #96	; 0x60
 8003050:	2204      	movs	r2, #4
 8003052:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	b2d9      	uxtb	r1, r3
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	202c      	movs	r0, #44	; 0x2c
 800305e:	fb00 f303 	mul.w	r3, r0, r3
 8003062:	4413      	add	r3, r2
 8003064:	3360      	adds	r3, #96	; 0x60
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	461a      	mov	r2, r3
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f009 fc16 	bl	800c89c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003070:	e008      	b.n	8003084 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	212c      	movs	r1, #44	; 0x2c
 8003078:	fb01 f303 	mul.w	r3, r1, r3
 800307c:	4413      	add	r3, r2
 800307e:	3360      	adds	r3, #96	; 0x60
 8003080:	2202      	movs	r2, #2
 8003082:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	015a      	lsls	r2, r3, #5
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	4413      	add	r3, r2
 800308c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003090:	461a      	mov	r2, r3
 8003092:	2380      	movs	r3, #128	; 0x80
 8003094:	6093      	str	r3, [r2, #8]
}
 8003096:	e172      	b.n	800337e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	015a      	lsls	r2, r3, #5
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	4413      	add	r3, r2
 80030a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ae:	d11b      	bne.n	80030e8 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	212c      	movs	r1, #44	; 0x2c
 80030b6:	fb01 f303 	mul.w	r3, r1, r3
 80030ba:	4413      	add	r3, r2
 80030bc:	3361      	adds	r3, #97	; 0x61
 80030be:	2208      	movs	r2, #8
 80030c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	b2d2      	uxtb	r2, r2
 80030ca:	4611      	mov	r1, r2
 80030cc:	4618      	mov	r0, r3
 80030ce:	f004 f996 	bl	80073fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	015a      	lsls	r2, r3, #5
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	4413      	add	r3, r2
 80030da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030de:	461a      	mov	r2, r3
 80030e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030e4:	6093      	str	r3, [r2, #8]
}
 80030e6:	e14a      	b.n	800337e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	015a      	lsls	r2, r3, #5
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	4413      	add	r3, r2
 80030f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	f040 813f 	bne.w	800337e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	212c      	movs	r1, #44	; 0x2c
 8003106:	fb01 f303 	mul.w	r3, r1, r3
 800310a:	4413      	add	r3, r2
 800310c:	3361      	adds	r3, #97	; 0x61
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d17d      	bne.n	8003210 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	212c      	movs	r1, #44	; 0x2c
 800311a:	fb01 f303 	mul.w	r3, r1, r3
 800311e:	4413      	add	r3, r2
 8003120:	3360      	adds	r3, #96	; 0x60
 8003122:	2201      	movs	r2, #1
 8003124:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	212c      	movs	r1, #44	; 0x2c
 800312c:	fb01 f303 	mul.w	r3, r1, r3
 8003130:	4413      	add	r3, r2
 8003132:	333f      	adds	r3, #63	; 0x3f
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	2b02      	cmp	r3, #2
 8003138:	d00a      	beq.n	8003150 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	212c      	movs	r1, #44	; 0x2c
 8003140:	fb01 f303 	mul.w	r3, r1, r3
 8003144:	4413      	add	r3, r2
 8003146:	333f      	adds	r3, #63	; 0x3f
 8003148:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800314a:	2b03      	cmp	r3, #3
 800314c:	f040 8100 	bne.w	8003350 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d113      	bne.n	8003180 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	212c      	movs	r1, #44	; 0x2c
 800315e:	fb01 f303 	mul.w	r3, r1, r3
 8003162:	4413      	add	r3, r2
 8003164:	3355      	adds	r3, #85	; 0x55
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	f083 0301 	eor.w	r3, r3, #1
 800316c:	b2d8      	uxtb	r0, r3
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	212c      	movs	r1, #44	; 0x2c
 8003174:	fb01 f303 	mul.w	r3, r1, r3
 8003178:	4413      	add	r3, r2
 800317a:	3355      	adds	r3, #85	; 0x55
 800317c:	4602      	mov	r2, r0
 800317e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	2b01      	cmp	r3, #1
 8003186:	f040 80e3 	bne.w	8003350 <HCD_HC_OUT_IRQHandler+0x69c>
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	212c      	movs	r1, #44	; 0x2c
 8003190:	fb01 f303 	mul.w	r3, r1, r3
 8003194:	4413      	add	r3, r2
 8003196:	334c      	adds	r3, #76	; 0x4c
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2b00      	cmp	r3, #0
 800319c:	f000 80d8 	beq.w	8003350 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	212c      	movs	r1, #44	; 0x2c
 80031a6:	fb01 f303 	mul.w	r3, r1, r3
 80031aa:	4413      	add	r3, r2
 80031ac:	334c      	adds	r3, #76	; 0x4c
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6879      	ldr	r1, [r7, #4]
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	202c      	movs	r0, #44	; 0x2c
 80031b6:	fb00 f202 	mul.w	r2, r0, r2
 80031ba:	440a      	add	r2, r1
 80031bc:	3240      	adds	r2, #64	; 0x40
 80031be:	8812      	ldrh	r2, [r2, #0]
 80031c0:	4413      	add	r3, r2
 80031c2:	3b01      	subs	r3, #1
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	202c      	movs	r0, #44	; 0x2c
 80031ca:	fb00 f202 	mul.w	r2, r0, r2
 80031ce:	440a      	add	r2, r1
 80031d0:	3240      	adds	r2, #64	; 0x40
 80031d2:	8812      	ldrh	r2, [r2, #0]
 80031d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80031d8:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 80b5 	beq.w	8003350 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	212c      	movs	r1, #44	; 0x2c
 80031ec:	fb01 f303 	mul.w	r3, r1, r3
 80031f0:	4413      	add	r3, r2
 80031f2:	3355      	adds	r3, #85	; 0x55
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	f083 0301 	eor.w	r3, r3, #1
 80031fa:	b2d8      	uxtb	r0, r3
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	212c      	movs	r1, #44	; 0x2c
 8003202:	fb01 f303 	mul.w	r3, r1, r3
 8003206:	4413      	add	r3, r2
 8003208:	3355      	adds	r3, #85	; 0x55
 800320a:	4602      	mov	r2, r0
 800320c:	701a      	strb	r2, [r3, #0]
 800320e:	e09f      	b.n	8003350 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	212c      	movs	r1, #44	; 0x2c
 8003216:	fb01 f303 	mul.w	r3, r1, r3
 800321a:	4413      	add	r3, r2
 800321c:	3361      	adds	r3, #97	; 0x61
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	2b03      	cmp	r3, #3
 8003222:	d109      	bne.n	8003238 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	212c      	movs	r1, #44	; 0x2c
 800322a:	fb01 f303 	mul.w	r3, r1, r3
 800322e:	4413      	add	r3, r2
 8003230:	3360      	adds	r3, #96	; 0x60
 8003232:	2202      	movs	r2, #2
 8003234:	701a      	strb	r2, [r3, #0]
 8003236:	e08b      	b.n	8003350 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	212c      	movs	r1, #44	; 0x2c
 800323e:	fb01 f303 	mul.w	r3, r1, r3
 8003242:	4413      	add	r3, r2
 8003244:	3361      	adds	r3, #97	; 0x61
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	2b04      	cmp	r3, #4
 800324a:	d109      	bne.n	8003260 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	212c      	movs	r1, #44	; 0x2c
 8003252:	fb01 f303 	mul.w	r3, r1, r3
 8003256:	4413      	add	r3, r2
 8003258:	3360      	adds	r3, #96	; 0x60
 800325a:	2202      	movs	r2, #2
 800325c:	701a      	strb	r2, [r3, #0]
 800325e:	e077      	b.n	8003350 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	212c      	movs	r1, #44	; 0x2c
 8003266:	fb01 f303 	mul.w	r3, r1, r3
 800326a:	4413      	add	r3, r2
 800326c:	3361      	adds	r3, #97	; 0x61
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	2b05      	cmp	r3, #5
 8003272:	d109      	bne.n	8003288 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	212c      	movs	r1, #44	; 0x2c
 800327a:	fb01 f303 	mul.w	r3, r1, r3
 800327e:	4413      	add	r3, r2
 8003280:	3360      	adds	r3, #96	; 0x60
 8003282:	2205      	movs	r2, #5
 8003284:	701a      	strb	r2, [r3, #0]
 8003286:	e063      	b.n	8003350 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	212c      	movs	r1, #44	; 0x2c
 800328e:	fb01 f303 	mul.w	r3, r1, r3
 8003292:	4413      	add	r3, r2
 8003294:	3361      	adds	r3, #97	; 0x61
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	2b06      	cmp	r3, #6
 800329a:	d009      	beq.n	80032b0 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	212c      	movs	r1, #44	; 0x2c
 80032a2:	fb01 f303 	mul.w	r3, r1, r3
 80032a6:	4413      	add	r3, r2
 80032a8:	3361      	adds	r3, #97	; 0x61
 80032aa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d14f      	bne.n	8003350 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	212c      	movs	r1, #44	; 0x2c
 80032b6:	fb01 f303 	mul.w	r3, r1, r3
 80032ba:	4413      	add	r3, r2
 80032bc:	335c      	adds	r3, #92	; 0x5c
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	1c5a      	adds	r2, r3, #1
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	202c      	movs	r0, #44	; 0x2c
 80032c8:	fb00 f303 	mul.w	r3, r0, r3
 80032cc:	440b      	add	r3, r1
 80032ce:	335c      	adds	r3, #92	; 0x5c
 80032d0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	212c      	movs	r1, #44	; 0x2c
 80032d8:	fb01 f303 	mul.w	r3, r1, r3
 80032dc:	4413      	add	r3, r2
 80032de:	335c      	adds	r3, #92	; 0x5c
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d912      	bls.n	800330c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	212c      	movs	r1, #44	; 0x2c
 80032ec:	fb01 f303 	mul.w	r3, r1, r3
 80032f0:	4413      	add	r3, r2
 80032f2:	335c      	adds	r3, #92	; 0x5c
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	212c      	movs	r1, #44	; 0x2c
 80032fe:	fb01 f303 	mul.w	r3, r1, r3
 8003302:	4413      	add	r3, r2
 8003304:	3360      	adds	r3, #96	; 0x60
 8003306:	2204      	movs	r2, #4
 8003308:	701a      	strb	r2, [r3, #0]
 800330a:	e021      	b.n	8003350 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	212c      	movs	r1, #44	; 0x2c
 8003312:	fb01 f303 	mul.w	r3, r1, r3
 8003316:	4413      	add	r3, r2
 8003318:	3360      	adds	r3, #96	; 0x60
 800331a:	2202      	movs	r2, #2
 800331c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	015a      	lsls	r2, r3, #5
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	4413      	add	r3, r2
 8003326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003334:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800333c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	015a      	lsls	r2, r3, #5
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	4413      	add	r3, r2
 8003346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800334a:	461a      	mov	r2, r3
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	015a      	lsls	r2, r3, #5
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	4413      	add	r3, r2
 8003358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800335c:	461a      	mov	r2, r3
 800335e:	2302      	movs	r3, #2
 8003360:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	b2d9      	uxtb	r1, r3
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	202c      	movs	r0, #44	; 0x2c
 800336c:	fb00 f303 	mul.w	r3, r0, r3
 8003370:	4413      	add	r3, r2
 8003372:	3360      	adds	r3, #96	; 0x60
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	461a      	mov	r2, r3
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f009 fa8f 	bl	800c89c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800337e:	bf00      	nop
 8003380:	3720      	adds	r7, #32
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b08a      	sub	sp, #40	; 0x28
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003396:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	f003 030f 	and.w	r3, r3, #15
 80033a6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	0c5b      	lsrs	r3, r3, #17
 80033ac:	f003 030f 	and.w	r3, r3, #15
 80033b0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	091b      	lsrs	r3, r3, #4
 80033b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033ba:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d004      	beq.n	80033cc <HCD_RXQLVL_IRQHandler+0x46>
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	2b05      	cmp	r3, #5
 80033c6:	f000 80a9 	beq.w	800351c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80033ca:	e0aa      	b.n	8003522 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 80a6 	beq.w	8003520 <HCD_RXQLVL_IRQHandler+0x19a>
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	212c      	movs	r1, #44	; 0x2c
 80033da:	fb01 f303 	mul.w	r3, r1, r3
 80033de:	4413      	add	r3, r2
 80033e0:	3344      	adds	r3, #68	; 0x44
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f000 809b 	beq.w	8003520 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	212c      	movs	r1, #44	; 0x2c
 80033f0:	fb01 f303 	mul.w	r3, r1, r3
 80033f4:	4413      	add	r3, r2
 80033f6:	3350      	adds	r3, #80	; 0x50
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	441a      	add	r2, r3
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	202c      	movs	r0, #44	; 0x2c
 8003404:	fb00 f303 	mul.w	r3, r0, r3
 8003408:	440b      	add	r3, r1
 800340a:	334c      	adds	r3, #76	; 0x4c
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	429a      	cmp	r2, r3
 8003410:	d87a      	bhi.n	8003508 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6818      	ldr	r0, [r3, #0]
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	212c      	movs	r1, #44	; 0x2c
 800341c:	fb01 f303 	mul.w	r3, r1, r3
 8003420:	4413      	add	r3, r2
 8003422:	3344      	adds	r3, #68	; 0x44
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	b292      	uxth	r2, r2
 800342a:	4619      	mov	r1, r3
 800342c:	f003 fb3e 	bl	8006aac <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	212c      	movs	r1, #44	; 0x2c
 8003436:	fb01 f303 	mul.w	r3, r1, r3
 800343a:	4413      	add	r3, r2
 800343c:	3344      	adds	r3, #68	; 0x44
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	441a      	add	r2, r3
 8003444:	6879      	ldr	r1, [r7, #4]
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	202c      	movs	r0, #44	; 0x2c
 800344a:	fb00 f303 	mul.w	r3, r0, r3
 800344e:	440b      	add	r3, r1
 8003450:	3344      	adds	r3, #68	; 0x44
 8003452:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	212c      	movs	r1, #44	; 0x2c
 800345a:	fb01 f303 	mul.w	r3, r1, r3
 800345e:	4413      	add	r3, r2
 8003460:	3350      	adds	r3, #80	; 0x50
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	441a      	add	r2, r3
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	202c      	movs	r0, #44	; 0x2c
 800346e:	fb00 f303 	mul.w	r3, r0, r3
 8003472:	440b      	add	r3, r1
 8003474:	3350      	adds	r3, #80	; 0x50
 8003476:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	015a      	lsls	r2, r3, #5
 800347c:	6a3b      	ldr	r3, [r7, #32]
 800347e:	4413      	add	r3, r2
 8003480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	0cdb      	lsrs	r3, r3, #19
 8003488:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800348c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	212c      	movs	r1, #44	; 0x2c
 8003494:	fb01 f303 	mul.w	r3, r1, r3
 8003498:	4413      	add	r3, r2
 800349a:	3340      	adds	r3, #64	; 0x40
 800349c:	881b      	ldrh	r3, [r3, #0]
 800349e:	461a      	mov	r2, r3
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d13c      	bne.n	8003520 <HCD_RXQLVL_IRQHandler+0x19a>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d039      	beq.n	8003520 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	015a      	lsls	r2, r3, #5
 80034b0:	6a3b      	ldr	r3, [r7, #32]
 80034b2:	4413      	add	r3, r2
 80034b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80034c2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80034ca:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	015a      	lsls	r2, r3, #5
 80034d0:	6a3b      	ldr	r3, [r7, #32]
 80034d2:	4413      	add	r3, r2
 80034d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034d8:	461a      	mov	r2, r3
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	212c      	movs	r1, #44	; 0x2c
 80034e4:	fb01 f303 	mul.w	r3, r1, r3
 80034e8:	4413      	add	r3, r2
 80034ea:	3354      	adds	r3, #84	; 0x54
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	f083 0301 	eor.w	r3, r3, #1
 80034f2:	b2d8      	uxtb	r0, r3
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	212c      	movs	r1, #44	; 0x2c
 80034fa:	fb01 f303 	mul.w	r3, r1, r3
 80034fe:	4413      	add	r3, r2
 8003500:	3354      	adds	r3, #84	; 0x54
 8003502:	4602      	mov	r2, r0
 8003504:	701a      	strb	r2, [r3, #0]
      break;
 8003506:	e00b      	b.n	8003520 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	212c      	movs	r1, #44	; 0x2c
 800350e:	fb01 f303 	mul.w	r3, r1, r3
 8003512:	4413      	add	r3, r2
 8003514:	3360      	adds	r3, #96	; 0x60
 8003516:	2204      	movs	r2, #4
 8003518:	701a      	strb	r2, [r3, #0]
      break;
 800351a:	e001      	b.n	8003520 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800351c:	bf00      	nop
 800351e:	e000      	b.n	8003522 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003520:	bf00      	nop
  }
}
 8003522:	bf00      	nop
 8003524:	3728      	adds	r7, #40	; 0x28
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b086      	sub	sp, #24
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003556:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b02      	cmp	r3, #2
 8003560:	d10b      	bne.n	800357a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b01      	cmp	r3, #1
 800356a:	d102      	bne.n	8003572 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f009 f979 	bl	800c864 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	f043 0302 	orr.w	r3, r3, #2
 8003578:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f003 0308 	and.w	r3, r3, #8
 8003580:	2b08      	cmp	r3, #8
 8003582:	d132      	bne.n	80035ea <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	f043 0308 	orr.w	r3, r3, #8
 800358a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f003 0304 	and.w	r3, r3, #4
 8003592:	2b04      	cmp	r3, #4
 8003594:	d126      	bne.n	80035e4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	2b02      	cmp	r3, #2
 800359c:	d113      	bne.n	80035c6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80035a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035a8:	d106      	bne.n	80035b8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2102      	movs	r1, #2
 80035b0:	4618      	mov	r0, r3
 80035b2:	f003 fbe9 	bl	8006d88 <USB_InitFSLSPClkSel>
 80035b6:	e011      	b.n	80035dc <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2101      	movs	r1, #1
 80035be:	4618      	mov	r0, r3
 80035c0:	f003 fbe2 	bl	8006d88 <USB_InitFSLSPClkSel>
 80035c4:	e00a      	b.n	80035dc <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d106      	bne.n	80035dc <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035d4:	461a      	mov	r2, r3
 80035d6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80035da:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f009 f96f 	bl	800c8c0 <HAL_HCD_PortEnabled_Callback>
 80035e2:	e002      	b.n	80035ea <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f009 f979 	bl	800c8dc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f003 0320 	and.w	r3, r3, #32
 80035f0:	2b20      	cmp	r3, #32
 80035f2:	d103      	bne.n	80035fc <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	f043 0320 	orr.w	r3, r3, #32
 80035fa:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003602:	461a      	mov	r2, r3
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	6013      	str	r3, [r2, #0]
}
 8003608:	bf00      	nop
 800360a:	3718      	adds	r7, #24
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003626:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f003 0304 	and.w	r3, r3, #4
 800362e:	2b00      	cmp	r3, #0
 8003630:	d023      	beq.n	800367a <HAL_LTDC_IRQHandler+0x6a>
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	2b00      	cmp	r3, #0
 800363a:	d01e      	beq.n	800367a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0204 	bic.w	r2, r2, #4
 800364a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2204      	movs	r2, #4
 8003652:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800365a:	f043 0201 	orr.w	r2, r3, #1
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2204      	movs	r2, #4
 8003668:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 f86f 	bl	8003758 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d023      	beq.n	80036cc <HAL_LTDC_IRQHandler+0xbc>
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d01e      	beq.n	80036cc <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 0202 	bic.w	r2, r2, #2
 800369c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2202      	movs	r2, #2
 80036a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80036ac:	f043 0202 	orr.w	r2, r3, #2
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2204      	movs	r2, #4
 80036ba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f846 	bl	8003758 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d01b      	beq.n	800370e <HAL_LTDC_IRQHandler+0xfe>
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d016      	beq.n	800370e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f022 0201 	bic.w	r2, r2, #1
 80036ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2201      	movs	r2, #1
 80036f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 f82f 	bl	800376c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f003 0308 	and.w	r3, r3, #8
 8003714:	2b00      	cmp	r3, #0
 8003716:	d01b      	beq.n	8003750 <HAL_LTDC_IRQHandler+0x140>
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	f003 0308 	and.w	r3, r3, #8
 800371e:	2b00      	cmp	r3, #0
 8003720:	d016      	beq.n	8003750 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0208 	bic.w	r2, r2, #8
 8003730:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2208      	movs	r2, #8
 8003738:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f818 	bl	8003780 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8003750:	bf00      	nop
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e267      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d075      	beq.n	800389e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037b2:	4b88      	ldr	r3, [pc, #544]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 030c 	and.w	r3, r3, #12
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	d00c      	beq.n	80037d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037be:	4b85      	ldr	r3, [pc, #532]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037c6:	2b08      	cmp	r3, #8
 80037c8:	d112      	bne.n	80037f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037ca:	4b82      	ldr	r3, [pc, #520]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037d6:	d10b      	bne.n	80037f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037d8:	4b7e      	ldr	r3, [pc, #504]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d05b      	beq.n	800389c <HAL_RCC_OscConfig+0x108>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d157      	bne.n	800389c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e242      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037f8:	d106      	bne.n	8003808 <HAL_RCC_OscConfig+0x74>
 80037fa:	4b76      	ldr	r3, [pc, #472]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a75      	ldr	r2, [pc, #468]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 8003800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003804:	6013      	str	r3, [r2, #0]
 8003806:	e01d      	b.n	8003844 <HAL_RCC_OscConfig+0xb0>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003810:	d10c      	bne.n	800382c <HAL_RCC_OscConfig+0x98>
 8003812:	4b70      	ldr	r3, [pc, #448]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a6f      	ldr	r2, [pc, #444]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 8003818:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800381c:	6013      	str	r3, [r2, #0]
 800381e:	4b6d      	ldr	r3, [pc, #436]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a6c      	ldr	r2, [pc, #432]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 8003824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003828:	6013      	str	r3, [r2, #0]
 800382a:	e00b      	b.n	8003844 <HAL_RCC_OscConfig+0xb0>
 800382c:	4b69      	ldr	r3, [pc, #420]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a68      	ldr	r2, [pc, #416]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 8003832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003836:	6013      	str	r3, [r2, #0]
 8003838:	4b66      	ldr	r3, [pc, #408]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a65      	ldr	r2, [pc, #404]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 800383e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003842:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d013      	beq.n	8003874 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800384c:	f7fd fe42 	bl	80014d4 <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003854:	f7fd fe3e 	bl	80014d4 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b64      	cmp	r3, #100	; 0x64
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e207      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003866:	4b5b      	ldr	r3, [pc, #364]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0f0      	beq.n	8003854 <HAL_RCC_OscConfig+0xc0>
 8003872:	e014      	b.n	800389e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003874:	f7fd fe2e 	bl	80014d4 <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800387c:	f7fd fe2a 	bl	80014d4 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b64      	cmp	r3, #100	; 0x64
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e1f3      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800388e:	4b51      	ldr	r3, [pc, #324]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1f0      	bne.n	800387c <HAL_RCC_OscConfig+0xe8>
 800389a:	e000      	b.n	800389e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800389c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d063      	beq.n	8003972 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038aa:	4b4a      	ldr	r3, [pc, #296]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 030c 	and.w	r3, r3, #12
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00b      	beq.n	80038ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038b6:	4b47      	ldr	r3, [pc, #284]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038be:	2b08      	cmp	r3, #8
 80038c0:	d11c      	bne.n	80038fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038c2:	4b44      	ldr	r3, [pc, #272]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d116      	bne.n	80038fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ce:	4b41      	ldr	r3, [pc, #260]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d005      	beq.n	80038e6 <HAL_RCC_OscConfig+0x152>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d001      	beq.n	80038e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e1c7      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038e6:	4b3b      	ldr	r3, [pc, #236]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	4937      	ldr	r1, [pc, #220]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038fa:	e03a      	b.n	8003972 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d020      	beq.n	8003946 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003904:	4b34      	ldr	r3, [pc, #208]	; (80039d8 <HAL_RCC_OscConfig+0x244>)
 8003906:	2201      	movs	r2, #1
 8003908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800390a:	f7fd fde3 	bl	80014d4 <HAL_GetTick>
 800390e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003910:	e008      	b.n	8003924 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003912:	f7fd fddf 	bl	80014d4 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d901      	bls.n	8003924 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e1a8      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003924:	4b2b      	ldr	r3, [pc, #172]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0f0      	beq.n	8003912 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003930:	4b28      	ldr	r3, [pc, #160]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	4925      	ldr	r1, [pc, #148]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 8003940:	4313      	orrs	r3, r2
 8003942:	600b      	str	r3, [r1, #0]
 8003944:	e015      	b.n	8003972 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003946:	4b24      	ldr	r3, [pc, #144]	; (80039d8 <HAL_RCC_OscConfig+0x244>)
 8003948:	2200      	movs	r2, #0
 800394a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800394c:	f7fd fdc2 	bl	80014d4 <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003952:	e008      	b.n	8003966 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003954:	f7fd fdbe 	bl	80014d4 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e187      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003966:	4b1b      	ldr	r3, [pc, #108]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1f0      	bne.n	8003954 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0308 	and.w	r3, r3, #8
 800397a:	2b00      	cmp	r3, #0
 800397c:	d036      	beq.n	80039ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d016      	beq.n	80039b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003986:	4b15      	ldr	r3, [pc, #84]	; (80039dc <HAL_RCC_OscConfig+0x248>)
 8003988:	2201      	movs	r2, #1
 800398a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398c:	f7fd fda2 	bl	80014d4 <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003994:	f7fd fd9e 	bl	80014d4 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e167      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039a6:	4b0b      	ldr	r3, [pc, #44]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 80039a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d0f0      	beq.n	8003994 <HAL_RCC_OscConfig+0x200>
 80039b2:	e01b      	b.n	80039ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039b4:	4b09      	ldr	r3, [pc, #36]	; (80039dc <HAL_RCC_OscConfig+0x248>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ba:	f7fd fd8b 	bl	80014d4 <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039c0:	e00e      	b.n	80039e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039c2:	f7fd fd87 	bl	80014d4 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d907      	bls.n	80039e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e150      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
 80039d4:	40023800 	.word	0x40023800
 80039d8:	42470000 	.word	0x42470000
 80039dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039e0:	4b88      	ldr	r3, [pc, #544]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 80039e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1ea      	bne.n	80039c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 8097 	beq.w	8003b28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039fa:	2300      	movs	r3, #0
 80039fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039fe:	4b81      	ldr	r3, [pc, #516]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10f      	bne.n	8003a2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	60bb      	str	r3, [r7, #8]
 8003a0e:	4b7d      	ldr	r3, [pc, #500]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	4a7c      	ldr	r2, [pc, #496]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a18:	6413      	str	r3, [r2, #64]	; 0x40
 8003a1a:	4b7a      	ldr	r3, [pc, #488]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a22:	60bb      	str	r3, [r7, #8]
 8003a24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a26:	2301      	movs	r3, #1
 8003a28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2a:	4b77      	ldr	r3, [pc, #476]	; (8003c08 <HAL_RCC_OscConfig+0x474>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d118      	bne.n	8003a68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a36:	4b74      	ldr	r3, [pc, #464]	; (8003c08 <HAL_RCC_OscConfig+0x474>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a73      	ldr	r2, [pc, #460]	; (8003c08 <HAL_RCC_OscConfig+0x474>)
 8003a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a42:	f7fd fd47 	bl	80014d4 <HAL_GetTick>
 8003a46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a48:	e008      	b.n	8003a5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a4a:	f7fd fd43 	bl	80014d4 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e10c      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a5c:	4b6a      	ldr	r3, [pc, #424]	; (8003c08 <HAL_RCC_OscConfig+0x474>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0f0      	beq.n	8003a4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d106      	bne.n	8003a7e <HAL_RCC_OscConfig+0x2ea>
 8003a70:	4b64      	ldr	r3, [pc, #400]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a74:	4a63      	ldr	r2, [pc, #396]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003a76:	f043 0301 	orr.w	r3, r3, #1
 8003a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a7c:	e01c      	b.n	8003ab8 <HAL_RCC_OscConfig+0x324>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	2b05      	cmp	r3, #5
 8003a84:	d10c      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x30c>
 8003a86:	4b5f      	ldr	r3, [pc, #380]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8a:	4a5e      	ldr	r2, [pc, #376]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003a8c:	f043 0304 	orr.w	r3, r3, #4
 8003a90:	6713      	str	r3, [r2, #112]	; 0x70
 8003a92:	4b5c      	ldr	r3, [pc, #368]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a96:	4a5b      	ldr	r2, [pc, #364]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003a98:	f043 0301 	orr.w	r3, r3, #1
 8003a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a9e:	e00b      	b.n	8003ab8 <HAL_RCC_OscConfig+0x324>
 8003aa0:	4b58      	ldr	r3, [pc, #352]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa4:	4a57      	ldr	r2, [pc, #348]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003aa6:	f023 0301 	bic.w	r3, r3, #1
 8003aaa:	6713      	str	r3, [r2, #112]	; 0x70
 8003aac:	4b55      	ldr	r3, [pc, #340]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab0:	4a54      	ldr	r2, [pc, #336]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003ab2:	f023 0304 	bic.w	r3, r3, #4
 8003ab6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d015      	beq.n	8003aec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac0:	f7fd fd08 	bl	80014d4 <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac6:	e00a      	b.n	8003ade <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ac8:	f7fd fd04 	bl	80014d4 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e0cb      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ade:	4b49      	ldr	r3, [pc, #292]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0ee      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x334>
 8003aea:	e014      	b.n	8003b16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aec:	f7fd fcf2 	bl	80014d4 <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003af2:	e00a      	b.n	8003b0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003af4:	f7fd fcee 	bl	80014d4 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e0b5      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b0a:	4b3e      	ldr	r3, [pc, #248]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1ee      	bne.n	8003af4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b16:	7dfb      	ldrb	r3, [r7, #23]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d105      	bne.n	8003b28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b1c:	4b39      	ldr	r3, [pc, #228]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b20:	4a38      	ldr	r2, [pc, #224]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003b22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 80a1 	beq.w	8003c74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b32:	4b34      	ldr	r3, [pc, #208]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 030c 	and.w	r3, r3, #12
 8003b3a:	2b08      	cmp	r3, #8
 8003b3c:	d05c      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d141      	bne.n	8003bca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b46:	4b31      	ldr	r3, [pc, #196]	; (8003c0c <HAL_RCC_OscConfig+0x478>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b4c:	f7fd fcc2 	bl	80014d4 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b54:	f7fd fcbe 	bl	80014d4 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e087      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b66:	4b27      	ldr	r3, [pc, #156]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1f0      	bne.n	8003b54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	69da      	ldr	r2, [r3, #28]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	019b      	lsls	r3, r3, #6
 8003b82:	431a      	orrs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b88:	085b      	lsrs	r3, r3, #1
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	041b      	lsls	r3, r3, #16
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b94:	061b      	lsls	r3, r3, #24
 8003b96:	491b      	ldr	r1, [pc, #108]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b9c:	4b1b      	ldr	r3, [pc, #108]	; (8003c0c <HAL_RCC_OscConfig+0x478>)
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba2:	f7fd fc97 	bl	80014d4 <HAL_GetTick>
 8003ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ba8:	e008      	b.n	8003bbc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003baa:	f7fd fc93 	bl	80014d4 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e05c      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bbc:	4b11      	ldr	r3, [pc, #68]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d0f0      	beq.n	8003baa <HAL_RCC_OscConfig+0x416>
 8003bc8:	e054      	b.n	8003c74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bca:	4b10      	ldr	r3, [pc, #64]	; (8003c0c <HAL_RCC_OscConfig+0x478>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd0:	f7fd fc80 	bl	80014d4 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bd8:	f7fd fc7c 	bl	80014d4 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e045      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bea:	4b06      	ldr	r3, [pc, #24]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1f0      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x444>
 8003bf6:	e03d      	b.n	8003c74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d107      	bne.n	8003c10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e038      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
 8003c04:	40023800 	.word	0x40023800
 8003c08:	40007000 	.word	0x40007000
 8003c0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c10:	4b1b      	ldr	r3, [pc, #108]	; (8003c80 <HAL_RCC_OscConfig+0x4ec>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d028      	beq.n	8003c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d121      	bne.n	8003c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d11a      	bne.n	8003c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c40:	4013      	ands	r3, r2
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d111      	bne.n	8003c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c56:	085b      	lsrs	r3, r3, #1
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d107      	bne.n	8003c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d001      	beq.n	8003c74 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e000      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3718      	adds	r7, #24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40023800 	.word	0x40023800

08003c84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e0cc      	b.n	8003e32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c98:	4b68      	ldr	r3, [pc, #416]	; (8003e3c <HAL_RCC_ClockConfig+0x1b8>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 030f 	and.w	r3, r3, #15
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d90c      	bls.n	8003cc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ca6:	4b65      	ldr	r3, [pc, #404]	; (8003e3c <HAL_RCC_ClockConfig+0x1b8>)
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	b2d2      	uxtb	r2, r2
 8003cac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cae:	4b63      	ldr	r3, [pc, #396]	; (8003e3c <HAL_RCC_ClockConfig+0x1b8>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 030f 	and.w	r3, r3, #15
 8003cb6:	683a      	ldr	r2, [r7, #0]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d001      	beq.n	8003cc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e0b8      	b.n	8003e32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d020      	beq.n	8003d0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d005      	beq.n	8003ce4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cd8:	4b59      	ldr	r3, [pc, #356]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	4a58      	ldr	r2, [pc, #352]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003cde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ce2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0308 	and.w	r3, r3, #8
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d005      	beq.n	8003cfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cf0:	4b53      	ldr	r3, [pc, #332]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	4a52      	ldr	r2, [pc, #328]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cfc:	4b50      	ldr	r3, [pc, #320]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	494d      	ldr	r1, [pc, #308]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d044      	beq.n	8003da4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d107      	bne.n	8003d32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d22:	4b47      	ldr	r3, [pc, #284]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d119      	bne.n	8003d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e07f      	b.n	8003e32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d003      	beq.n	8003d42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d3e:	2b03      	cmp	r3, #3
 8003d40:	d107      	bne.n	8003d52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d42:	4b3f      	ldr	r3, [pc, #252]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d109      	bne.n	8003d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e06f      	b.n	8003e32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d52:	4b3b      	ldr	r3, [pc, #236]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e067      	b.n	8003e32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d62:	4b37      	ldr	r3, [pc, #220]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f023 0203 	bic.w	r2, r3, #3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	4934      	ldr	r1, [pc, #208]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d74:	f7fd fbae 	bl	80014d4 <HAL_GetTick>
 8003d78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d7a:	e00a      	b.n	8003d92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d7c:	f7fd fbaa 	bl	80014d4 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e04f      	b.n	8003e32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d92:	4b2b      	ldr	r3, [pc, #172]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f003 020c 	and.w	r2, r3, #12
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d1eb      	bne.n	8003d7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003da4:	4b25      	ldr	r3, [pc, #148]	; (8003e3c <HAL_RCC_ClockConfig+0x1b8>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 030f 	and.w	r3, r3, #15
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d20c      	bcs.n	8003dcc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003db2:	4b22      	ldr	r3, [pc, #136]	; (8003e3c <HAL_RCC_ClockConfig+0x1b8>)
 8003db4:	683a      	ldr	r2, [r7, #0]
 8003db6:	b2d2      	uxtb	r2, r2
 8003db8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dba:	4b20      	ldr	r3, [pc, #128]	; (8003e3c <HAL_RCC_ClockConfig+0x1b8>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 030f 	and.w	r3, r3, #15
 8003dc2:	683a      	ldr	r2, [r7, #0]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d001      	beq.n	8003dcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e032      	b.n	8003e32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d008      	beq.n	8003dea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dd8:	4b19      	ldr	r3, [pc, #100]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	4916      	ldr	r1, [pc, #88]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0308 	and.w	r3, r3, #8
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d009      	beq.n	8003e0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003df6:	4b12      	ldr	r3, [pc, #72]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	490e      	ldr	r1, [pc, #56]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e0a:	f000 f821 	bl	8003e50 <HAL_RCC_GetSysClockFreq>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	4b0b      	ldr	r3, [pc, #44]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	091b      	lsrs	r3, r3, #4
 8003e16:	f003 030f 	and.w	r3, r3, #15
 8003e1a:	490a      	ldr	r1, [pc, #40]	; (8003e44 <HAL_RCC_ClockConfig+0x1c0>)
 8003e1c:	5ccb      	ldrb	r3, [r1, r3]
 8003e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e22:	4a09      	ldr	r2, [pc, #36]	; (8003e48 <HAL_RCC_ClockConfig+0x1c4>)
 8003e24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e26:	4b09      	ldr	r3, [pc, #36]	; (8003e4c <HAL_RCC_ClockConfig+0x1c8>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7fd f982 	bl	8001134 <HAL_InitTick>

  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	40023c00 	.word	0x40023c00
 8003e40:	40023800 	.word	0x40023800
 8003e44:	0800de24 	.word	0x0800de24
 8003e48:	20000000 	.word	0x20000000
 8003e4c:	20000004 	.word	0x20000004

08003e50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e54:	b094      	sub	sp, #80	; 0x50
 8003e56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	647b      	str	r3, [r7, #68]	; 0x44
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e60:	2300      	movs	r3, #0
 8003e62:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003e64:	2300      	movs	r3, #0
 8003e66:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e68:	4b79      	ldr	r3, [pc, #484]	; (8004050 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f003 030c 	and.w	r3, r3, #12
 8003e70:	2b08      	cmp	r3, #8
 8003e72:	d00d      	beq.n	8003e90 <HAL_RCC_GetSysClockFreq+0x40>
 8003e74:	2b08      	cmp	r3, #8
 8003e76:	f200 80e1 	bhi.w	800403c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d002      	beq.n	8003e84 <HAL_RCC_GetSysClockFreq+0x34>
 8003e7e:	2b04      	cmp	r3, #4
 8003e80:	d003      	beq.n	8003e8a <HAL_RCC_GetSysClockFreq+0x3a>
 8003e82:	e0db      	b.n	800403c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e84:	4b73      	ldr	r3, [pc, #460]	; (8004054 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e86:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003e88:	e0db      	b.n	8004042 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e8a:	4b73      	ldr	r3, [pc, #460]	; (8004058 <HAL_RCC_GetSysClockFreq+0x208>)
 8003e8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e8e:	e0d8      	b.n	8004042 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e90:	4b6f      	ldr	r3, [pc, #444]	; (8004050 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e98:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e9a:	4b6d      	ldr	r3, [pc, #436]	; (8004050 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d063      	beq.n	8003f6e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ea6:	4b6a      	ldr	r3, [pc, #424]	; (8004050 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	099b      	lsrs	r3, r3, #6
 8003eac:	2200      	movs	r2, #0
 8003eae:	63bb      	str	r3, [r7, #56]	; 0x38
 8003eb0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eb8:	633b      	str	r3, [r7, #48]	; 0x30
 8003eba:	2300      	movs	r3, #0
 8003ebc:	637b      	str	r3, [r7, #52]	; 0x34
 8003ebe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003ec2:	4622      	mov	r2, r4
 8003ec4:	462b      	mov	r3, r5
 8003ec6:	f04f 0000 	mov.w	r0, #0
 8003eca:	f04f 0100 	mov.w	r1, #0
 8003ece:	0159      	lsls	r1, r3, #5
 8003ed0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ed4:	0150      	lsls	r0, r2, #5
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	460b      	mov	r3, r1
 8003eda:	4621      	mov	r1, r4
 8003edc:	1a51      	subs	r1, r2, r1
 8003ede:	6139      	str	r1, [r7, #16]
 8003ee0:	4629      	mov	r1, r5
 8003ee2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ee6:	617b      	str	r3, [r7, #20]
 8003ee8:	f04f 0200 	mov.w	r2, #0
 8003eec:	f04f 0300 	mov.w	r3, #0
 8003ef0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ef4:	4659      	mov	r1, fp
 8003ef6:	018b      	lsls	r3, r1, #6
 8003ef8:	4651      	mov	r1, sl
 8003efa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003efe:	4651      	mov	r1, sl
 8003f00:	018a      	lsls	r2, r1, #6
 8003f02:	4651      	mov	r1, sl
 8003f04:	ebb2 0801 	subs.w	r8, r2, r1
 8003f08:	4659      	mov	r1, fp
 8003f0a:	eb63 0901 	sbc.w	r9, r3, r1
 8003f0e:	f04f 0200 	mov.w	r2, #0
 8003f12:	f04f 0300 	mov.w	r3, #0
 8003f16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f22:	4690      	mov	r8, r2
 8003f24:	4699      	mov	r9, r3
 8003f26:	4623      	mov	r3, r4
 8003f28:	eb18 0303 	adds.w	r3, r8, r3
 8003f2c:	60bb      	str	r3, [r7, #8]
 8003f2e:	462b      	mov	r3, r5
 8003f30:	eb49 0303 	adc.w	r3, r9, r3
 8003f34:	60fb      	str	r3, [r7, #12]
 8003f36:	f04f 0200 	mov.w	r2, #0
 8003f3a:	f04f 0300 	mov.w	r3, #0
 8003f3e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f42:	4629      	mov	r1, r5
 8003f44:	024b      	lsls	r3, r1, #9
 8003f46:	4621      	mov	r1, r4
 8003f48:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f4c:	4621      	mov	r1, r4
 8003f4e:	024a      	lsls	r2, r1, #9
 8003f50:	4610      	mov	r0, r2
 8003f52:	4619      	mov	r1, r3
 8003f54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f56:	2200      	movs	r2, #0
 8003f58:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f60:	f7fc f996 	bl	8000290 <__aeabi_uldivmod>
 8003f64:	4602      	mov	r2, r0
 8003f66:	460b      	mov	r3, r1
 8003f68:	4613      	mov	r3, r2
 8003f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f6c:	e058      	b.n	8004020 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f6e:	4b38      	ldr	r3, [pc, #224]	; (8004050 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	099b      	lsrs	r3, r3, #6
 8003f74:	2200      	movs	r2, #0
 8003f76:	4618      	mov	r0, r3
 8003f78:	4611      	mov	r1, r2
 8003f7a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f7e:	623b      	str	r3, [r7, #32]
 8003f80:	2300      	movs	r3, #0
 8003f82:	627b      	str	r3, [r7, #36]	; 0x24
 8003f84:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f88:	4642      	mov	r2, r8
 8003f8a:	464b      	mov	r3, r9
 8003f8c:	f04f 0000 	mov.w	r0, #0
 8003f90:	f04f 0100 	mov.w	r1, #0
 8003f94:	0159      	lsls	r1, r3, #5
 8003f96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f9a:	0150      	lsls	r0, r2, #5
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	4641      	mov	r1, r8
 8003fa2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003fa6:	4649      	mov	r1, r9
 8003fa8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fac:	f04f 0200 	mov.w	r2, #0
 8003fb0:	f04f 0300 	mov.w	r3, #0
 8003fb4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003fb8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003fbc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003fc0:	ebb2 040a 	subs.w	r4, r2, sl
 8003fc4:	eb63 050b 	sbc.w	r5, r3, fp
 8003fc8:	f04f 0200 	mov.w	r2, #0
 8003fcc:	f04f 0300 	mov.w	r3, #0
 8003fd0:	00eb      	lsls	r3, r5, #3
 8003fd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fd6:	00e2      	lsls	r2, r4, #3
 8003fd8:	4614      	mov	r4, r2
 8003fda:	461d      	mov	r5, r3
 8003fdc:	4643      	mov	r3, r8
 8003fde:	18e3      	adds	r3, r4, r3
 8003fe0:	603b      	str	r3, [r7, #0]
 8003fe2:	464b      	mov	r3, r9
 8003fe4:	eb45 0303 	adc.w	r3, r5, r3
 8003fe8:	607b      	str	r3, [r7, #4]
 8003fea:	f04f 0200 	mov.w	r2, #0
 8003fee:	f04f 0300 	mov.w	r3, #0
 8003ff2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ff6:	4629      	mov	r1, r5
 8003ff8:	028b      	lsls	r3, r1, #10
 8003ffa:	4621      	mov	r1, r4
 8003ffc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004000:	4621      	mov	r1, r4
 8004002:	028a      	lsls	r2, r1, #10
 8004004:	4610      	mov	r0, r2
 8004006:	4619      	mov	r1, r3
 8004008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800400a:	2200      	movs	r2, #0
 800400c:	61bb      	str	r3, [r7, #24]
 800400e:	61fa      	str	r2, [r7, #28]
 8004010:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004014:	f7fc f93c 	bl	8000290 <__aeabi_uldivmod>
 8004018:	4602      	mov	r2, r0
 800401a:	460b      	mov	r3, r1
 800401c:	4613      	mov	r3, r2
 800401e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004020:	4b0b      	ldr	r3, [pc, #44]	; (8004050 <HAL_RCC_GetSysClockFreq+0x200>)
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	0c1b      	lsrs	r3, r3, #16
 8004026:	f003 0303 	and.w	r3, r3, #3
 800402a:	3301      	adds	r3, #1
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004030:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004034:	fbb2 f3f3 	udiv	r3, r2, r3
 8004038:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800403a:	e002      	b.n	8004042 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800403c:	4b05      	ldr	r3, [pc, #20]	; (8004054 <HAL_RCC_GetSysClockFreq+0x204>)
 800403e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004040:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004042:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004044:	4618      	mov	r0, r3
 8004046:	3750      	adds	r7, #80	; 0x50
 8004048:	46bd      	mov	sp, r7
 800404a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800404e:	bf00      	nop
 8004050:	40023800 	.word	0x40023800
 8004054:	00f42400 	.word	0x00f42400
 8004058:	007a1200 	.word	0x007a1200

0800405c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004060:	4b03      	ldr	r3, [pc, #12]	; (8004070 <HAL_RCC_GetHCLKFreq+0x14>)
 8004062:	681b      	ldr	r3, [r3, #0]
}
 8004064:	4618      	mov	r0, r3
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	20000000 	.word	0x20000000

08004074 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004078:	f7ff fff0 	bl	800405c <HAL_RCC_GetHCLKFreq>
 800407c:	4602      	mov	r2, r0
 800407e:	4b05      	ldr	r3, [pc, #20]	; (8004094 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	0a9b      	lsrs	r3, r3, #10
 8004084:	f003 0307 	and.w	r3, r3, #7
 8004088:	4903      	ldr	r1, [pc, #12]	; (8004098 <HAL_RCC_GetPCLK1Freq+0x24>)
 800408a:	5ccb      	ldrb	r3, [r1, r3]
 800408c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004090:	4618      	mov	r0, r3
 8004092:	bd80      	pop	{r7, pc}
 8004094:	40023800 	.word	0x40023800
 8004098:	0800de34 	.word	0x0800de34

0800409c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80040a0:	f7ff ffdc 	bl	800405c <HAL_RCC_GetHCLKFreq>
 80040a4:	4602      	mov	r2, r0
 80040a6:	4b05      	ldr	r3, [pc, #20]	; (80040bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	0b5b      	lsrs	r3, r3, #13
 80040ac:	f003 0307 	and.w	r3, r3, #7
 80040b0:	4903      	ldr	r1, [pc, #12]	; (80040c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040b2:	5ccb      	ldrb	r3, [r1, r3]
 80040b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	40023800 	.word	0x40023800
 80040c0:	0800de34 	.word	0x0800de34

080040c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	220f      	movs	r2, #15
 80040d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80040d4:	4b12      	ldr	r3, [pc, #72]	; (8004120 <HAL_RCC_GetClockConfig+0x5c>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f003 0203 	and.w	r2, r3, #3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80040e0:	4b0f      	ldr	r3, [pc, #60]	; (8004120 <HAL_RCC_GetClockConfig+0x5c>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80040ec:	4b0c      	ldr	r3, [pc, #48]	; (8004120 <HAL_RCC_GetClockConfig+0x5c>)
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80040f8:	4b09      	ldr	r3, [pc, #36]	; (8004120 <HAL_RCC_GetClockConfig+0x5c>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	08db      	lsrs	r3, r3, #3
 80040fe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004106:	4b07      	ldr	r3, [pc, #28]	; (8004124 <HAL_RCC_GetClockConfig+0x60>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 020f 	and.w	r2, r3, #15
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	601a      	str	r2, [r3, #0]
}
 8004112:	bf00      	nop
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	40023800 	.word	0x40023800
 8004124:	40023c00 	.word	0x40023c00

08004128 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e07b      	b.n	8004232 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	2b00      	cmp	r3, #0
 8004140:	d108      	bne.n	8004154 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800414a:	d009      	beq.n	8004160 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	61da      	str	r2, [r3, #28]
 8004152:	e005      	b.n	8004160 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d106      	bne.n	8004180 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7fc ff28 	bl	8000fd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2202      	movs	r2, #2
 8004184:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004196:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80041a8:	431a      	orrs	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041b2:	431a      	orrs	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	431a      	orrs	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	431a      	orrs	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041d0:	431a      	orrs	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041da:	431a      	orrs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e4:	ea42 0103 	orr.w	r1, r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	0c1b      	lsrs	r3, r3, #16
 80041fe:	f003 0104 	and.w	r1, r3, #4
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004206:	f003 0210 	and.w	r2, r3, #16
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	69da      	ldr	r2, [r3, #28]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004220:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3708      	adds	r7, #8
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b088      	sub	sp, #32
 800423e:	af00      	add	r7, sp, #0
 8004240:	60f8      	str	r0, [r7, #12]
 8004242:	60b9      	str	r1, [r7, #8]
 8004244:	603b      	str	r3, [r7, #0]
 8004246:	4613      	mov	r3, r2
 8004248:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800424a:	2300      	movs	r3, #0
 800424c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004254:	2b01      	cmp	r3, #1
 8004256:	d101      	bne.n	800425c <HAL_SPI_Transmit+0x22>
 8004258:	2302      	movs	r3, #2
 800425a:	e126      	b.n	80044aa <HAL_SPI_Transmit+0x270>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004264:	f7fd f936 	bl	80014d4 <HAL_GetTick>
 8004268:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800426a:	88fb      	ldrh	r3, [r7, #6]
 800426c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b01      	cmp	r3, #1
 8004278:	d002      	beq.n	8004280 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800427a:	2302      	movs	r3, #2
 800427c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800427e:	e10b      	b.n	8004498 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d002      	beq.n	800428c <HAL_SPI_Transmit+0x52>
 8004286:	88fb      	ldrh	r3, [r7, #6]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d102      	bne.n	8004292 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004290:	e102      	b.n	8004498 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2203      	movs	r2, #3
 8004296:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	68ba      	ldr	r2, [r7, #8]
 80042a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	88fa      	ldrh	r2, [r7, #6]
 80042aa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	88fa      	ldrh	r2, [r7, #6]
 80042b0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042d8:	d10f      	bne.n	80042fa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004304:	2b40      	cmp	r3, #64	; 0x40
 8004306:	d007      	beq.n	8004318 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004316:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004320:	d14b      	bne.n	80043ba <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d002      	beq.n	8004330 <HAL_SPI_Transmit+0xf6>
 800432a:	8afb      	ldrh	r3, [r7, #22]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d13e      	bne.n	80043ae <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004334:	881a      	ldrh	r2, [r3, #0]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004340:	1c9a      	adds	r2, r3, #2
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800434a:	b29b      	uxth	r3, r3
 800434c:	3b01      	subs	r3, #1
 800434e:	b29a      	uxth	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004354:	e02b      	b.n	80043ae <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	2b02      	cmp	r3, #2
 8004362:	d112      	bne.n	800438a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004368:	881a      	ldrh	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004374:	1c9a      	adds	r2, r3, #2
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800437e:	b29b      	uxth	r3, r3
 8004380:	3b01      	subs	r3, #1
 8004382:	b29a      	uxth	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	86da      	strh	r2, [r3, #54]	; 0x36
 8004388:	e011      	b.n	80043ae <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800438a:	f7fd f8a3 	bl	80014d4 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	429a      	cmp	r2, r3
 8004398:	d803      	bhi.n	80043a2 <HAL_SPI_Transmit+0x168>
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043a0:	d102      	bne.n	80043a8 <HAL_SPI_Transmit+0x16e>
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d102      	bne.n	80043ae <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80043ac:	e074      	b.n	8004498 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1ce      	bne.n	8004356 <HAL_SPI_Transmit+0x11c>
 80043b8:	e04c      	b.n	8004454 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d002      	beq.n	80043c8 <HAL_SPI_Transmit+0x18e>
 80043c2:	8afb      	ldrh	r3, [r7, #22]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d140      	bne.n	800444a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	330c      	adds	r3, #12
 80043d2:	7812      	ldrb	r2, [r2, #0]
 80043d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043da:	1c5a      	adds	r2, r3, #1
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	3b01      	subs	r3, #1
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80043ee:	e02c      	b.n	800444a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d113      	bne.n	8004426 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	330c      	adds	r3, #12
 8004408:	7812      	ldrb	r2, [r2, #0]
 800440a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004410:	1c5a      	adds	r2, r3, #1
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800441a:	b29b      	uxth	r3, r3
 800441c:	3b01      	subs	r3, #1
 800441e:	b29a      	uxth	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	86da      	strh	r2, [r3, #54]	; 0x36
 8004424:	e011      	b.n	800444a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004426:	f7fd f855 	bl	80014d4 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	429a      	cmp	r2, r3
 8004434:	d803      	bhi.n	800443e <HAL_SPI_Transmit+0x204>
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800443c:	d102      	bne.n	8004444 <HAL_SPI_Transmit+0x20a>
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d102      	bne.n	800444a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004448:	e026      	b.n	8004498 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800444e:	b29b      	uxth	r3, r3
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1cd      	bne.n	80043f0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004454:	69ba      	ldr	r2, [r7, #24]
 8004456:	6839      	ldr	r1, [r7, #0]
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 fcdd 	bl	8004e18 <SPI_EndRxTxTransaction>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d002      	beq.n	800446a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2220      	movs	r2, #32
 8004468:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10a      	bne.n	8004488 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004472:	2300      	movs	r3, #0
 8004474:	613b      	str	r3, [r7, #16]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	613b      	str	r3, [r7, #16]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	613b      	str	r3, [r7, #16]
 8004486:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800448c:	2b00      	cmp	r3, #0
 800448e:	d002      	beq.n	8004496 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	77fb      	strb	r3, [r7, #31]
 8004494:	e000      	b.n	8004498 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004496:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80044a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3720      	adds	r7, #32
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b088      	sub	sp, #32
 80044b6:	af02      	add	r7, sp, #8
 80044b8:	60f8      	str	r0, [r7, #12]
 80044ba:	60b9      	str	r1, [r7, #8]
 80044bc:	603b      	str	r3, [r7, #0]
 80044be:	4613      	mov	r3, r2
 80044c0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80044c2:	2300      	movs	r3, #0
 80044c4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044ce:	d112      	bne.n	80044f6 <HAL_SPI_Receive+0x44>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d10e      	bne.n	80044f6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2204      	movs	r2, #4
 80044dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80044e0:	88fa      	ldrh	r2, [r7, #6]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	9300      	str	r3, [sp, #0]
 80044e6:	4613      	mov	r3, r2
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	68b9      	ldr	r1, [r7, #8]
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f000 f8f1 	bl	80046d4 <HAL_SPI_TransmitReceive>
 80044f2:	4603      	mov	r3, r0
 80044f4:	e0ea      	b.n	80046cc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d101      	bne.n	8004504 <HAL_SPI_Receive+0x52>
 8004500:	2302      	movs	r3, #2
 8004502:	e0e3      	b.n	80046cc <HAL_SPI_Receive+0x21a>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800450c:	f7fc ffe2 	bl	80014d4 <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b01      	cmp	r3, #1
 800451c:	d002      	beq.n	8004524 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800451e:	2302      	movs	r3, #2
 8004520:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004522:	e0ca      	b.n	80046ba <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d002      	beq.n	8004530 <HAL_SPI_Receive+0x7e>
 800452a:	88fb      	ldrh	r3, [r7, #6]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d102      	bne.n	8004536 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004534:	e0c1      	b.n	80046ba <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2204      	movs	r2, #4
 800453a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	68ba      	ldr	r2, [r7, #8]
 8004548:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	88fa      	ldrh	r2, [r7, #6]
 800454e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	88fa      	ldrh	r2, [r7, #6]
 8004554:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800457c:	d10f      	bne.n	800459e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800458c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800459c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a8:	2b40      	cmp	r3, #64	; 0x40
 80045aa:	d007      	beq.n	80045bc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045ba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d162      	bne.n	800468a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80045c4:	e02e      	b.n	8004624 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d115      	bne.n	8004600 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f103 020c 	add.w	r2, r3, #12
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e0:	7812      	ldrb	r2, [r2, #0]
 80045e2:	b2d2      	uxtb	r2, r2
 80045e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ea:	1c5a      	adds	r2, r3, #1
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	3b01      	subs	r3, #1
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045fe:	e011      	b.n	8004624 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004600:	f7fc ff68 	bl	80014d4 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	683a      	ldr	r2, [r7, #0]
 800460c:	429a      	cmp	r2, r3
 800460e:	d803      	bhi.n	8004618 <HAL_SPI_Receive+0x166>
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004616:	d102      	bne.n	800461e <HAL_SPI_Receive+0x16c>
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d102      	bne.n	8004624 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004622:	e04a      	b.n	80046ba <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004628:	b29b      	uxth	r3, r3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1cb      	bne.n	80045c6 <HAL_SPI_Receive+0x114>
 800462e:	e031      	b.n	8004694 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b01      	cmp	r3, #1
 800463c:	d113      	bne.n	8004666 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68da      	ldr	r2, [r3, #12]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004648:	b292      	uxth	r2, r2
 800464a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004650:	1c9a      	adds	r2, r3, #2
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800465a:	b29b      	uxth	r3, r3
 800465c:	3b01      	subs	r3, #1
 800465e:	b29a      	uxth	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004664:	e011      	b.n	800468a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004666:	f7fc ff35 	bl	80014d4 <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	683a      	ldr	r2, [r7, #0]
 8004672:	429a      	cmp	r2, r3
 8004674:	d803      	bhi.n	800467e <HAL_SPI_Receive+0x1cc>
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800467c:	d102      	bne.n	8004684 <HAL_SPI_Receive+0x1d2>
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d102      	bne.n	800468a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004688:	e017      	b.n	80046ba <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800468e:	b29b      	uxth	r3, r3
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1cd      	bne.n	8004630 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	6839      	ldr	r1, [r7, #0]
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f000 fb57 	bl	8004d4c <SPI_EndRxTransaction>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d002      	beq.n	80046aa <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2220      	movs	r2, #32
 80046a8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d002      	beq.n	80046b8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	75fb      	strb	r3, [r7, #23]
 80046b6:	e000      	b.n	80046ba <HAL_SPI_Receive+0x208>
  }

error :
 80046b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80046ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3718      	adds	r7, #24
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b08c      	sub	sp, #48	; 0x30
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
 80046e0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80046e2:	2301      	movs	r3, #1
 80046e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80046e6:	2300      	movs	r3, #0
 80046e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d101      	bne.n	80046fa <HAL_SPI_TransmitReceive+0x26>
 80046f6:	2302      	movs	r3, #2
 80046f8:	e18a      	b.n	8004a10 <HAL_SPI_TransmitReceive+0x33c>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004702:	f7fc fee7 	bl	80014d4 <HAL_GetTick>
 8004706:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800470e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004718:	887b      	ldrh	r3, [r7, #2]
 800471a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800471c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004720:	2b01      	cmp	r3, #1
 8004722:	d00f      	beq.n	8004744 <HAL_SPI_TransmitReceive+0x70>
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800472a:	d107      	bne.n	800473c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d103      	bne.n	800473c <HAL_SPI_TransmitReceive+0x68>
 8004734:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004738:	2b04      	cmp	r3, #4
 800473a:	d003      	beq.n	8004744 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800473c:	2302      	movs	r3, #2
 800473e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004742:	e15b      	b.n	80049fc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d005      	beq.n	8004756 <HAL_SPI_TransmitReceive+0x82>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d002      	beq.n	8004756 <HAL_SPI_TransmitReceive+0x82>
 8004750:	887b      	ldrh	r3, [r7, #2]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d103      	bne.n	800475e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800475c:	e14e      	b.n	80049fc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b04      	cmp	r3, #4
 8004768:	d003      	beq.n	8004772 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2205      	movs	r2, #5
 800476e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	887a      	ldrh	r2, [r7, #2]
 8004782:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	887a      	ldrh	r2, [r7, #2]
 8004788:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	887a      	ldrh	r2, [r7, #2]
 8004794:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	887a      	ldrh	r2, [r7, #2]
 800479a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b2:	2b40      	cmp	r3, #64	; 0x40
 80047b4:	d007      	beq.n	80047c6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047ce:	d178      	bne.n	80048c2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d002      	beq.n	80047de <HAL_SPI_TransmitReceive+0x10a>
 80047d8:	8b7b      	ldrh	r3, [r7, #26]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d166      	bne.n	80048ac <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e2:	881a      	ldrh	r2, [r3, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ee:	1c9a      	adds	r2, r3, #2
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	3b01      	subs	r3, #1
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004802:	e053      	b.n	80048ac <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b02      	cmp	r3, #2
 8004810:	d11b      	bne.n	800484a <HAL_SPI_TransmitReceive+0x176>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004816:	b29b      	uxth	r3, r3
 8004818:	2b00      	cmp	r3, #0
 800481a:	d016      	beq.n	800484a <HAL_SPI_TransmitReceive+0x176>
 800481c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800481e:	2b01      	cmp	r3, #1
 8004820:	d113      	bne.n	800484a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004826:	881a      	ldrh	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004832:	1c9a      	adds	r2, r3, #2
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800483c:	b29b      	uxth	r3, r3
 800483e:	3b01      	subs	r3, #1
 8004840:	b29a      	uxth	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004846:	2300      	movs	r3, #0
 8004848:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f003 0301 	and.w	r3, r3, #1
 8004854:	2b01      	cmp	r3, #1
 8004856:	d119      	bne.n	800488c <HAL_SPI_TransmitReceive+0x1b8>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800485c:	b29b      	uxth	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d014      	beq.n	800488c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68da      	ldr	r2, [r3, #12]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486c:	b292      	uxth	r2, r2
 800486e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004874:	1c9a      	adds	r2, r3, #2
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800487e:	b29b      	uxth	r3, r3
 8004880:	3b01      	subs	r3, #1
 8004882:	b29a      	uxth	r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004888:	2301      	movs	r3, #1
 800488a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800488c:	f7fc fe22 	bl	80014d4 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004898:	429a      	cmp	r2, r3
 800489a:	d807      	bhi.n	80048ac <HAL_SPI_TransmitReceive+0x1d8>
 800489c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800489e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048a2:	d003      	beq.n	80048ac <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80048aa:	e0a7      	b.n	80049fc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1a6      	bne.n	8004804 <HAL_SPI_TransmitReceive+0x130>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1a1      	bne.n	8004804 <HAL_SPI_TransmitReceive+0x130>
 80048c0:	e07c      	b.n	80049bc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d002      	beq.n	80048d0 <HAL_SPI_TransmitReceive+0x1fc>
 80048ca:	8b7b      	ldrh	r3, [r7, #26]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d16b      	bne.n	80049a8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	330c      	adds	r3, #12
 80048da:	7812      	ldrb	r2, [r2, #0]
 80048dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e2:	1c5a      	adds	r2, r3, #1
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	3b01      	subs	r3, #1
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048f6:	e057      	b.n	80049a8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b02      	cmp	r3, #2
 8004904:	d11c      	bne.n	8004940 <HAL_SPI_TransmitReceive+0x26c>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800490a:	b29b      	uxth	r3, r3
 800490c:	2b00      	cmp	r3, #0
 800490e:	d017      	beq.n	8004940 <HAL_SPI_TransmitReceive+0x26c>
 8004910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004912:	2b01      	cmp	r3, #1
 8004914:	d114      	bne.n	8004940 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	330c      	adds	r3, #12
 8004920:	7812      	ldrb	r2, [r2, #0]
 8004922:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004928:	1c5a      	adds	r2, r3, #1
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004932:	b29b      	uxth	r3, r3
 8004934:	3b01      	subs	r3, #1
 8004936:	b29a      	uxth	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800493c:	2300      	movs	r3, #0
 800493e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b01      	cmp	r3, #1
 800494c:	d119      	bne.n	8004982 <HAL_SPI_TransmitReceive+0x2ae>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004952:	b29b      	uxth	r3, r3
 8004954:	2b00      	cmp	r3, #0
 8004956:	d014      	beq.n	8004982 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68da      	ldr	r2, [r3, #12]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004962:	b2d2      	uxtb	r2, r2
 8004964:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496a:	1c5a      	adds	r2, r3, #1
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004974:	b29b      	uxth	r3, r3
 8004976:	3b01      	subs	r3, #1
 8004978:	b29a      	uxth	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800497e:	2301      	movs	r3, #1
 8004980:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004982:	f7fc fda7 	bl	80014d4 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800498e:	429a      	cmp	r2, r3
 8004990:	d803      	bhi.n	800499a <HAL_SPI_TransmitReceive+0x2c6>
 8004992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004994:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004998:	d102      	bne.n	80049a0 <HAL_SPI_TransmitReceive+0x2cc>
 800499a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800499c:	2b00      	cmp	r3, #0
 800499e:	d103      	bne.n	80049a8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80049a6:	e029      	b.n	80049fc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1a2      	bne.n	80048f8 <HAL_SPI_TransmitReceive+0x224>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d19d      	bne.n	80048f8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f000 fa29 	bl	8004e18 <SPI_EndRxTxTransaction>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d006      	beq.n	80049da <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2220      	movs	r2, #32
 80049d6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80049d8:	e010      	b.n	80049fc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10b      	bne.n	80049fa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049e2:	2300      	movs	r3, #0
 80049e4:	617b      	str	r3, [r7, #20]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	617b      	str	r3, [r7, #20]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	617b      	str	r3, [r7, #20]
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	e000      	b.n	80049fc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80049fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a0c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3730      	adds	r7, #48	; 0x30
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b088      	sub	sp, #32
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d10e      	bne.n	8004a58 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d009      	beq.n	8004a58 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d004      	beq.n	8004a58 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	4798      	blx	r3
    return;
 8004a56:	e0ce      	b.n	8004bf6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d009      	beq.n	8004a76 <HAL_SPI_IRQHandler+0x5e>
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d004      	beq.n	8004a76 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	4798      	blx	r3
    return;
 8004a74:	e0bf      	b.n	8004bf6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	f003 0320 	and.w	r3, r3, #32
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10a      	bne.n	8004a96 <HAL_SPI_IRQHandler+0x7e>
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d105      	bne.n	8004a96 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f000 80b0 	beq.w	8004bf6 <HAL_SPI_IRQHandler+0x1de>
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	f003 0320 	and.w	r3, r3, #32
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f000 80aa 	beq.w	8004bf6 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d023      	beq.n	8004af4 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b03      	cmp	r3, #3
 8004ab6:	d011      	beq.n	8004adc <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004abc:	f043 0204 	orr.w	r2, r3, #4
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	617b      	str	r3, [r7, #20]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	617b      	str	r3, [r7, #20]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	617b      	str	r3, [r7, #20]
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	e00b      	b.n	8004af4 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004adc:	2300      	movs	r3, #0
 8004ade:	613b      	str	r3, [r7, #16]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	613b      	str	r3, [r7, #16]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	613b      	str	r3, [r7, #16]
 8004af0:	693b      	ldr	r3, [r7, #16]
        return;
 8004af2:	e080      	b.n	8004bf6 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	f003 0320 	and.w	r3, r3, #32
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d014      	beq.n	8004b28 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b02:	f043 0201 	orr.w	r2, r3, #1
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	60fb      	str	r3, [r7, #12]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	60fb      	str	r3, [r7, #12]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b24:	601a      	str	r2, [r3, #0]
 8004b26:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00c      	beq.n	8004b4c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b36:	f043 0208 	orr.w	r2, r3, #8
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004b3e:	2300      	movs	r3, #0
 8004b40:	60bb      	str	r3, [r7, #8]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	60bb      	str	r3, [r7, #8]
 8004b4a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d04f      	beq.n	8004bf4 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b62:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d104      	bne.n	8004b80 <HAL_SPI_IRQHandler+0x168>
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	f003 0301 	and.w	r3, r3, #1
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d034      	beq.n	8004bea <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f022 0203 	bic.w	r2, r2, #3
 8004b8e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d011      	beq.n	8004bbc <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b9c:	4a17      	ldr	r2, [pc, #92]	; (8004bfc <HAL_SPI_IRQHandler+0x1e4>)
 8004b9e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7fc fe17 	bl	80017d8 <HAL_DMA_Abort_IT>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d005      	beq.n	8004bbc <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d016      	beq.n	8004bf2 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bc8:	4a0c      	ldr	r2, [pc, #48]	; (8004bfc <HAL_SPI_IRQHandler+0x1e4>)
 8004bca:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f7fc fe01 	bl	80017d8 <HAL_DMA_Abort_IT>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00a      	beq.n	8004bf2 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004be8:	e003      	b.n	8004bf2 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 f808 	bl	8004c00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004bf0:	e000      	b.n	8004bf4 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004bf2:	bf00      	nop
    return;
 8004bf4:	bf00      	nop
  }
}
 8004bf6:	3720      	adds	r7, #32
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	08004c15 	.word	0x08004c15

08004c00 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c20:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f7ff ffe6 	bl	8004c00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c34:	bf00      	nop
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b088      	sub	sp, #32
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	603b      	str	r3, [r7, #0]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004c4c:	f7fc fc42 	bl	80014d4 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c54:	1a9b      	subs	r3, r3, r2
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	4413      	add	r3, r2
 8004c5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004c5c:	f7fc fc3a 	bl	80014d4 <HAL_GetTick>
 8004c60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004c62:	4b39      	ldr	r3, [pc, #228]	; (8004d48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	015b      	lsls	r3, r3, #5
 8004c68:	0d1b      	lsrs	r3, r3, #20
 8004c6a:	69fa      	ldr	r2, [r7, #28]
 8004c6c:	fb02 f303 	mul.w	r3, r2, r3
 8004c70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c72:	e054      	b.n	8004d1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c7a:	d050      	beq.n	8004d1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c7c:	f7fc fc2a 	bl	80014d4 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	69fa      	ldr	r2, [r7, #28]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d902      	bls.n	8004c92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d13d      	bne.n	8004d0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ca0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004caa:	d111      	bne.n	8004cd0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cb4:	d004      	beq.n	8004cc0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cbe:	d107      	bne.n	8004cd0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cd8:	d10f      	bne.n	8004cfa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cf8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e017      	b.n	8004d3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d101      	bne.n	8004d18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d14:	2300      	movs	r3, #0
 8004d16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	689a      	ldr	r2, [r3, #8]
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	4013      	ands	r3, r2
 8004d28:	68ba      	ldr	r2, [r7, #8]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	bf0c      	ite	eq
 8004d2e:	2301      	moveq	r3, #1
 8004d30:	2300      	movne	r3, #0
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	461a      	mov	r2, r3
 8004d36:	79fb      	ldrb	r3, [r7, #7]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d19b      	bne.n	8004c74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3720      	adds	r7, #32
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	20000000 	.word	0x20000000

08004d4c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b086      	sub	sp, #24
 8004d50:	af02      	add	r7, sp, #8
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d60:	d111      	bne.n	8004d86 <SPI_EndRxTransaction+0x3a>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d6a:	d004      	beq.n	8004d76 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d74:	d107      	bne.n	8004d86 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d84:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d8e:	d12a      	bne.n	8004de6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d98:	d012      	beq.n	8004dc0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	9300      	str	r3, [sp, #0]
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	2200      	movs	r2, #0
 8004da2:	2180      	movs	r1, #128	; 0x80
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f7ff ff49 	bl	8004c3c <SPI_WaitFlagStateUntilTimeout>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d02d      	beq.n	8004e0c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db4:	f043 0220 	orr.w	r2, r3, #32
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e026      	b.n	8004e0e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	9300      	str	r3, [sp, #0]
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	2101      	movs	r1, #1
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	f7ff ff36 	bl	8004c3c <SPI_WaitFlagStateUntilTimeout>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d01a      	beq.n	8004e0c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dda:	f043 0220 	orr.w	r2, r3, #32
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e013      	b.n	8004e0e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	2200      	movs	r2, #0
 8004dee:	2101      	movs	r1, #1
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f7ff ff23 	bl	8004c3c <SPI_WaitFlagStateUntilTimeout>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d007      	beq.n	8004e0c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e00:	f043 0220 	orr.w	r2, r3, #32
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e000      	b.n	8004e0e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
	...

08004e18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b088      	sub	sp, #32
 8004e1c:	af02      	add	r7, sp, #8
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004e24:	4b1b      	ldr	r3, [pc, #108]	; (8004e94 <SPI_EndRxTxTransaction+0x7c>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a1b      	ldr	r2, [pc, #108]	; (8004e98 <SPI_EndRxTxTransaction+0x80>)
 8004e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e2e:	0d5b      	lsrs	r3, r3, #21
 8004e30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e34:	fb02 f303 	mul.w	r3, r2, r3
 8004e38:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e42:	d112      	bne.n	8004e6a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	9300      	str	r3, [sp, #0]
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	2180      	movs	r1, #128	; 0x80
 8004e4e:	68f8      	ldr	r0, [r7, #12]
 8004e50:	f7ff fef4 	bl	8004c3c <SPI_WaitFlagStateUntilTimeout>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d016      	beq.n	8004e88 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e5e:	f043 0220 	orr.w	r2, r3, #32
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e00f      	b.n	8004e8a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00a      	beq.n	8004e86 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	3b01      	subs	r3, #1
 8004e74:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e80:	2b80      	cmp	r3, #128	; 0x80
 8004e82:	d0f2      	beq.n	8004e6a <SPI_EndRxTxTransaction+0x52>
 8004e84:	e000      	b.n	8004e88 <SPI_EndRxTxTransaction+0x70>
        break;
 8004e86:	bf00      	nop
  }

  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3718      	adds	r7, #24
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	20000000 	.word	0x20000000
 8004e98:	165e9f81 	.word	0x165e9f81

08004e9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e041      	b.n	8004f32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d106      	bne.n	8004ec8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f7fc f8cc 	bl	8001060 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2202      	movs	r2, #2
 8004ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	3304      	adds	r3, #4
 8004ed8:	4619      	mov	r1, r3
 8004eda:	4610      	mov	r0, r2
 8004edc:	f000 fa96 	bl	800540c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3708      	adds	r7, #8
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
	...

08004f3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d001      	beq.n	8004f54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e04e      	b.n	8004ff2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2202      	movs	r2, #2
 8004f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68da      	ldr	r2, [r3, #12]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f042 0201 	orr.w	r2, r2, #1
 8004f6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a23      	ldr	r2, [pc, #140]	; (8005000 <HAL_TIM_Base_Start_IT+0xc4>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d022      	beq.n	8004fbc <HAL_TIM_Base_Start_IT+0x80>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f7e:	d01d      	beq.n	8004fbc <HAL_TIM_Base_Start_IT+0x80>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a1f      	ldr	r2, [pc, #124]	; (8005004 <HAL_TIM_Base_Start_IT+0xc8>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d018      	beq.n	8004fbc <HAL_TIM_Base_Start_IT+0x80>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a1e      	ldr	r2, [pc, #120]	; (8005008 <HAL_TIM_Base_Start_IT+0xcc>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d013      	beq.n	8004fbc <HAL_TIM_Base_Start_IT+0x80>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a1c      	ldr	r2, [pc, #112]	; (800500c <HAL_TIM_Base_Start_IT+0xd0>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d00e      	beq.n	8004fbc <HAL_TIM_Base_Start_IT+0x80>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a1b      	ldr	r2, [pc, #108]	; (8005010 <HAL_TIM_Base_Start_IT+0xd4>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d009      	beq.n	8004fbc <HAL_TIM_Base_Start_IT+0x80>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a19      	ldr	r2, [pc, #100]	; (8005014 <HAL_TIM_Base_Start_IT+0xd8>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d004      	beq.n	8004fbc <HAL_TIM_Base_Start_IT+0x80>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a18      	ldr	r2, [pc, #96]	; (8005018 <HAL_TIM_Base_Start_IT+0xdc>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d111      	bne.n	8004fe0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f003 0307 	and.w	r3, r3, #7
 8004fc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2b06      	cmp	r3, #6
 8004fcc:	d010      	beq.n	8004ff0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f042 0201 	orr.w	r2, r2, #1
 8004fdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fde:	e007      	b.n	8004ff0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f042 0201 	orr.w	r2, r2, #1
 8004fee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3714      	adds	r7, #20
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	40010000 	.word	0x40010000
 8005004:	40000400 	.word	0x40000400
 8005008:	40000800 	.word	0x40000800
 800500c:	40000c00 	.word	0x40000c00
 8005010:	40010400 	.word	0x40010400
 8005014:	40014000 	.word	0x40014000
 8005018:	40001800 	.word	0x40001800

0800501c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b02      	cmp	r3, #2
 8005030:	d122      	bne.n	8005078 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	f003 0302 	and.w	r3, r3, #2
 800503c:	2b02      	cmp	r3, #2
 800503e:	d11b      	bne.n	8005078 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f06f 0202 	mvn.w	r2, #2
 8005048:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2201      	movs	r2, #1
 800504e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	f003 0303 	and.w	r3, r3, #3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f9b5 	bl	80053ce <HAL_TIM_IC_CaptureCallback>
 8005064:	e005      	b.n	8005072 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f9a7 	bl	80053ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 f9b8 	bl	80053e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	f003 0304 	and.w	r3, r3, #4
 8005082:	2b04      	cmp	r3, #4
 8005084:	d122      	bne.n	80050cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	f003 0304 	and.w	r3, r3, #4
 8005090:	2b04      	cmp	r3, #4
 8005092:	d11b      	bne.n	80050cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f06f 0204 	mvn.w	r2, #4
 800509c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2202      	movs	r2, #2
 80050a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 f98b 	bl	80053ce <HAL_TIM_IC_CaptureCallback>
 80050b8:	e005      	b.n	80050c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f97d 	bl	80053ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 f98e 	bl	80053e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	f003 0308 	and.w	r3, r3, #8
 80050d6:	2b08      	cmp	r3, #8
 80050d8:	d122      	bne.n	8005120 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	f003 0308 	and.w	r3, r3, #8
 80050e4:	2b08      	cmp	r3, #8
 80050e6:	d11b      	bne.n	8005120 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f06f 0208 	mvn.w	r2, #8
 80050f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2204      	movs	r2, #4
 80050f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	69db      	ldr	r3, [r3, #28]
 80050fe:	f003 0303 	and.w	r3, r3, #3
 8005102:	2b00      	cmp	r3, #0
 8005104:	d003      	beq.n	800510e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 f961 	bl	80053ce <HAL_TIM_IC_CaptureCallback>
 800510c:	e005      	b.n	800511a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f953 	bl	80053ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 f964 	bl	80053e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	f003 0310 	and.w	r3, r3, #16
 800512a:	2b10      	cmp	r3, #16
 800512c:	d122      	bne.n	8005174 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	f003 0310 	and.w	r3, r3, #16
 8005138:	2b10      	cmp	r3, #16
 800513a:	d11b      	bne.n	8005174 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f06f 0210 	mvn.w	r2, #16
 8005144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2208      	movs	r2, #8
 800514a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	69db      	ldr	r3, [r3, #28]
 8005152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005156:	2b00      	cmp	r3, #0
 8005158:	d003      	beq.n	8005162 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f937 	bl	80053ce <HAL_TIM_IC_CaptureCallback>
 8005160:	e005      	b.n	800516e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 f929 	bl	80053ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 f93a 	bl	80053e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	2b01      	cmp	r3, #1
 8005180:	d10e      	bne.n	80051a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	f003 0301 	and.w	r3, r3, #1
 800518c:	2b01      	cmp	r3, #1
 800518e:	d107      	bne.n	80051a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f06f 0201 	mvn.w	r2, #1
 8005198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f7fb fed4 	bl	8000f48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051aa:	2b80      	cmp	r3, #128	; 0x80
 80051ac:	d10e      	bne.n	80051cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b8:	2b80      	cmp	r3, #128	; 0x80
 80051ba:	d107      	bne.n	80051cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 fae0 	bl	800578c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d6:	2b40      	cmp	r3, #64	; 0x40
 80051d8:	d10e      	bne.n	80051f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e4:	2b40      	cmp	r3, #64	; 0x40
 80051e6:	d107      	bne.n	80051f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 f8ff 	bl	80053f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	f003 0320 	and.w	r3, r3, #32
 8005202:	2b20      	cmp	r3, #32
 8005204:	d10e      	bne.n	8005224 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	f003 0320 	and.w	r3, r3, #32
 8005210:	2b20      	cmp	r3, #32
 8005212:	d107      	bne.n	8005224 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f06f 0220 	mvn.w	r2, #32
 800521c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 faaa 	bl	8005778 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005224:	bf00      	nop
 8005226:	3708      	adds	r7, #8
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005236:	2300      	movs	r3, #0
 8005238:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005240:	2b01      	cmp	r3, #1
 8005242:	d101      	bne.n	8005248 <HAL_TIM_ConfigClockSource+0x1c>
 8005244:	2302      	movs	r3, #2
 8005246:	e0b4      	b.n	80053b2 <HAL_TIM_ConfigClockSource+0x186>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2202      	movs	r2, #2
 8005254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005266:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800526e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68ba      	ldr	r2, [r7, #8]
 8005276:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005280:	d03e      	beq.n	8005300 <HAL_TIM_ConfigClockSource+0xd4>
 8005282:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005286:	f200 8087 	bhi.w	8005398 <HAL_TIM_ConfigClockSource+0x16c>
 800528a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800528e:	f000 8086 	beq.w	800539e <HAL_TIM_ConfigClockSource+0x172>
 8005292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005296:	d87f      	bhi.n	8005398 <HAL_TIM_ConfigClockSource+0x16c>
 8005298:	2b70      	cmp	r3, #112	; 0x70
 800529a:	d01a      	beq.n	80052d2 <HAL_TIM_ConfigClockSource+0xa6>
 800529c:	2b70      	cmp	r3, #112	; 0x70
 800529e:	d87b      	bhi.n	8005398 <HAL_TIM_ConfigClockSource+0x16c>
 80052a0:	2b60      	cmp	r3, #96	; 0x60
 80052a2:	d050      	beq.n	8005346 <HAL_TIM_ConfigClockSource+0x11a>
 80052a4:	2b60      	cmp	r3, #96	; 0x60
 80052a6:	d877      	bhi.n	8005398 <HAL_TIM_ConfigClockSource+0x16c>
 80052a8:	2b50      	cmp	r3, #80	; 0x50
 80052aa:	d03c      	beq.n	8005326 <HAL_TIM_ConfigClockSource+0xfa>
 80052ac:	2b50      	cmp	r3, #80	; 0x50
 80052ae:	d873      	bhi.n	8005398 <HAL_TIM_ConfigClockSource+0x16c>
 80052b0:	2b40      	cmp	r3, #64	; 0x40
 80052b2:	d058      	beq.n	8005366 <HAL_TIM_ConfigClockSource+0x13a>
 80052b4:	2b40      	cmp	r3, #64	; 0x40
 80052b6:	d86f      	bhi.n	8005398 <HAL_TIM_ConfigClockSource+0x16c>
 80052b8:	2b30      	cmp	r3, #48	; 0x30
 80052ba:	d064      	beq.n	8005386 <HAL_TIM_ConfigClockSource+0x15a>
 80052bc:	2b30      	cmp	r3, #48	; 0x30
 80052be:	d86b      	bhi.n	8005398 <HAL_TIM_ConfigClockSource+0x16c>
 80052c0:	2b20      	cmp	r3, #32
 80052c2:	d060      	beq.n	8005386 <HAL_TIM_ConfigClockSource+0x15a>
 80052c4:	2b20      	cmp	r3, #32
 80052c6:	d867      	bhi.n	8005398 <HAL_TIM_ConfigClockSource+0x16c>
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d05c      	beq.n	8005386 <HAL_TIM_ConfigClockSource+0x15a>
 80052cc:	2b10      	cmp	r3, #16
 80052ce:	d05a      	beq.n	8005386 <HAL_TIM_ConfigClockSource+0x15a>
 80052d0:	e062      	b.n	8005398 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6818      	ldr	r0, [r3, #0]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	6899      	ldr	r1, [r3, #8]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	685a      	ldr	r2, [r3, #4]
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	f000 f9ad 	bl	8005640 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	609a      	str	r2, [r3, #8]
      break;
 80052fe:	e04f      	b.n	80053a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6818      	ldr	r0, [r3, #0]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	6899      	ldr	r1, [r3, #8]
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	685a      	ldr	r2, [r3, #4]
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	f000 f996 	bl	8005640 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	689a      	ldr	r2, [r3, #8]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005322:	609a      	str	r2, [r3, #8]
      break;
 8005324:	e03c      	b.n	80053a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6818      	ldr	r0, [r3, #0]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	6859      	ldr	r1, [r3, #4]
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	461a      	mov	r2, r3
 8005334:	f000 f90a 	bl	800554c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2150      	movs	r1, #80	; 0x50
 800533e:	4618      	mov	r0, r3
 8005340:	f000 f963 	bl	800560a <TIM_ITRx_SetConfig>
      break;
 8005344:	e02c      	b.n	80053a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6818      	ldr	r0, [r3, #0]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	6859      	ldr	r1, [r3, #4]
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	461a      	mov	r2, r3
 8005354:	f000 f929 	bl	80055aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2160      	movs	r1, #96	; 0x60
 800535e:	4618      	mov	r0, r3
 8005360:	f000 f953 	bl	800560a <TIM_ITRx_SetConfig>
      break;
 8005364:	e01c      	b.n	80053a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6818      	ldr	r0, [r3, #0]
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	6859      	ldr	r1, [r3, #4]
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	461a      	mov	r2, r3
 8005374:	f000 f8ea 	bl	800554c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2140      	movs	r1, #64	; 0x40
 800537e:	4618      	mov	r0, r3
 8005380:	f000 f943 	bl	800560a <TIM_ITRx_SetConfig>
      break;
 8005384:	e00c      	b.n	80053a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4619      	mov	r1, r3
 8005390:	4610      	mov	r0, r2
 8005392:	f000 f93a 	bl	800560a <TIM_ITRx_SetConfig>
      break;
 8005396:	e003      	b.n	80053a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	73fb      	strb	r3, [r7, #15]
      break;
 800539c:	e000      	b.n	80053a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800539e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053ba:	b480      	push	{r7}
 80053bc:	b083      	sub	sp, #12
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053c2:	bf00      	nop
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053ce:	b480      	push	{r7}
 80053d0:	b083      	sub	sp, #12
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053d6:	bf00      	nop
 80053d8:	370c      	adds	r7, #12
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr

080053e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053e2:	b480      	push	{r7}
 80053e4:	b083      	sub	sp, #12
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053ea:	bf00      	nop
 80053ec:	370c      	adds	r7, #12
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr

080053f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053f6:	b480      	push	{r7}
 80053f8:	b083      	sub	sp, #12
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053fe:	bf00      	nop
 8005400:	370c      	adds	r7, #12
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
	...

0800540c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800540c:	b480      	push	{r7}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a40      	ldr	r2, [pc, #256]	; (8005520 <TIM_Base_SetConfig+0x114>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d013      	beq.n	800544c <TIM_Base_SetConfig+0x40>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800542a:	d00f      	beq.n	800544c <TIM_Base_SetConfig+0x40>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a3d      	ldr	r2, [pc, #244]	; (8005524 <TIM_Base_SetConfig+0x118>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d00b      	beq.n	800544c <TIM_Base_SetConfig+0x40>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a3c      	ldr	r2, [pc, #240]	; (8005528 <TIM_Base_SetConfig+0x11c>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d007      	beq.n	800544c <TIM_Base_SetConfig+0x40>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a3b      	ldr	r2, [pc, #236]	; (800552c <TIM_Base_SetConfig+0x120>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d003      	beq.n	800544c <TIM_Base_SetConfig+0x40>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a3a      	ldr	r2, [pc, #232]	; (8005530 <TIM_Base_SetConfig+0x124>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d108      	bne.n	800545e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005452:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	4313      	orrs	r3, r2
 800545c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a2f      	ldr	r2, [pc, #188]	; (8005520 <TIM_Base_SetConfig+0x114>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d02b      	beq.n	80054be <TIM_Base_SetConfig+0xb2>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800546c:	d027      	beq.n	80054be <TIM_Base_SetConfig+0xb2>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a2c      	ldr	r2, [pc, #176]	; (8005524 <TIM_Base_SetConfig+0x118>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d023      	beq.n	80054be <TIM_Base_SetConfig+0xb2>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a2b      	ldr	r2, [pc, #172]	; (8005528 <TIM_Base_SetConfig+0x11c>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d01f      	beq.n	80054be <TIM_Base_SetConfig+0xb2>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a2a      	ldr	r2, [pc, #168]	; (800552c <TIM_Base_SetConfig+0x120>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d01b      	beq.n	80054be <TIM_Base_SetConfig+0xb2>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a29      	ldr	r2, [pc, #164]	; (8005530 <TIM_Base_SetConfig+0x124>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d017      	beq.n	80054be <TIM_Base_SetConfig+0xb2>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a28      	ldr	r2, [pc, #160]	; (8005534 <TIM_Base_SetConfig+0x128>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d013      	beq.n	80054be <TIM_Base_SetConfig+0xb2>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a27      	ldr	r2, [pc, #156]	; (8005538 <TIM_Base_SetConfig+0x12c>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d00f      	beq.n	80054be <TIM_Base_SetConfig+0xb2>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a26      	ldr	r2, [pc, #152]	; (800553c <TIM_Base_SetConfig+0x130>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d00b      	beq.n	80054be <TIM_Base_SetConfig+0xb2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a25      	ldr	r2, [pc, #148]	; (8005540 <TIM_Base_SetConfig+0x134>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d007      	beq.n	80054be <TIM_Base_SetConfig+0xb2>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a24      	ldr	r2, [pc, #144]	; (8005544 <TIM_Base_SetConfig+0x138>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d003      	beq.n	80054be <TIM_Base_SetConfig+0xb2>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a23      	ldr	r2, [pc, #140]	; (8005548 <TIM_Base_SetConfig+0x13c>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d108      	bne.n	80054d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	4313      	orrs	r3, r2
 80054dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	689a      	ldr	r2, [r3, #8]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a0a      	ldr	r2, [pc, #40]	; (8005520 <TIM_Base_SetConfig+0x114>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d003      	beq.n	8005504 <TIM_Base_SetConfig+0xf8>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a0c      	ldr	r2, [pc, #48]	; (8005530 <TIM_Base_SetConfig+0x124>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d103      	bne.n	800550c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	691a      	ldr	r2, [r3, #16]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	615a      	str	r2, [r3, #20]
}
 8005512:	bf00      	nop
 8005514:	3714      	adds	r7, #20
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	40010000 	.word	0x40010000
 8005524:	40000400 	.word	0x40000400
 8005528:	40000800 	.word	0x40000800
 800552c:	40000c00 	.word	0x40000c00
 8005530:	40010400 	.word	0x40010400
 8005534:	40014000 	.word	0x40014000
 8005538:	40014400 	.word	0x40014400
 800553c:	40014800 	.word	0x40014800
 8005540:	40001800 	.word	0x40001800
 8005544:	40001c00 	.word	0x40001c00
 8005548:	40002000 	.word	0x40002000

0800554c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800554c:	b480      	push	{r7}
 800554e:	b087      	sub	sp, #28
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6a1b      	ldr	r3, [r3, #32]
 800555c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6a1b      	ldr	r3, [r3, #32]
 8005562:	f023 0201 	bic.w	r2, r3, #1
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005576:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	011b      	lsls	r3, r3, #4
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	4313      	orrs	r3, r2
 8005580:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f023 030a 	bic.w	r3, r3, #10
 8005588:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	4313      	orrs	r3, r2
 8005590:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	621a      	str	r2, [r3, #32]
}
 800559e:	bf00      	nop
 80055a0:	371c      	adds	r7, #28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b087      	sub	sp, #28
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	60f8      	str	r0, [r7, #12]
 80055b2:	60b9      	str	r1, [r7, #8]
 80055b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	f023 0210 	bic.w	r2, r3, #16
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6a1b      	ldr	r3, [r3, #32]
 80055cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	031b      	lsls	r3, r3, #12
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	4313      	orrs	r3, r2
 80055de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	011b      	lsls	r3, r3, #4
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	621a      	str	r2, [r3, #32]
}
 80055fe:	bf00      	nop
 8005600:	371c      	adds	r7, #28
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr

0800560a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800560a:	b480      	push	{r7}
 800560c:	b085      	sub	sp, #20
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
 8005612:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005620:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005622:	683a      	ldr	r2, [r7, #0]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	4313      	orrs	r3, r2
 8005628:	f043 0307 	orr.w	r3, r3, #7
 800562c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	609a      	str	r2, [r3, #8]
}
 8005634:	bf00      	nop
 8005636:	3714      	adds	r7, #20
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005640:	b480      	push	{r7}
 8005642:	b087      	sub	sp, #28
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
 800564c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800565a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	021a      	lsls	r2, r3, #8
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	431a      	orrs	r2, r3
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	4313      	orrs	r3, r2
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	4313      	orrs	r3, r2
 800566c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	609a      	str	r2, [r3, #8]
}
 8005674:	bf00      	nop
 8005676:	371c      	adds	r7, #28
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005690:	2b01      	cmp	r3, #1
 8005692:	d101      	bne.n	8005698 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005694:	2302      	movs	r3, #2
 8005696:	e05a      	b.n	800574e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2202      	movs	r2, #2
 80056a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a21      	ldr	r2, [pc, #132]	; (800575c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d022      	beq.n	8005722 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056e4:	d01d      	beq.n	8005722 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a1d      	ldr	r2, [pc, #116]	; (8005760 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d018      	beq.n	8005722 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a1b      	ldr	r2, [pc, #108]	; (8005764 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d013      	beq.n	8005722 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a1a      	ldr	r2, [pc, #104]	; (8005768 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d00e      	beq.n	8005722 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a18      	ldr	r2, [pc, #96]	; (800576c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d009      	beq.n	8005722 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a17      	ldr	r2, [pc, #92]	; (8005770 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d004      	beq.n	8005722 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a15      	ldr	r2, [pc, #84]	; (8005774 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d10c      	bne.n	800573c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005728:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	68ba      	ldr	r2, [r7, #8]
 8005730:	4313      	orrs	r3, r2
 8005732:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3714      	adds	r7, #20
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	40010000 	.word	0x40010000
 8005760:	40000400 	.word	0x40000400
 8005764:	40000800 	.word	0x40000800
 8005768:	40000c00 	.word	0x40000c00
 800576c:	40010400 	.word	0x40010400
 8005770:	40014000 	.word	0x40014000
 8005774:	40001800 	.word	0x40001800

08005778 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005780:	bf00      	nop
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e03f      	b.n	8005832 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d106      	bne.n	80057cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7fb fc6c 	bl	80010a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2224      	movs	r2, #36	; 0x24
 80057d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68da      	ldr	r2, [r3, #12]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 fd7b 	bl	80062e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	691a      	ldr	r2, [r3, #16]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	695a      	ldr	r2, [r3, #20]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005808:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68da      	ldr	r2, [r3, #12]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005818:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2220      	movs	r2, #32
 8005824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2220      	movs	r2, #32
 800582c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3708      	adds	r7, #8
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800583a:	b580      	push	{r7, lr}
 800583c:	b08a      	sub	sp, #40	; 0x28
 800583e:	af02      	add	r7, sp, #8
 8005840:	60f8      	str	r0, [r7, #12]
 8005842:	60b9      	str	r1, [r7, #8]
 8005844:	603b      	str	r3, [r7, #0]
 8005846:	4613      	mov	r3, r2
 8005848:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800584a:	2300      	movs	r3, #0
 800584c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005854:	b2db      	uxtb	r3, r3
 8005856:	2b20      	cmp	r3, #32
 8005858:	d17c      	bne.n	8005954 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d002      	beq.n	8005866 <HAL_UART_Transmit+0x2c>
 8005860:	88fb      	ldrh	r3, [r7, #6]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d101      	bne.n	800586a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e075      	b.n	8005956 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005870:	2b01      	cmp	r3, #1
 8005872:	d101      	bne.n	8005878 <HAL_UART_Transmit+0x3e>
 8005874:	2302      	movs	r3, #2
 8005876:	e06e      	b.n	8005956 <HAL_UART_Transmit+0x11c>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2221      	movs	r2, #33	; 0x21
 800588a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800588e:	f7fb fe21 	bl	80014d4 <HAL_GetTick>
 8005892:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	88fa      	ldrh	r2, [r7, #6]
 8005898:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	88fa      	ldrh	r2, [r7, #6]
 800589e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058a8:	d108      	bne.n	80058bc <HAL_UART_Transmit+0x82>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d104      	bne.n	80058bc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80058b2:	2300      	movs	r3, #0
 80058b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	61bb      	str	r3, [r7, #24]
 80058ba:	e003      	b.n	80058c4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058c0:	2300      	movs	r3, #0
 80058c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80058cc:	e02a      	b.n	8005924 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	9300      	str	r3, [sp, #0]
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	2200      	movs	r2, #0
 80058d6:	2180      	movs	r1, #128	; 0x80
 80058d8:	68f8      	ldr	r0, [r7, #12]
 80058da:	f000 faf9 	bl	8005ed0 <UART_WaitOnFlagUntilTimeout>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d001      	beq.n	80058e8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e036      	b.n	8005956 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10b      	bne.n	8005906 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	881b      	ldrh	r3, [r3, #0]
 80058f2:	461a      	mov	r2, r3
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	3302      	adds	r3, #2
 8005902:	61bb      	str	r3, [r7, #24]
 8005904:	e007      	b.n	8005916 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	781a      	ldrb	r2, [r3, #0]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	3301      	adds	r3, #1
 8005914:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800591a:	b29b      	uxth	r3, r3
 800591c:	3b01      	subs	r3, #1
 800591e:	b29a      	uxth	r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005928:	b29b      	uxth	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1cf      	bne.n	80058ce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	2200      	movs	r2, #0
 8005936:	2140      	movs	r1, #64	; 0x40
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f000 fac9 	bl	8005ed0 <UART_WaitOnFlagUntilTimeout>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d001      	beq.n	8005948 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e006      	b.n	8005956 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2220      	movs	r2, #32
 800594c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005950:	2300      	movs	r3, #0
 8005952:	e000      	b.n	8005956 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005954:	2302      	movs	r3, #2
  }
}
 8005956:	4618      	mov	r0, r3
 8005958:	3720      	adds	r7, #32
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
	...

08005960 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b0ba      	sub	sp, #232	; 0xe8
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005986:	2300      	movs	r3, #0
 8005988:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800598c:	2300      	movs	r3, #0
 800598e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005996:	f003 030f 	and.w	r3, r3, #15
 800599a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800599e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10f      	bne.n	80059c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059aa:	f003 0320 	and.w	r3, r3, #32
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d009      	beq.n	80059c6 <HAL_UART_IRQHandler+0x66>
 80059b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059b6:	f003 0320 	and.w	r3, r3, #32
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d003      	beq.n	80059c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 fbd3 	bl	800616a <UART_Receive_IT>
      return;
 80059c4:	e256      	b.n	8005e74 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80059c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f000 80de 	beq.w	8005b8c <HAL_UART_IRQHandler+0x22c>
 80059d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059d4:	f003 0301 	and.w	r3, r3, #1
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d106      	bne.n	80059ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80059dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059e0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f000 80d1 	beq.w	8005b8c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80059ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ee:	f003 0301 	and.w	r3, r3, #1
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00b      	beq.n	8005a0e <HAL_UART_IRQHandler+0xae>
 80059f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d005      	beq.n	8005a0e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a06:	f043 0201 	orr.w	r2, r3, #1
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a12:	f003 0304 	and.w	r3, r3, #4
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00b      	beq.n	8005a32 <HAL_UART_IRQHandler+0xd2>
 8005a1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a1e:	f003 0301 	and.w	r3, r3, #1
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d005      	beq.n	8005a32 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2a:	f043 0202 	orr.w	r2, r3, #2
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a36:	f003 0302 	and.w	r3, r3, #2
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00b      	beq.n	8005a56 <HAL_UART_IRQHandler+0xf6>
 8005a3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a42:	f003 0301 	and.w	r3, r3, #1
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d005      	beq.n	8005a56 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4e:	f043 0204 	orr.w	r2, r3, #4
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a5a:	f003 0308 	and.w	r3, r3, #8
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d011      	beq.n	8005a86 <HAL_UART_IRQHandler+0x126>
 8005a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a66:	f003 0320 	and.w	r3, r3, #32
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d105      	bne.n	8005a7a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d005      	beq.n	8005a86 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7e:	f043 0208 	orr.w	r2, r3, #8
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	f000 81ed 	beq.w	8005e6a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a94:	f003 0320 	and.w	r3, r3, #32
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d008      	beq.n	8005aae <HAL_UART_IRQHandler+0x14e>
 8005a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005aa0:	f003 0320 	and.w	r3, r3, #32
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d002      	beq.n	8005aae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 fb5e 	bl	800616a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	695b      	ldr	r3, [r3, #20]
 8005ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab8:	2b40      	cmp	r3, #64	; 0x40
 8005aba:	bf0c      	ite	eq
 8005abc:	2301      	moveq	r3, #1
 8005abe:	2300      	movne	r3, #0
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aca:	f003 0308 	and.w	r3, r3, #8
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d103      	bne.n	8005ada <HAL_UART_IRQHandler+0x17a>
 8005ad2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d04f      	beq.n	8005b7a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 fa66 	bl	8005fac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aea:	2b40      	cmp	r3, #64	; 0x40
 8005aec:	d141      	bne.n	8005b72 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	3314      	adds	r3, #20
 8005af4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005afc:	e853 3f00 	ldrex	r3, [r3]
 8005b00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005b04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	3314      	adds	r3, #20
 8005b16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005b1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005b1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005b26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005b2a:	e841 2300 	strex	r3, r2, [r1]
 8005b2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005b32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1d9      	bne.n	8005aee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d013      	beq.n	8005b6a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b46:	4a7d      	ldr	r2, [pc, #500]	; (8005d3c <HAL_UART_IRQHandler+0x3dc>)
 8005b48:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f7fb fe42 	bl	80017d8 <HAL_DMA_Abort_IT>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d016      	beq.n	8005b88 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b64:	4610      	mov	r0, r2
 8005b66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b68:	e00e      	b.n	8005b88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 f99a 	bl	8005ea4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b70:	e00a      	b.n	8005b88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 f996 	bl	8005ea4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b78:	e006      	b.n	8005b88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f992 	bl	8005ea4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005b86:	e170      	b.n	8005e6a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b88:	bf00      	nop
    return;
 8005b8a:	e16e      	b.n	8005e6a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	f040 814a 	bne.w	8005e2a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b9a:	f003 0310 	and.w	r3, r3, #16
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	f000 8143 	beq.w	8005e2a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ba8:	f003 0310 	and.w	r3, r3, #16
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	f000 813c 	beq.w	8005e2a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	60bb      	str	r3, [r7, #8]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	60bb      	str	r3, [r7, #8]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	60bb      	str	r3, [r7, #8]
 8005bc6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd2:	2b40      	cmp	r3, #64	; 0x40
 8005bd4:	f040 80b4 	bne.w	8005d40 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005be4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	f000 8140 	beq.w	8005e6e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005bf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	f080 8139 	bcs.w	8005e6e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c02:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c0e:	f000 8088 	beq.w	8005d22 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	330c      	adds	r3, #12
 8005c18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c20:	e853 3f00 	ldrex	r3, [r3]
 8005c24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005c28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	330c      	adds	r3, #12
 8005c3a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005c3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005c42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c46:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c4e:	e841 2300 	strex	r3, r2, [r1]
 8005c52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d1d9      	bne.n	8005c12 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	3314      	adds	r3, #20
 8005c64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c68:	e853 3f00 	ldrex	r3, [r3]
 8005c6c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c70:	f023 0301 	bic.w	r3, r3, #1
 8005c74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	3314      	adds	r3, #20
 8005c7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c82:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c86:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c88:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c8e:	e841 2300 	strex	r3, r2, [r1]
 8005c92:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1e1      	bne.n	8005c5e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	3314      	adds	r3, #20
 8005ca0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ca4:	e853 3f00 	ldrex	r3, [r3]
 8005ca8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005caa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	3314      	adds	r3, #20
 8005cba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005cbe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005cc0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005cc4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005cc6:	e841 2300 	strex	r3, r2, [r1]
 8005cca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005ccc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1e3      	bne.n	8005c9a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2220      	movs	r2, #32
 8005cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	330c      	adds	r3, #12
 8005ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cea:	e853 3f00 	ldrex	r3, [r3]
 8005cee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005cf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cf2:	f023 0310 	bic.w	r3, r3, #16
 8005cf6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	330c      	adds	r3, #12
 8005d00:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005d04:	65ba      	str	r2, [r7, #88]	; 0x58
 8005d06:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d0c:	e841 2300 	strex	r3, r2, [r1]
 8005d10:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1e3      	bne.n	8005ce0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7fb fceb 	bl	80016f8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	4619      	mov	r1, r3
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f8c0 	bl	8005eb8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d38:	e099      	b.n	8005e6e <HAL_UART_IRQHandler+0x50e>
 8005d3a:	bf00      	nop
 8005d3c:	08006073 	.word	0x08006073
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	f000 808b 	beq.w	8005e72 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005d5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f000 8086 	beq.w	8005e72 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	330c      	adds	r3, #12
 8005d6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d70:	e853 3f00 	ldrex	r3, [r3]
 8005d74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	330c      	adds	r3, #12
 8005d86:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005d8a:	647a      	str	r2, [r7, #68]	; 0x44
 8005d8c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d92:	e841 2300 	strex	r3, r2, [r1]
 8005d96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1e3      	bne.n	8005d66 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	3314      	adds	r3, #20
 8005da4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da8:	e853 3f00 	ldrex	r3, [r3]
 8005dac:	623b      	str	r3, [r7, #32]
   return(result);
 8005dae:	6a3b      	ldr	r3, [r7, #32]
 8005db0:	f023 0301 	bic.w	r3, r3, #1
 8005db4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	3314      	adds	r3, #20
 8005dbe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005dc2:	633a      	str	r2, [r7, #48]	; 0x30
 8005dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005dc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dca:	e841 2300 	strex	r3, r2, [r1]
 8005dce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1e3      	bne.n	8005d9e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2220      	movs	r2, #32
 8005dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	330c      	adds	r3, #12
 8005dea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	e853 3f00 	ldrex	r3, [r3]
 8005df2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f023 0310 	bic.w	r3, r3, #16
 8005dfa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	330c      	adds	r3, #12
 8005e04:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005e08:	61fa      	str	r2, [r7, #28]
 8005e0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0c:	69b9      	ldr	r1, [r7, #24]
 8005e0e:	69fa      	ldr	r2, [r7, #28]
 8005e10:	e841 2300 	strex	r3, r2, [r1]
 8005e14:	617b      	str	r3, [r7, #20]
   return(result);
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1e3      	bne.n	8005de4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e20:	4619      	mov	r1, r3
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 f848 	bl	8005eb8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e28:	e023      	b.n	8005e72 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d009      	beq.n	8005e4a <HAL_UART_IRQHandler+0x4ea>
 8005e36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d003      	beq.n	8005e4a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 f929 	bl	800609a <UART_Transmit_IT>
    return;
 8005e48:	e014      	b.n	8005e74 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00e      	beq.n	8005e74 <HAL_UART_IRQHandler+0x514>
 8005e56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d008      	beq.n	8005e74 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 f969 	bl	800613a <UART_EndTransmit_IT>
    return;
 8005e68:	e004      	b.n	8005e74 <HAL_UART_IRQHandler+0x514>
    return;
 8005e6a:	bf00      	nop
 8005e6c:	e002      	b.n	8005e74 <HAL_UART_IRQHandler+0x514>
      return;
 8005e6e:	bf00      	nop
 8005e70:	e000      	b.n	8005e74 <HAL_UART_IRQHandler+0x514>
      return;
 8005e72:	bf00      	nop
  }
}
 8005e74:	37e8      	adds	r7, #232	; 0xe8
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop

08005e7c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e84:	bf00      	nop
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005e98:	bf00      	nop
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005eac:	bf00      	nop
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ec4:	bf00      	nop
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b090      	sub	sp, #64	; 0x40
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	603b      	str	r3, [r7, #0]
 8005edc:	4613      	mov	r3, r2
 8005ede:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ee0:	e050      	b.n	8005f84 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ee2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ee4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ee8:	d04c      	beq.n	8005f84 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005eea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d007      	beq.n	8005f00 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ef0:	f7fb faf0 	bl	80014d4 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d241      	bcs.n	8005f84 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	330c      	adds	r3, #12
 8005f06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0a:	e853 3f00 	ldrex	r3, [r3]
 8005f0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f12:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	330c      	adds	r3, #12
 8005f1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f20:	637a      	str	r2, [r7, #52]	; 0x34
 8005f22:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f28:	e841 2300 	strex	r3, r2, [r1]
 8005f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1e5      	bne.n	8005f00 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	3314      	adds	r3, #20
 8005f3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	e853 3f00 	ldrex	r3, [r3]
 8005f42:	613b      	str	r3, [r7, #16]
   return(result);
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	f023 0301 	bic.w	r3, r3, #1
 8005f4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	3314      	adds	r3, #20
 8005f52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f54:	623a      	str	r2, [r7, #32]
 8005f56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f58:	69f9      	ldr	r1, [r7, #28]
 8005f5a:	6a3a      	ldr	r2, [r7, #32]
 8005f5c:	e841 2300 	strex	r3, r2, [r1]
 8005f60:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d1e5      	bne.n	8005f34 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2220      	movs	r2, #32
 8005f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2220      	movs	r2, #32
 8005f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005f80:	2303      	movs	r3, #3
 8005f82:	e00f      	b.n	8005fa4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	68ba      	ldr	r2, [r7, #8]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	bf0c      	ite	eq
 8005f94:	2301      	moveq	r3, #1
 8005f96:	2300      	movne	r3, #0
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	79fb      	ldrb	r3, [r7, #7]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d09f      	beq.n	8005ee2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3740      	adds	r7, #64	; 0x40
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b095      	sub	sp, #84	; 0x54
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	330c      	adds	r3, #12
 8005fba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fbe:	e853 3f00 	ldrex	r3, [r3]
 8005fc2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	330c      	adds	r3, #12
 8005fd2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fd4:	643a      	str	r2, [r7, #64]	; 0x40
 8005fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005fda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fdc:	e841 2300 	strex	r3, r2, [r1]
 8005fe0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d1e5      	bne.n	8005fb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	3314      	adds	r3, #20
 8005fee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff0:	6a3b      	ldr	r3, [r7, #32]
 8005ff2:	e853 3f00 	ldrex	r3, [r3]
 8005ff6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	f023 0301 	bic.w	r3, r3, #1
 8005ffe:	64bb      	str	r3, [r7, #72]	; 0x48
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	3314      	adds	r3, #20
 8006006:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006008:	62fa      	str	r2, [r7, #44]	; 0x2c
 800600a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800600e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006010:	e841 2300 	strex	r3, r2, [r1]
 8006014:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1e5      	bne.n	8005fe8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006020:	2b01      	cmp	r3, #1
 8006022:	d119      	bne.n	8006058 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	330c      	adds	r3, #12
 800602a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	e853 3f00 	ldrex	r3, [r3]
 8006032:	60bb      	str	r3, [r7, #8]
   return(result);
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	f023 0310 	bic.w	r3, r3, #16
 800603a:	647b      	str	r3, [r7, #68]	; 0x44
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	330c      	adds	r3, #12
 8006042:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006044:	61ba      	str	r2, [r7, #24]
 8006046:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006048:	6979      	ldr	r1, [r7, #20]
 800604a:	69ba      	ldr	r2, [r7, #24]
 800604c:	e841 2300 	strex	r3, r2, [r1]
 8006050:	613b      	str	r3, [r7, #16]
   return(result);
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1e5      	bne.n	8006024 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2220      	movs	r2, #32
 800605c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006066:	bf00      	nop
 8006068:	3754      	adds	r7, #84	; 0x54
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr

08006072 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b084      	sub	sp, #16
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2200      	movs	r2, #0
 800608a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800608c:	68f8      	ldr	r0, [r7, #12]
 800608e:	f7ff ff09 	bl	8005ea4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006092:	bf00      	nop
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800609a:	b480      	push	{r7}
 800609c:	b085      	sub	sp, #20
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	2b21      	cmp	r3, #33	; 0x21
 80060ac:	d13e      	bne.n	800612c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060b6:	d114      	bne.n	80060e2 <UART_Transmit_IT+0x48>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d110      	bne.n	80060e2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a1b      	ldr	r3, [r3, #32]
 80060c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	881b      	ldrh	r3, [r3, #0]
 80060ca:	461a      	mov	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060d4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	1c9a      	adds	r2, r3, #2
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	621a      	str	r2, [r3, #32]
 80060e0:	e008      	b.n	80060f4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	1c59      	adds	r1, r3, #1
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	6211      	str	r1, [r2, #32]
 80060ec:	781a      	ldrb	r2, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	3b01      	subs	r3, #1
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	4619      	mov	r1, r3
 8006102:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006104:	2b00      	cmp	r3, #0
 8006106:	d10f      	bne.n	8006128 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68da      	ldr	r2, [r3, #12]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006116:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68da      	ldr	r2, [r3, #12]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006126:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006128:	2300      	movs	r3, #0
 800612a:	e000      	b.n	800612e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800612c:	2302      	movs	r3, #2
  }
}
 800612e:	4618      	mov	r0, r3
 8006130:	3714      	adds	r7, #20
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr

0800613a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800613a:	b580      	push	{r7, lr}
 800613c:	b082      	sub	sp, #8
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68da      	ldr	r2, [r3, #12]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006150:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2220      	movs	r2, #32
 8006156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f7ff fe8e 	bl	8005e7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3708      	adds	r7, #8
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800616a:	b580      	push	{r7, lr}
 800616c:	b08c      	sub	sp, #48	; 0x30
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b22      	cmp	r3, #34	; 0x22
 800617c:	f040 80ab 	bne.w	80062d6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006188:	d117      	bne.n	80061ba <UART_Receive_IT+0x50>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d113      	bne.n	80061ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006192:	2300      	movs	r3, #0
 8006194:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800619a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b2:	1c9a      	adds	r2, r3, #2
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	629a      	str	r2, [r3, #40]	; 0x28
 80061b8:	e026      	b.n	8006208 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061be:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80061c0:	2300      	movs	r3, #0
 80061c2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061cc:	d007      	beq.n	80061de <UART_Receive_IT+0x74>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d10a      	bne.n	80061ec <UART_Receive_IT+0x82>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d106      	bne.n	80061ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	b2da      	uxtb	r2, r3
 80061e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e8:	701a      	strb	r2, [r3, #0]
 80061ea:	e008      	b.n	80061fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061f8:	b2da      	uxtb	r2, r3
 80061fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006202:	1c5a      	adds	r2, r3, #1
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800620c:	b29b      	uxth	r3, r3
 800620e:	3b01      	subs	r3, #1
 8006210:	b29b      	uxth	r3, r3
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	4619      	mov	r1, r3
 8006216:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006218:	2b00      	cmp	r3, #0
 800621a:	d15a      	bne.n	80062d2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68da      	ldr	r2, [r3, #12]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f022 0220 	bic.w	r2, r2, #32
 800622a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68da      	ldr	r2, [r3, #12]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800623a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	695a      	ldr	r2, [r3, #20]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f022 0201 	bic.w	r2, r2, #1
 800624a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2220      	movs	r2, #32
 8006250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006258:	2b01      	cmp	r3, #1
 800625a:	d135      	bne.n	80062c8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	330c      	adds	r3, #12
 8006268:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	e853 3f00 	ldrex	r3, [r3]
 8006270:	613b      	str	r3, [r7, #16]
   return(result);
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	f023 0310 	bic.w	r3, r3, #16
 8006278:	627b      	str	r3, [r7, #36]	; 0x24
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	330c      	adds	r3, #12
 8006280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006282:	623a      	str	r2, [r7, #32]
 8006284:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006286:	69f9      	ldr	r1, [r7, #28]
 8006288:	6a3a      	ldr	r2, [r7, #32]
 800628a:	e841 2300 	strex	r3, r2, [r1]
 800628e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1e5      	bne.n	8006262 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0310 	and.w	r3, r3, #16
 80062a0:	2b10      	cmp	r3, #16
 80062a2:	d10a      	bne.n	80062ba <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062a4:	2300      	movs	r3, #0
 80062a6:	60fb      	str	r3, [r7, #12]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	60fb      	str	r3, [r7, #12]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	60fb      	str	r3, [r7, #12]
 80062b8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062be:	4619      	mov	r1, r3
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f7ff fdf9 	bl	8005eb8 <HAL_UARTEx_RxEventCallback>
 80062c6:	e002      	b.n	80062ce <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f7ff fde1 	bl	8005e90 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80062ce:	2300      	movs	r3, #0
 80062d0:	e002      	b.n	80062d8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80062d2:	2300      	movs	r3, #0
 80062d4:	e000      	b.n	80062d8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80062d6:	2302      	movs	r3, #2
  }
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3730      	adds	r7, #48	; 0x30
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062e4:	b0c0      	sub	sp, #256	; 0x100
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80062f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062fc:	68d9      	ldr	r1, [r3, #12]
 80062fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	ea40 0301 	orr.w	r3, r0, r1
 8006308:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800630a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800630e:	689a      	ldr	r2, [r3, #8]
 8006310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	431a      	orrs	r2, r3
 8006318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	431a      	orrs	r2, r3
 8006320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006324:	69db      	ldr	r3, [r3, #28]
 8006326:	4313      	orrs	r3, r2
 8006328:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800632c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006338:	f021 010c 	bic.w	r1, r1, #12
 800633c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006346:	430b      	orrs	r3, r1
 8006348:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800634a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800635a:	6999      	ldr	r1, [r3, #24]
 800635c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	ea40 0301 	orr.w	r3, r0, r1
 8006366:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	4b8f      	ldr	r3, [pc, #572]	; (80065ac <UART_SetConfig+0x2cc>)
 8006370:	429a      	cmp	r2, r3
 8006372:	d005      	beq.n	8006380 <UART_SetConfig+0xa0>
 8006374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	4b8d      	ldr	r3, [pc, #564]	; (80065b0 <UART_SetConfig+0x2d0>)
 800637c:	429a      	cmp	r2, r3
 800637e:	d104      	bne.n	800638a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006380:	f7fd fe8c 	bl	800409c <HAL_RCC_GetPCLK2Freq>
 8006384:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006388:	e003      	b.n	8006392 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800638a:	f7fd fe73 	bl	8004074 <HAL_RCC_GetPCLK1Freq>
 800638e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006396:	69db      	ldr	r3, [r3, #28]
 8006398:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800639c:	f040 810c 	bne.w	80065b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80063a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063a4:	2200      	movs	r2, #0
 80063a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80063aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80063ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80063b2:	4622      	mov	r2, r4
 80063b4:	462b      	mov	r3, r5
 80063b6:	1891      	adds	r1, r2, r2
 80063b8:	65b9      	str	r1, [r7, #88]	; 0x58
 80063ba:	415b      	adcs	r3, r3
 80063bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80063c2:	4621      	mov	r1, r4
 80063c4:	eb12 0801 	adds.w	r8, r2, r1
 80063c8:	4629      	mov	r1, r5
 80063ca:	eb43 0901 	adc.w	r9, r3, r1
 80063ce:	f04f 0200 	mov.w	r2, #0
 80063d2:	f04f 0300 	mov.w	r3, #0
 80063d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063e2:	4690      	mov	r8, r2
 80063e4:	4699      	mov	r9, r3
 80063e6:	4623      	mov	r3, r4
 80063e8:	eb18 0303 	adds.w	r3, r8, r3
 80063ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80063f0:	462b      	mov	r3, r5
 80063f2:	eb49 0303 	adc.w	r3, r9, r3
 80063f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006406:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800640a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800640e:	460b      	mov	r3, r1
 8006410:	18db      	adds	r3, r3, r3
 8006412:	653b      	str	r3, [r7, #80]	; 0x50
 8006414:	4613      	mov	r3, r2
 8006416:	eb42 0303 	adc.w	r3, r2, r3
 800641a:	657b      	str	r3, [r7, #84]	; 0x54
 800641c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006420:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006424:	f7f9 ff34 	bl	8000290 <__aeabi_uldivmod>
 8006428:	4602      	mov	r2, r0
 800642a:	460b      	mov	r3, r1
 800642c:	4b61      	ldr	r3, [pc, #388]	; (80065b4 <UART_SetConfig+0x2d4>)
 800642e:	fba3 2302 	umull	r2, r3, r3, r2
 8006432:	095b      	lsrs	r3, r3, #5
 8006434:	011c      	lsls	r4, r3, #4
 8006436:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800643a:	2200      	movs	r2, #0
 800643c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006440:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006444:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006448:	4642      	mov	r2, r8
 800644a:	464b      	mov	r3, r9
 800644c:	1891      	adds	r1, r2, r2
 800644e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006450:	415b      	adcs	r3, r3
 8006452:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006454:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006458:	4641      	mov	r1, r8
 800645a:	eb12 0a01 	adds.w	sl, r2, r1
 800645e:	4649      	mov	r1, r9
 8006460:	eb43 0b01 	adc.w	fp, r3, r1
 8006464:	f04f 0200 	mov.w	r2, #0
 8006468:	f04f 0300 	mov.w	r3, #0
 800646c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006470:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006474:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006478:	4692      	mov	sl, r2
 800647a:	469b      	mov	fp, r3
 800647c:	4643      	mov	r3, r8
 800647e:	eb1a 0303 	adds.w	r3, sl, r3
 8006482:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006486:	464b      	mov	r3, r9
 8006488:	eb4b 0303 	adc.w	r3, fp, r3
 800648c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800649c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80064a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80064a4:	460b      	mov	r3, r1
 80064a6:	18db      	adds	r3, r3, r3
 80064a8:	643b      	str	r3, [r7, #64]	; 0x40
 80064aa:	4613      	mov	r3, r2
 80064ac:	eb42 0303 	adc.w	r3, r2, r3
 80064b0:	647b      	str	r3, [r7, #68]	; 0x44
 80064b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80064b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80064ba:	f7f9 fee9 	bl	8000290 <__aeabi_uldivmod>
 80064be:	4602      	mov	r2, r0
 80064c0:	460b      	mov	r3, r1
 80064c2:	4611      	mov	r1, r2
 80064c4:	4b3b      	ldr	r3, [pc, #236]	; (80065b4 <UART_SetConfig+0x2d4>)
 80064c6:	fba3 2301 	umull	r2, r3, r3, r1
 80064ca:	095b      	lsrs	r3, r3, #5
 80064cc:	2264      	movs	r2, #100	; 0x64
 80064ce:	fb02 f303 	mul.w	r3, r2, r3
 80064d2:	1acb      	subs	r3, r1, r3
 80064d4:	00db      	lsls	r3, r3, #3
 80064d6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80064da:	4b36      	ldr	r3, [pc, #216]	; (80065b4 <UART_SetConfig+0x2d4>)
 80064dc:	fba3 2302 	umull	r2, r3, r3, r2
 80064e0:	095b      	lsrs	r3, r3, #5
 80064e2:	005b      	lsls	r3, r3, #1
 80064e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80064e8:	441c      	add	r4, r3
 80064ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064ee:	2200      	movs	r2, #0
 80064f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80064f4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80064f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80064fc:	4642      	mov	r2, r8
 80064fe:	464b      	mov	r3, r9
 8006500:	1891      	adds	r1, r2, r2
 8006502:	63b9      	str	r1, [r7, #56]	; 0x38
 8006504:	415b      	adcs	r3, r3
 8006506:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006508:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800650c:	4641      	mov	r1, r8
 800650e:	1851      	adds	r1, r2, r1
 8006510:	6339      	str	r1, [r7, #48]	; 0x30
 8006512:	4649      	mov	r1, r9
 8006514:	414b      	adcs	r3, r1
 8006516:	637b      	str	r3, [r7, #52]	; 0x34
 8006518:	f04f 0200 	mov.w	r2, #0
 800651c:	f04f 0300 	mov.w	r3, #0
 8006520:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006524:	4659      	mov	r1, fp
 8006526:	00cb      	lsls	r3, r1, #3
 8006528:	4651      	mov	r1, sl
 800652a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800652e:	4651      	mov	r1, sl
 8006530:	00ca      	lsls	r2, r1, #3
 8006532:	4610      	mov	r0, r2
 8006534:	4619      	mov	r1, r3
 8006536:	4603      	mov	r3, r0
 8006538:	4642      	mov	r2, r8
 800653a:	189b      	adds	r3, r3, r2
 800653c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006540:	464b      	mov	r3, r9
 8006542:	460a      	mov	r2, r1
 8006544:	eb42 0303 	adc.w	r3, r2, r3
 8006548:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800654c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006558:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800655c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006560:	460b      	mov	r3, r1
 8006562:	18db      	adds	r3, r3, r3
 8006564:	62bb      	str	r3, [r7, #40]	; 0x28
 8006566:	4613      	mov	r3, r2
 8006568:	eb42 0303 	adc.w	r3, r2, r3
 800656c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800656e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006572:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006576:	f7f9 fe8b 	bl	8000290 <__aeabi_uldivmod>
 800657a:	4602      	mov	r2, r0
 800657c:	460b      	mov	r3, r1
 800657e:	4b0d      	ldr	r3, [pc, #52]	; (80065b4 <UART_SetConfig+0x2d4>)
 8006580:	fba3 1302 	umull	r1, r3, r3, r2
 8006584:	095b      	lsrs	r3, r3, #5
 8006586:	2164      	movs	r1, #100	; 0x64
 8006588:	fb01 f303 	mul.w	r3, r1, r3
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	00db      	lsls	r3, r3, #3
 8006590:	3332      	adds	r3, #50	; 0x32
 8006592:	4a08      	ldr	r2, [pc, #32]	; (80065b4 <UART_SetConfig+0x2d4>)
 8006594:	fba2 2303 	umull	r2, r3, r2, r3
 8006598:	095b      	lsrs	r3, r3, #5
 800659a:	f003 0207 	and.w	r2, r3, #7
 800659e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4422      	add	r2, r4
 80065a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80065a8:	e106      	b.n	80067b8 <UART_SetConfig+0x4d8>
 80065aa:	bf00      	nop
 80065ac:	40011000 	.word	0x40011000
 80065b0:	40011400 	.word	0x40011400
 80065b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80065b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065bc:	2200      	movs	r2, #0
 80065be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80065c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80065c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80065ca:	4642      	mov	r2, r8
 80065cc:	464b      	mov	r3, r9
 80065ce:	1891      	adds	r1, r2, r2
 80065d0:	6239      	str	r1, [r7, #32]
 80065d2:	415b      	adcs	r3, r3
 80065d4:	627b      	str	r3, [r7, #36]	; 0x24
 80065d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80065da:	4641      	mov	r1, r8
 80065dc:	1854      	adds	r4, r2, r1
 80065de:	4649      	mov	r1, r9
 80065e0:	eb43 0501 	adc.w	r5, r3, r1
 80065e4:	f04f 0200 	mov.w	r2, #0
 80065e8:	f04f 0300 	mov.w	r3, #0
 80065ec:	00eb      	lsls	r3, r5, #3
 80065ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065f2:	00e2      	lsls	r2, r4, #3
 80065f4:	4614      	mov	r4, r2
 80065f6:	461d      	mov	r5, r3
 80065f8:	4643      	mov	r3, r8
 80065fa:	18e3      	adds	r3, r4, r3
 80065fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006600:	464b      	mov	r3, r9
 8006602:	eb45 0303 	adc.w	r3, r5, r3
 8006606:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800660a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006616:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800661a:	f04f 0200 	mov.w	r2, #0
 800661e:	f04f 0300 	mov.w	r3, #0
 8006622:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006626:	4629      	mov	r1, r5
 8006628:	008b      	lsls	r3, r1, #2
 800662a:	4621      	mov	r1, r4
 800662c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006630:	4621      	mov	r1, r4
 8006632:	008a      	lsls	r2, r1, #2
 8006634:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006638:	f7f9 fe2a 	bl	8000290 <__aeabi_uldivmod>
 800663c:	4602      	mov	r2, r0
 800663e:	460b      	mov	r3, r1
 8006640:	4b60      	ldr	r3, [pc, #384]	; (80067c4 <UART_SetConfig+0x4e4>)
 8006642:	fba3 2302 	umull	r2, r3, r3, r2
 8006646:	095b      	lsrs	r3, r3, #5
 8006648:	011c      	lsls	r4, r3, #4
 800664a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800664e:	2200      	movs	r2, #0
 8006650:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006654:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006658:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800665c:	4642      	mov	r2, r8
 800665e:	464b      	mov	r3, r9
 8006660:	1891      	adds	r1, r2, r2
 8006662:	61b9      	str	r1, [r7, #24]
 8006664:	415b      	adcs	r3, r3
 8006666:	61fb      	str	r3, [r7, #28]
 8006668:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800666c:	4641      	mov	r1, r8
 800666e:	1851      	adds	r1, r2, r1
 8006670:	6139      	str	r1, [r7, #16]
 8006672:	4649      	mov	r1, r9
 8006674:	414b      	adcs	r3, r1
 8006676:	617b      	str	r3, [r7, #20]
 8006678:	f04f 0200 	mov.w	r2, #0
 800667c:	f04f 0300 	mov.w	r3, #0
 8006680:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006684:	4659      	mov	r1, fp
 8006686:	00cb      	lsls	r3, r1, #3
 8006688:	4651      	mov	r1, sl
 800668a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800668e:	4651      	mov	r1, sl
 8006690:	00ca      	lsls	r2, r1, #3
 8006692:	4610      	mov	r0, r2
 8006694:	4619      	mov	r1, r3
 8006696:	4603      	mov	r3, r0
 8006698:	4642      	mov	r2, r8
 800669a:	189b      	adds	r3, r3, r2
 800669c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80066a0:	464b      	mov	r3, r9
 80066a2:	460a      	mov	r2, r1
 80066a4:	eb42 0303 	adc.w	r3, r2, r3
 80066a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80066ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80066b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80066b8:	f04f 0200 	mov.w	r2, #0
 80066bc:	f04f 0300 	mov.w	r3, #0
 80066c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80066c4:	4649      	mov	r1, r9
 80066c6:	008b      	lsls	r3, r1, #2
 80066c8:	4641      	mov	r1, r8
 80066ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066ce:	4641      	mov	r1, r8
 80066d0:	008a      	lsls	r2, r1, #2
 80066d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80066d6:	f7f9 fddb 	bl	8000290 <__aeabi_uldivmod>
 80066da:	4602      	mov	r2, r0
 80066dc:	460b      	mov	r3, r1
 80066de:	4611      	mov	r1, r2
 80066e0:	4b38      	ldr	r3, [pc, #224]	; (80067c4 <UART_SetConfig+0x4e4>)
 80066e2:	fba3 2301 	umull	r2, r3, r3, r1
 80066e6:	095b      	lsrs	r3, r3, #5
 80066e8:	2264      	movs	r2, #100	; 0x64
 80066ea:	fb02 f303 	mul.w	r3, r2, r3
 80066ee:	1acb      	subs	r3, r1, r3
 80066f0:	011b      	lsls	r3, r3, #4
 80066f2:	3332      	adds	r3, #50	; 0x32
 80066f4:	4a33      	ldr	r2, [pc, #204]	; (80067c4 <UART_SetConfig+0x4e4>)
 80066f6:	fba2 2303 	umull	r2, r3, r2, r3
 80066fa:	095b      	lsrs	r3, r3, #5
 80066fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006700:	441c      	add	r4, r3
 8006702:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006706:	2200      	movs	r2, #0
 8006708:	673b      	str	r3, [r7, #112]	; 0x70
 800670a:	677a      	str	r2, [r7, #116]	; 0x74
 800670c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006710:	4642      	mov	r2, r8
 8006712:	464b      	mov	r3, r9
 8006714:	1891      	adds	r1, r2, r2
 8006716:	60b9      	str	r1, [r7, #8]
 8006718:	415b      	adcs	r3, r3
 800671a:	60fb      	str	r3, [r7, #12]
 800671c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006720:	4641      	mov	r1, r8
 8006722:	1851      	adds	r1, r2, r1
 8006724:	6039      	str	r1, [r7, #0]
 8006726:	4649      	mov	r1, r9
 8006728:	414b      	adcs	r3, r1
 800672a:	607b      	str	r3, [r7, #4]
 800672c:	f04f 0200 	mov.w	r2, #0
 8006730:	f04f 0300 	mov.w	r3, #0
 8006734:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006738:	4659      	mov	r1, fp
 800673a:	00cb      	lsls	r3, r1, #3
 800673c:	4651      	mov	r1, sl
 800673e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006742:	4651      	mov	r1, sl
 8006744:	00ca      	lsls	r2, r1, #3
 8006746:	4610      	mov	r0, r2
 8006748:	4619      	mov	r1, r3
 800674a:	4603      	mov	r3, r0
 800674c:	4642      	mov	r2, r8
 800674e:	189b      	adds	r3, r3, r2
 8006750:	66bb      	str	r3, [r7, #104]	; 0x68
 8006752:	464b      	mov	r3, r9
 8006754:	460a      	mov	r2, r1
 8006756:	eb42 0303 	adc.w	r3, r2, r3
 800675a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800675c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	663b      	str	r3, [r7, #96]	; 0x60
 8006766:	667a      	str	r2, [r7, #100]	; 0x64
 8006768:	f04f 0200 	mov.w	r2, #0
 800676c:	f04f 0300 	mov.w	r3, #0
 8006770:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006774:	4649      	mov	r1, r9
 8006776:	008b      	lsls	r3, r1, #2
 8006778:	4641      	mov	r1, r8
 800677a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800677e:	4641      	mov	r1, r8
 8006780:	008a      	lsls	r2, r1, #2
 8006782:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006786:	f7f9 fd83 	bl	8000290 <__aeabi_uldivmod>
 800678a:	4602      	mov	r2, r0
 800678c:	460b      	mov	r3, r1
 800678e:	4b0d      	ldr	r3, [pc, #52]	; (80067c4 <UART_SetConfig+0x4e4>)
 8006790:	fba3 1302 	umull	r1, r3, r3, r2
 8006794:	095b      	lsrs	r3, r3, #5
 8006796:	2164      	movs	r1, #100	; 0x64
 8006798:	fb01 f303 	mul.w	r3, r1, r3
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	011b      	lsls	r3, r3, #4
 80067a0:	3332      	adds	r3, #50	; 0x32
 80067a2:	4a08      	ldr	r2, [pc, #32]	; (80067c4 <UART_SetConfig+0x4e4>)
 80067a4:	fba2 2303 	umull	r2, r3, r2, r3
 80067a8:	095b      	lsrs	r3, r3, #5
 80067aa:	f003 020f 	and.w	r2, r3, #15
 80067ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4422      	add	r2, r4
 80067b6:	609a      	str	r2, [r3, #8]
}
 80067b8:	bf00      	nop
 80067ba:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80067be:	46bd      	mov	sp, r7
 80067c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067c4:	51eb851f 	.word	0x51eb851f

080067c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80067c8:	b084      	sub	sp, #16
 80067ca:	b580      	push	{r7, lr}
 80067cc:	b084      	sub	sp, #16
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
 80067d2:	f107 001c 	add.w	r0, r7, #28
 80067d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80067da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d122      	bne.n	8006826 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80067f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800680a:	2b01      	cmp	r3, #1
 800680c:	d105      	bne.n	800681a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 f9c0 	bl	8006ba0 <USB_CoreReset>
 8006820:	4603      	mov	r3, r0
 8006822:	73fb      	strb	r3, [r7, #15]
 8006824:	e01a      	b.n	800685c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 f9b4 	bl	8006ba0 <USB_CoreReset>
 8006838:	4603      	mov	r3, r0
 800683a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800683c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800683e:	2b00      	cmp	r3, #0
 8006840:	d106      	bne.n	8006850 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006846:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	639a      	str	r2, [r3, #56]	; 0x38
 800684e:	e005      	b.n	800685c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006854:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800685c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685e:	2b01      	cmp	r3, #1
 8006860:	d10b      	bne.n	800687a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	f043 0206 	orr.w	r2, r3, #6
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	f043 0220 	orr.w	r2, r3, #32
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800687a:	7bfb      	ldrb	r3, [r7, #15]
}
 800687c:	4618      	mov	r0, r3
 800687e:	3710      	adds	r7, #16
 8006880:	46bd      	mov	sp, r7
 8006882:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006886:	b004      	add	sp, #16
 8006888:	4770      	bx	lr

0800688a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800688a:	b480      	push	{r7}
 800688c:	b083      	sub	sp, #12
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	f043 0201 	orr.w	r2, r3, #1
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	f023 0201 	bic.w	r2, r3, #1
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	370c      	adds	r7, #12
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b084      	sub	sp, #16
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
 80068d6:	460b      	mov	r3, r1
 80068d8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80068da:	2300      	movs	r3, #0
 80068dc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80068ea:	78fb      	ldrb	r3, [r7, #3]
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d115      	bne.n	800691c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80068fc:	2001      	movs	r0, #1
 80068fe:	f7fa fdf5 	bl	80014ec <HAL_Delay>
      ms++;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	3301      	adds	r3, #1
 8006906:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 f93a 	bl	8006b82 <USB_GetMode>
 800690e:	4603      	mov	r3, r0
 8006910:	2b01      	cmp	r3, #1
 8006912:	d01e      	beq.n	8006952 <USB_SetCurrentMode+0x84>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2b31      	cmp	r3, #49	; 0x31
 8006918:	d9f0      	bls.n	80068fc <USB_SetCurrentMode+0x2e>
 800691a:	e01a      	b.n	8006952 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800691c:	78fb      	ldrb	r3, [r7, #3]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d115      	bne.n	800694e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800692e:	2001      	movs	r0, #1
 8006930:	f7fa fddc 	bl	80014ec <HAL_Delay>
      ms++;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	3301      	adds	r3, #1
 8006938:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f921 	bl	8006b82 <USB_GetMode>
 8006940:	4603      	mov	r3, r0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d005      	beq.n	8006952 <USB_SetCurrentMode+0x84>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2b31      	cmp	r3, #49	; 0x31
 800694a:	d9f0      	bls.n	800692e <USB_SetCurrentMode+0x60>
 800694c:	e001      	b.n	8006952 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e005      	b.n	800695e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2b32      	cmp	r3, #50	; 0x32
 8006956:	d101      	bne.n	800695c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e000      	b.n	800695e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
	...

08006968 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006972:	2300      	movs	r3, #0
 8006974:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	3301      	adds	r3, #1
 800697a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	4a13      	ldr	r2, [pc, #76]	; (80069cc <USB_FlushTxFifo+0x64>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d901      	bls.n	8006988 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006984:	2303      	movs	r3, #3
 8006986:	e01b      	b.n	80069c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	2b00      	cmp	r3, #0
 800698e:	daf2      	bge.n	8006976 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006990:	2300      	movs	r3, #0
 8006992:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	019b      	lsls	r3, r3, #6
 8006998:	f043 0220 	orr.w	r2, r3, #32
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	3301      	adds	r3, #1
 80069a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	4a08      	ldr	r2, [pc, #32]	; (80069cc <USB_FlushTxFifo+0x64>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d901      	bls.n	80069b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e006      	b.n	80069c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	f003 0320 	and.w	r3, r3, #32
 80069ba:	2b20      	cmp	r3, #32
 80069bc:	d0f0      	beq.n	80069a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80069be:	2300      	movs	r3, #0
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3714      	adds	r7, #20
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr
 80069cc:	00030d40 	.word	0x00030d40

080069d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b085      	sub	sp, #20
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069d8:	2300      	movs	r3, #0
 80069da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	3301      	adds	r3, #1
 80069e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	4a11      	ldr	r2, [pc, #68]	; (8006a2c <USB_FlushRxFifo+0x5c>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d901      	bls.n	80069ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e018      	b.n	8006a20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	daf2      	bge.n	80069dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80069f6:	2300      	movs	r3, #0
 80069f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2210      	movs	r2, #16
 80069fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	3301      	adds	r3, #1
 8006a04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	4a08      	ldr	r2, [pc, #32]	; (8006a2c <USB_FlushRxFifo+0x5c>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d901      	bls.n	8006a12 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e006      	b.n	8006a20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	f003 0310 	and.w	r3, r3, #16
 8006a1a:	2b10      	cmp	r3, #16
 8006a1c:	d0f0      	beq.n	8006a00 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3714      	adds	r7, #20
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr
 8006a2c:	00030d40 	.word	0x00030d40

08006a30 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b089      	sub	sp, #36	; 0x24
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	4611      	mov	r1, r2
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	460b      	mov	r3, r1
 8006a40:	71fb      	strb	r3, [r7, #7]
 8006a42:	4613      	mov	r3, r2
 8006a44:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006a4e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d123      	bne.n	8006a9e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006a56:	88bb      	ldrh	r3, [r7, #4]
 8006a58:	3303      	adds	r3, #3
 8006a5a:	089b      	lsrs	r3, r3, #2
 8006a5c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006a5e:	2300      	movs	r3, #0
 8006a60:	61bb      	str	r3, [r7, #24]
 8006a62:	e018      	b.n	8006a96 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006a64:	79fb      	ldrb	r3, [r7, #7]
 8006a66:	031a      	lsls	r2, r3, #12
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a70:	461a      	mov	r2, r3
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	3301      	adds	r3, #1
 8006a82:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	3301      	adds	r3, #1
 8006a88:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	3301      	adds	r3, #1
 8006a94:	61bb      	str	r3, [r7, #24]
 8006a96:	69ba      	ldr	r2, [r7, #24]
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d3e2      	bcc.n	8006a64 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3724      	adds	r7, #36	; 0x24
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b08b      	sub	sp, #44	; 0x2c
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006ac2:	88fb      	ldrh	r3, [r7, #6]
 8006ac4:	089b      	lsrs	r3, r3, #2
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006aca:	88fb      	ldrh	r3, [r7, #6]
 8006acc:	f003 0303 	and.w	r3, r3, #3
 8006ad0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	623b      	str	r3, [r7, #32]
 8006ad6:	e014      	b.n	8006b02 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae2:	601a      	str	r2, [r3, #0]
    pDest++;
 8006ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aec:	3301      	adds	r3, #1
 8006aee:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af2:	3301      	adds	r3, #1
 8006af4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af8:	3301      	adds	r3, #1
 8006afa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006afc:	6a3b      	ldr	r3, [r7, #32]
 8006afe:	3301      	adds	r3, #1
 8006b00:	623b      	str	r3, [r7, #32]
 8006b02:	6a3a      	ldr	r2, [r7, #32]
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d3e6      	bcc.n	8006ad8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006b0a:	8bfb      	ldrh	r3, [r7, #30]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d01e      	beq.n	8006b4e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006b10:	2300      	movs	r3, #0
 8006b12:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	f107 0310 	add.w	r3, r7, #16
 8006b20:	6812      	ldr	r2, [r2, #0]
 8006b22:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	6a3b      	ldr	r3, [r7, #32]
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	00db      	lsls	r3, r3, #3
 8006b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b30:	b2da      	uxtb	r2, r3
 8006b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b34:	701a      	strb	r2, [r3, #0]
      i++;
 8006b36:	6a3b      	ldr	r3, [r7, #32]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	623b      	str	r3, [r7, #32]
      pDest++;
 8006b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3e:	3301      	adds	r3, #1
 8006b40:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006b42:	8bfb      	ldrh	r3, [r7, #30]
 8006b44:	3b01      	subs	r3, #1
 8006b46:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006b48:	8bfb      	ldrh	r3, [r7, #30]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d1ea      	bne.n	8006b24 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	372c      	adds	r7, #44	; 0x2c
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b085      	sub	sp, #20
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	695b      	ldr	r3, [r3, #20]
 8006b68:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	699b      	ldr	r3, [r3, #24]
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	4013      	ands	r3, r2
 8006b72:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006b74:	68fb      	ldr	r3, [r7, #12]
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3714      	adds	r7, #20
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr

08006b82 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006b82:	b480      	push	{r7}
 8006b84:	b083      	sub	sp, #12
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	695b      	ldr	r3, [r3, #20]
 8006b8e:	f003 0301 	and.w	r3, r3, #1
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	370c      	adds	r7, #12
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr
	...

08006ba0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	3301      	adds	r3, #1
 8006bb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	4a13      	ldr	r2, [pc, #76]	; (8006c04 <USB_CoreReset+0x64>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d901      	bls.n	8006bbe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e01b      	b.n	8006bf6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	daf2      	bge.n	8006bac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	f043 0201 	orr.w	r2, r3, #1
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	4a09      	ldr	r2, [pc, #36]	; (8006c04 <USB_CoreReset+0x64>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d901      	bls.n	8006be8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006be4:	2303      	movs	r3, #3
 8006be6:	e006      	b.n	8006bf6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	f003 0301 	and.w	r3, r3, #1
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d0f0      	beq.n	8006bd6 <USB_CoreReset+0x36>

  return HAL_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3714      	adds	r7, #20
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	00030d40 	.word	0x00030d40

08006c08 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c08:	b084      	sub	sp, #16
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b086      	sub	sp, #24
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
 8006c12:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006c16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c28:	461a      	mov	r2, r3
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c32:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c3e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c4a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d018      	beq.n	8006c90 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d10a      	bne.n	8006c7a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c72:	f043 0304 	orr.w	r3, r3, #4
 8006c76:	6013      	str	r3, [r2, #0]
 8006c78:	e014      	b.n	8006ca4 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c88:	f023 0304 	bic.w	r3, r3, #4
 8006c8c:	6013      	str	r3, [r2, #0]
 8006c8e:	e009      	b.n	8006ca4 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c9e:	f023 0304 	bic.w	r3, r3, #4
 8006ca2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006ca4:	2110      	movs	r1, #16
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f7ff fe5e 	bl	8006968 <USB_FlushTxFifo>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d001      	beq.n	8006cb6 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f7ff fe8a 	bl	80069d0 <USB_FlushRxFifo>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d001      	beq.n	8006cc6 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	613b      	str	r3, [r7, #16]
 8006cca:	e015      	b.n	8006cf8 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	015a      	lsls	r2, r3, #5
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cd8:	461a      	mov	r2, r3
 8006cda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cde:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	015a      	lsls	r2, r3, #5
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cec:	461a      	mov	r2, r3
 8006cee:	2300      	movs	r3, #0
 8006cf0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	613b      	str	r3, [r7, #16]
 8006cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfa:	693a      	ldr	r2, [r7, #16]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d3e5      	bcc.n	8006ccc <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d0c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00b      	beq.n	8006d32 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d20:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a13      	ldr	r2, [pc, #76]	; (8006d74 <USB_HostInit+0x16c>)
 8006d26:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	4a13      	ldr	r2, [pc, #76]	; (8006d78 <USB_HostInit+0x170>)
 8006d2c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006d30:	e009      	b.n	8006d46 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2280      	movs	r2, #128	; 0x80
 8006d36:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4a10      	ldr	r2, [pc, #64]	; (8006d7c <USB_HostInit+0x174>)
 8006d3c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a0f      	ldr	r2, [pc, #60]	; (8006d80 <USB_HostInit+0x178>)
 8006d42:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d105      	bne.n	8006d58 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	f043 0210 	orr.w	r2, r3, #16
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	699a      	ldr	r2, [r3, #24]
 8006d5c:	4b09      	ldr	r3, [pc, #36]	; (8006d84 <USB_HostInit+0x17c>)
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3718      	adds	r7, #24
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d70:	b004      	add	sp, #16
 8006d72:	4770      	bx	lr
 8006d74:	01000200 	.word	0x01000200
 8006d78:	00e00300 	.word	0x00e00300
 8006d7c:	00600080 	.word	0x00600080
 8006d80:	004000e0 	.word	0x004000e0
 8006d84:	a3200008 	.word	0xa3200008

08006d88 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	460b      	mov	r3, r1
 8006d92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006da6:	f023 0303 	bic.w	r3, r3, #3
 8006daa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	78fb      	ldrb	r3, [r7, #3]
 8006db6:	f003 0303 	and.w	r3, r3, #3
 8006dba:	68f9      	ldr	r1, [r7, #12]
 8006dbc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006dc4:	78fb      	ldrb	r3, [r7, #3]
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d107      	bne.n	8006dda <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006dd6:	6053      	str	r3, [r2, #4]
 8006dd8:	e009      	b.n	8006dee <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006dda:	78fb      	ldrb	r3, [r7, #3]
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d106      	bne.n	8006dee <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006de6:	461a      	mov	r2, r3
 8006de8:	f241 7370 	movw	r3, #6000	; 0x1770
 8006dec:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3714      	adds	r7, #20
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006e1c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006e26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e2a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006e2c:	2064      	movs	r0, #100	; 0x64
 8006e2e:	f7fa fb5d 	bl	80014ec <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	68fa      	ldr	r2, [r7, #12]
 8006e36:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006e3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e3e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006e40:	200a      	movs	r0, #10
 8006e42:	f7fa fb53 	bl	80014ec <HAL_Delay>

  return HAL_OK;
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	460b      	mov	r3, r1
 8006e5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006e60:	2300      	movs	r3, #0
 8006e62:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006e74:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d109      	bne.n	8006e94 <USB_DriveVbus+0x44>
 8006e80:	78fb      	ldrb	r3, [r7, #3]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d106      	bne.n	8006e94 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006e8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006e92:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e9e:	d109      	bne.n	8006eb4 <USB_DriveVbus+0x64>
 8006ea0:	78fb      	ldrb	r3, [r7, #3]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d106      	bne.n	8006eb4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006eae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006eb2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3714      	adds	r7, #20
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr

08006ec2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006ec2:	b480      	push	{r7}
 8006ec4:	b085      	sub	sp, #20
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	0c5b      	lsrs	r3, r3, #17
 8006ee0:	f003 0303 	and.w	r3, r3, #3
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3714      	adds	r7, #20
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b085      	sub	sp, #20
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	b29b      	uxth	r3, r3
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3714      	adds	r7, #20
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
	...

08006f14 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b088      	sub	sp, #32
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	4608      	mov	r0, r1
 8006f1e:	4611      	mov	r1, r2
 8006f20:	461a      	mov	r2, r3
 8006f22:	4603      	mov	r3, r0
 8006f24:	70fb      	strb	r3, [r7, #3]
 8006f26:	460b      	mov	r3, r1
 8006f28:	70bb      	strb	r3, [r7, #2]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006f36:	78fb      	ldrb	r3, [r7, #3]
 8006f38:	015a      	lsls	r2, r3, #5
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f42:	461a      	mov	r2, r3
 8006f44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f48:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006f4a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006f4e:	2b03      	cmp	r3, #3
 8006f50:	d87e      	bhi.n	8007050 <USB_HC_Init+0x13c>
 8006f52:	a201      	add	r2, pc, #4	; (adr r2, 8006f58 <USB_HC_Init+0x44>)
 8006f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f58:	08006f69 	.word	0x08006f69
 8006f5c:	08007013 	.word	0x08007013
 8006f60:	08006f69 	.word	0x08006f69
 8006f64:	08006fd5 	.word	0x08006fd5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006f68:	78fb      	ldrb	r3, [r7, #3]
 8006f6a:	015a      	lsls	r2, r3, #5
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	4413      	add	r3, r2
 8006f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f74:	461a      	mov	r2, r3
 8006f76:	f240 439d 	movw	r3, #1181	; 0x49d
 8006f7a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006f7c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	da10      	bge.n	8006fa6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006f84:	78fb      	ldrb	r3, [r7, #3]
 8006f86:	015a      	lsls	r2, r3, #5
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	78fa      	ldrb	r2, [r7, #3]
 8006f94:	0151      	lsls	r1, r2, #5
 8006f96:	693a      	ldr	r2, [r7, #16]
 8006f98:	440a      	add	r2, r1
 8006f9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fa2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006fa4:	e057      	b.n	8007056 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d051      	beq.n	8007056 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006fb2:	78fb      	ldrb	r3, [r7, #3]
 8006fb4:	015a      	lsls	r2, r3, #5
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	4413      	add	r3, r2
 8006fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	78fa      	ldrb	r2, [r7, #3]
 8006fc2:	0151      	lsls	r1, r2, #5
 8006fc4:	693a      	ldr	r2, [r7, #16]
 8006fc6:	440a      	add	r2, r1
 8006fc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fcc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006fd0:	60d3      	str	r3, [r2, #12]
      break;
 8006fd2:	e040      	b.n	8007056 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006fd4:	78fb      	ldrb	r3, [r7, #3]
 8006fd6:	015a      	lsls	r2, r3, #5
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	4413      	add	r3, r2
 8006fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	f240 639d 	movw	r3, #1693	; 0x69d
 8006fe6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006fe8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	da34      	bge.n	800705a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006ff0:	78fb      	ldrb	r3, [r7, #3]
 8006ff2:	015a      	lsls	r2, r3, #5
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	78fa      	ldrb	r2, [r7, #3]
 8007000:	0151      	lsls	r1, r2, #5
 8007002:	693a      	ldr	r2, [r7, #16]
 8007004:	440a      	add	r2, r1
 8007006:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800700a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800700e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007010:	e023      	b.n	800705a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007012:	78fb      	ldrb	r3, [r7, #3]
 8007014:	015a      	lsls	r2, r3, #5
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	4413      	add	r3, r2
 800701a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800701e:	461a      	mov	r2, r3
 8007020:	f240 2325 	movw	r3, #549	; 0x225
 8007024:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007026:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800702a:	2b00      	cmp	r3, #0
 800702c:	da17      	bge.n	800705e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800702e:	78fb      	ldrb	r3, [r7, #3]
 8007030:	015a      	lsls	r2, r3, #5
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	4413      	add	r3, r2
 8007036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	78fa      	ldrb	r2, [r7, #3]
 800703e:	0151      	lsls	r1, r2, #5
 8007040:	693a      	ldr	r2, [r7, #16]
 8007042:	440a      	add	r2, r1
 8007044:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007048:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800704c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800704e:	e006      	b.n	800705e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	77fb      	strb	r3, [r7, #31]
      break;
 8007054:	e004      	b.n	8007060 <USB_HC_Init+0x14c>
      break;
 8007056:	bf00      	nop
 8007058:	e002      	b.n	8007060 <USB_HC_Init+0x14c>
      break;
 800705a:	bf00      	nop
 800705c:	e000      	b.n	8007060 <USB_HC_Init+0x14c>
      break;
 800705e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007060:	78fb      	ldrb	r3, [r7, #3]
 8007062:	015a      	lsls	r2, r3, #5
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	4413      	add	r3, r2
 8007068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	78fa      	ldrb	r2, [r7, #3]
 8007070:	0151      	lsls	r1, r2, #5
 8007072:	693a      	ldr	r2, [r7, #16]
 8007074:	440a      	add	r2, r1
 8007076:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800707a:	f043 0302 	orr.w	r3, r3, #2
 800707e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007086:	699a      	ldr	r2, [r3, #24]
 8007088:	78fb      	ldrb	r3, [r7, #3]
 800708a:	f003 030f 	and.w	r3, r3, #15
 800708e:	2101      	movs	r1, #1
 8007090:	fa01 f303 	lsl.w	r3, r1, r3
 8007094:	6939      	ldr	r1, [r7, #16]
 8007096:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800709a:	4313      	orrs	r3, r2
 800709c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	699b      	ldr	r3, [r3, #24]
 80070a2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80070aa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	da03      	bge.n	80070ba <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80070b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070b6:	61bb      	str	r3, [r7, #24]
 80070b8:	e001      	b.n	80070be <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80070ba:	2300      	movs	r3, #0
 80070bc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f7ff feff 	bl	8006ec2 <USB_GetHostSpeed>
 80070c4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80070c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	d106      	bne.n	80070dc <USB_HC_Init+0x1c8>
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d003      	beq.n	80070dc <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80070d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80070d8:	617b      	str	r3, [r7, #20]
 80070da:	e001      	b.n	80070e0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80070dc:	2300      	movs	r3, #0
 80070de:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80070e0:	787b      	ldrb	r3, [r7, #1]
 80070e2:	059b      	lsls	r3, r3, #22
 80070e4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80070e8:	78bb      	ldrb	r3, [r7, #2]
 80070ea:	02db      	lsls	r3, r3, #11
 80070ec:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80070f0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80070f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80070f6:	049b      	lsls	r3, r3, #18
 80070f8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80070fc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80070fe:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007100:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007104:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800710a:	78fb      	ldrb	r3, [r7, #3]
 800710c:	0159      	lsls	r1, r3, #5
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	440b      	add	r3, r1
 8007112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007116:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800711c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800711e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007122:	2b03      	cmp	r3, #3
 8007124:	d003      	beq.n	800712e <USB_HC_Init+0x21a>
 8007126:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800712a:	2b01      	cmp	r3, #1
 800712c:	d10f      	bne.n	800714e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800712e:	78fb      	ldrb	r3, [r7, #3]
 8007130:	015a      	lsls	r2, r3, #5
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	4413      	add	r3, r2
 8007136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	78fa      	ldrb	r2, [r7, #3]
 800713e:	0151      	lsls	r1, r2, #5
 8007140:	693a      	ldr	r2, [r7, #16]
 8007142:	440a      	add	r2, r1
 8007144:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007148:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800714c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800714e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007150:	4618      	mov	r0, r3
 8007152:	3720      	adds	r7, #32
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b08c      	sub	sp, #48	; 0x30
 800715c:	af02      	add	r7, sp, #8
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	4613      	mov	r3, r2
 8007164:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	785b      	ldrb	r3, [r3, #1]
 800716e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007170:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007174:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800717a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800717e:	2b00      	cmp	r3, #0
 8007180:	d02d      	beq.n	80071de <USB_HC_StartXfer+0x86>
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	791b      	ldrb	r3, [r3, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d129      	bne.n	80071de <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800718a:	79fb      	ldrb	r3, [r7, #7]
 800718c:	2b01      	cmp	r3, #1
 800718e:	d117      	bne.n	80071c0 <USB_HC_StartXfer+0x68>
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	79db      	ldrb	r3, [r3, #7]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d003      	beq.n	80071a0 <USB_HC_StartXfer+0x48>
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	79db      	ldrb	r3, [r3, #7]
 800719c:	2b02      	cmp	r3, #2
 800719e:	d10f      	bne.n	80071c0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	015a      	lsls	r2, r3, #5
 80071a4:	6a3b      	ldr	r3, [r7, #32]
 80071a6:	4413      	add	r3, r2
 80071a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	69fa      	ldr	r2, [r7, #28]
 80071b0:	0151      	lsls	r1, r2, #5
 80071b2:	6a3a      	ldr	r2, [r7, #32]
 80071b4:	440a      	add	r2, r1
 80071b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071be:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80071c0:	79fb      	ldrb	r3, [r7, #7]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d10b      	bne.n	80071de <USB_HC_StartXfer+0x86>
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	795b      	ldrb	r3, [r3, #5]
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d107      	bne.n	80071de <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	785b      	ldrb	r3, [r3, #1]
 80071d2:	4619      	mov	r1, r3
 80071d4:	68f8      	ldr	r0, [r7, #12]
 80071d6:	f000 fa0f 	bl	80075f8 <USB_DoPing>
      return HAL_OK;
 80071da:	2300      	movs	r3, #0
 80071dc:	e0f8      	b.n	80073d0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	695b      	ldr	r3, [r3, #20]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d018      	beq.n	8007218 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	695b      	ldr	r3, [r3, #20]
 80071ea:	68ba      	ldr	r2, [r7, #8]
 80071ec:	8912      	ldrh	r2, [r2, #8]
 80071ee:	4413      	add	r3, r2
 80071f0:	3b01      	subs	r3, #1
 80071f2:	68ba      	ldr	r2, [r7, #8]
 80071f4:	8912      	ldrh	r2, [r2, #8]
 80071f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80071fa:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80071fc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80071fe:	8b7b      	ldrh	r3, [r7, #26]
 8007200:	429a      	cmp	r2, r3
 8007202:	d90b      	bls.n	800721c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007204:	8b7b      	ldrh	r3, [r7, #26]
 8007206:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007208:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800720a:	68ba      	ldr	r2, [r7, #8]
 800720c:	8912      	ldrh	r2, [r2, #8]
 800720e:	fb03 f202 	mul.w	r2, r3, r2
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	611a      	str	r2, [r3, #16]
 8007216:	e001      	b.n	800721c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007218:	2301      	movs	r3, #1
 800721a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	78db      	ldrb	r3, [r3, #3]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d007      	beq.n	8007234 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007224:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007226:	68ba      	ldr	r2, [r7, #8]
 8007228:	8912      	ldrh	r2, [r2, #8]
 800722a:	fb03 f202 	mul.w	r2, r3, r2
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	611a      	str	r2, [r3, #16]
 8007232:	e003      	b.n	800723c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	695a      	ldr	r2, [r3, #20]
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007244:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007246:	04d9      	lsls	r1, r3, #19
 8007248:	4b63      	ldr	r3, [pc, #396]	; (80073d8 <USB_HC_StartXfer+0x280>)
 800724a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800724c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	7a9b      	ldrb	r3, [r3, #10]
 8007252:	075b      	lsls	r3, r3, #29
 8007254:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007258:	69f9      	ldr	r1, [r7, #28]
 800725a:	0148      	lsls	r0, r1, #5
 800725c:	6a39      	ldr	r1, [r7, #32]
 800725e:	4401      	add	r1, r0
 8007260:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007264:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007266:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007268:	79fb      	ldrb	r3, [r7, #7]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d009      	beq.n	8007282 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	68d9      	ldr	r1, [r3, #12]
 8007272:	69fb      	ldr	r3, [r7, #28]
 8007274:	015a      	lsls	r2, r3, #5
 8007276:	6a3b      	ldr	r3, [r7, #32]
 8007278:	4413      	add	r3, r2
 800727a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800727e:	460a      	mov	r2, r1
 8007280:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007282:	6a3b      	ldr	r3, [r7, #32]
 8007284:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	f003 0301 	and.w	r3, r3, #1
 800728e:	2b00      	cmp	r3, #0
 8007290:	bf0c      	ite	eq
 8007292:	2301      	moveq	r3, #1
 8007294:	2300      	movne	r3, #0
 8007296:	b2db      	uxtb	r3, r3
 8007298:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	015a      	lsls	r2, r3, #5
 800729e:	6a3b      	ldr	r3, [r7, #32]
 80072a0:	4413      	add	r3, r2
 80072a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	69fa      	ldr	r2, [r7, #28]
 80072aa:	0151      	lsls	r1, r2, #5
 80072ac:	6a3a      	ldr	r2, [r7, #32]
 80072ae:	440a      	add	r2, r1
 80072b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072b4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80072b8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	015a      	lsls	r2, r3, #5
 80072be:	6a3b      	ldr	r3, [r7, #32]
 80072c0:	4413      	add	r3, r2
 80072c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	7e7b      	ldrb	r3, [r7, #25]
 80072ca:	075b      	lsls	r3, r3, #29
 80072cc:	69f9      	ldr	r1, [r7, #28]
 80072ce:	0148      	lsls	r0, r1, #5
 80072d0:	6a39      	ldr	r1, [r7, #32]
 80072d2:	4401      	add	r1, r0
 80072d4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80072d8:	4313      	orrs	r3, r2
 80072da:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	015a      	lsls	r2, r3, #5
 80072e0:	6a3b      	ldr	r3, [r7, #32]
 80072e2:	4413      	add	r3, r2
 80072e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80072f2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	78db      	ldrb	r3, [r3, #3]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d004      	beq.n	8007306 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007302:	613b      	str	r3, [r7, #16]
 8007304:	e003      	b.n	800730e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800730c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007314:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	015a      	lsls	r2, r3, #5
 800731a:	6a3b      	ldr	r3, [r7, #32]
 800731c:	4413      	add	r3, r2
 800731e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007322:	461a      	mov	r2, r3
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007328:	79fb      	ldrb	r3, [r7, #7]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d001      	beq.n	8007332 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800732e:	2300      	movs	r3, #0
 8007330:	e04e      	b.n	80073d0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	78db      	ldrb	r3, [r3, #3]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d149      	bne.n	80073ce <USB_HC_StartXfer+0x276>
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	695b      	ldr	r3, [r3, #20]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d045      	beq.n	80073ce <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	79db      	ldrb	r3, [r3, #7]
 8007346:	2b03      	cmp	r3, #3
 8007348:	d830      	bhi.n	80073ac <USB_HC_StartXfer+0x254>
 800734a:	a201      	add	r2, pc, #4	; (adr r2, 8007350 <USB_HC_StartXfer+0x1f8>)
 800734c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007350:	08007361 	.word	0x08007361
 8007354:	08007385 	.word	0x08007385
 8007358:	08007361 	.word	0x08007361
 800735c:	08007385 	.word	0x08007385
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	695b      	ldr	r3, [r3, #20]
 8007364:	3303      	adds	r3, #3
 8007366:	089b      	lsrs	r3, r3, #2
 8007368:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800736a:	8afa      	ldrh	r2, [r7, #22]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007370:	b29b      	uxth	r3, r3
 8007372:	429a      	cmp	r2, r3
 8007374:	d91c      	bls.n	80073b0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	699b      	ldr	r3, [r3, #24]
 800737a:	f043 0220 	orr.w	r2, r3, #32
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	619a      	str	r2, [r3, #24]
        }
        break;
 8007382:	e015      	b.n	80073b0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	695b      	ldr	r3, [r3, #20]
 8007388:	3303      	adds	r3, #3
 800738a:	089b      	lsrs	r3, r3, #2
 800738c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800738e:	8afa      	ldrh	r2, [r7, #22]
 8007390:	6a3b      	ldr	r3, [r7, #32]
 8007392:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	b29b      	uxth	r3, r3
 800739a:	429a      	cmp	r2, r3
 800739c:	d90a      	bls.n	80073b4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	699b      	ldr	r3, [r3, #24]
 80073a2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	619a      	str	r2, [r3, #24]
        }
        break;
 80073aa:	e003      	b.n	80073b4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80073ac:	bf00      	nop
 80073ae:	e002      	b.n	80073b6 <USB_HC_StartXfer+0x25e>
        break;
 80073b0:	bf00      	nop
 80073b2:	e000      	b.n	80073b6 <USB_HC_StartXfer+0x25e>
        break;
 80073b4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	68d9      	ldr	r1, [r3, #12]
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	785a      	ldrb	r2, [r3, #1]
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	695b      	ldr	r3, [r3, #20]
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	2000      	movs	r0, #0
 80073c6:	9000      	str	r0, [sp, #0]
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	f7ff fb31 	bl	8006a30 <USB_WritePacket>
  }

  return HAL_OK;
 80073ce:	2300      	movs	r3, #0
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3728      	adds	r7, #40	; 0x28
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}
 80073d8:	1ff80000 	.word	0x1ff80000

080073dc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80073dc:	b480      	push	{r7}
 80073de:	b085      	sub	sp, #20
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073ee:	695b      	ldr	r3, [r3, #20]
 80073f0:	b29b      	uxth	r3, r3
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3714      	adds	r7, #20
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80073fe:	b480      	push	{r7}
 8007400:	b089      	sub	sp, #36	; 0x24
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
 8007406:	460b      	mov	r3, r1
 8007408:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800740e:	78fb      	ldrb	r3, [r7, #3]
 8007410:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007412:	2300      	movs	r3, #0
 8007414:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007416:	69bb      	ldr	r3, [r7, #24]
 8007418:	015a      	lsls	r2, r3, #5
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	4413      	add	r3, r2
 800741e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	0c9b      	lsrs	r3, r3, #18
 8007426:	f003 0303 	and.w	r3, r3, #3
 800742a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	015a      	lsls	r2, r3, #5
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	4413      	add	r3, r2
 8007434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	0fdb      	lsrs	r3, r3, #31
 800743c:	f003 0301 	and.w	r3, r3, #1
 8007440:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	f003 0320 	and.w	r3, r3, #32
 800744a:	2b20      	cmp	r3, #32
 800744c:	d104      	bne.n	8007458 <USB_HC_Halt+0x5a>
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d101      	bne.n	8007458 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007454:	2300      	movs	r3, #0
 8007456:	e0c8      	b.n	80075ea <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d002      	beq.n	8007464 <USB_HC_Halt+0x66>
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	2b02      	cmp	r3, #2
 8007462:	d163      	bne.n	800752c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007464:	69bb      	ldr	r3, [r7, #24]
 8007466:	015a      	lsls	r2, r3, #5
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	4413      	add	r3, r2
 800746c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	69ba      	ldr	r2, [r7, #24]
 8007474:	0151      	lsls	r1, r2, #5
 8007476:	69fa      	ldr	r2, [r7, #28]
 8007478:	440a      	add	r2, r1
 800747a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800747e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007482:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	f003 0320 	and.w	r3, r3, #32
 800748c:	2b00      	cmp	r3, #0
 800748e:	f040 80ab 	bne.w	80075e8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007496:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800749a:	2b00      	cmp	r3, #0
 800749c:	d133      	bne.n	8007506 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	015a      	lsls	r2, r3, #5
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	4413      	add	r3, r2
 80074a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	69ba      	ldr	r2, [r7, #24]
 80074ae:	0151      	lsls	r1, r2, #5
 80074b0:	69fa      	ldr	r2, [r7, #28]
 80074b2:	440a      	add	r2, r1
 80074b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80074bc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	015a      	lsls	r2, r3, #5
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	4413      	add	r3, r2
 80074c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	69ba      	ldr	r2, [r7, #24]
 80074ce:	0151      	lsls	r1, r2, #5
 80074d0:	69fa      	ldr	r2, [r7, #28]
 80074d2:	440a      	add	r2, r1
 80074d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80074dc:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	3301      	adds	r3, #1
 80074e2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074ea:	d81d      	bhi.n	8007528 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	015a      	lsls	r2, r3, #5
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	4413      	add	r3, r2
 80074f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007502:	d0ec      	beq.n	80074de <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007504:	e070      	b.n	80075e8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007506:	69bb      	ldr	r3, [r7, #24]
 8007508:	015a      	lsls	r2, r3, #5
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	4413      	add	r3, r2
 800750e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	69ba      	ldr	r2, [r7, #24]
 8007516:	0151      	lsls	r1, r2, #5
 8007518:	69fa      	ldr	r2, [r7, #28]
 800751a:	440a      	add	r2, r1
 800751c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007520:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007524:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007526:	e05f      	b.n	80075e8 <USB_HC_Halt+0x1ea>
            break;
 8007528:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800752a:	e05d      	b.n	80075e8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	015a      	lsls	r2, r3, #5
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	4413      	add	r3, r2
 8007534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	69ba      	ldr	r2, [r7, #24]
 800753c:	0151      	lsls	r1, r2, #5
 800753e:	69fa      	ldr	r2, [r7, #28]
 8007540:	440a      	add	r2, r1
 8007542:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007546:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800754a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007552:	691b      	ldr	r3, [r3, #16]
 8007554:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007558:	2b00      	cmp	r3, #0
 800755a:	d133      	bne.n	80075c4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800755c:	69bb      	ldr	r3, [r7, #24]
 800755e:	015a      	lsls	r2, r3, #5
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	4413      	add	r3, r2
 8007564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	69ba      	ldr	r2, [r7, #24]
 800756c:	0151      	lsls	r1, r2, #5
 800756e:	69fa      	ldr	r2, [r7, #28]
 8007570:	440a      	add	r2, r1
 8007572:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007576:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800757a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	015a      	lsls	r2, r3, #5
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	4413      	add	r3, r2
 8007584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	69ba      	ldr	r2, [r7, #24]
 800758c:	0151      	lsls	r1, r2, #5
 800758e:	69fa      	ldr	r2, [r7, #28]
 8007590:	440a      	add	r2, r1
 8007592:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007596:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800759a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	3301      	adds	r3, #1
 80075a0:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075a8:	d81d      	bhi.n	80075e6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	015a      	lsls	r2, r3, #5
 80075ae:	69fb      	ldr	r3, [r7, #28]
 80075b0:	4413      	add	r3, r2
 80075b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075c0:	d0ec      	beq.n	800759c <USB_HC_Halt+0x19e>
 80075c2:	e011      	b.n	80075e8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80075c4:	69bb      	ldr	r3, [r7, #24]
 80075c6:	015a      	lsls	r2, r3, #5
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	4413      	add	r3, r2
 80075cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	69ba      	ldr	r2, [r7, #24]
 80075d4:	0151      	lsls	r1, r2, #5
 80075d6:	69fa      	ldr	r2, [r7, #28]
 80075d8:	440a      	add	r2, r1
 80075da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80075e2:	6013      	str	r3, [r2, #0]
 80075e4:	e000      	b.n	80075e8 <USB_HC_Halt+0x1ea>
          break;
 80075e6:	bf00      	nop
    }
  }

  return HAL_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3724      	adds	r7, #36	; 0x24
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
	...

080075f8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b087      	sub	sp, #28
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	460b      	mov	r3, r1
 8007602:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007608:	78fb      	ldrb	r3, [r7, #3]
 800760a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800760c:	2301      	movs	r3, #1
 800760e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	04da      	lsls	r2, r3, #19
 8007614:	4b15      	ldr	r3, [pc, #84]	; (800766c <USB_DoPing+0x74>)
 8007616:	4013      	ands	r3, r2
 8007618:	693a      	ldr	r2, [r7, #16]
 800761a:	0151      	lsls	r1, r2, #5
 800761c:	697a      	ldr	r2, [r7, #20]
 800761e:	440a      	add	r2, r1
 8007620:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007624:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007628:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	015a      	lsls	r2, r3, #5
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	4413      	add	r3, r2
 8007632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007640:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007648:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	015a      	lsls	r2, r3, #5
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	4413      	add	r3, r2
 8007652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007656:	461a      	mov	r2, r3
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	371c      	adds	r7, #28
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr
 800766a:	bf00      	nop
 800766c:	1ff80000 	.word	0x1ff80000

08007670 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b088      	sub	sp, #32
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007678:	2300      	movs	r3, #0
 800767a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007680:	2300      	movs	r3, #0
 8007682:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f7ff f911 	bl	80068ac <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800768a:	2110      	movs	r1, #16
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f7ff f96b 	bl	8006968 <USB_FlushTxFifo>
 8007692:	4603      	mov	r3, r0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d001      	beq.n	800769c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f7ff f997 	bl	80069d0 <USB_FlushRxFifo>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d001      	beq.n	80076ac <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80076ac:	2300      	movs	r3, #0
 80076ae:	61bb      	str	r3, [r7, #24]
 80076b0:	e01f      	b.n	80076f2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	015a      	lsls	r2, r3, #5
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	4413      	add	r3, r2
 80076ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076c8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80076d0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80076d8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	015a      	lsls	r2, r3, #5
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	4413      	add	r3, r2
 80076e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076e6:	461a      	mov	r2, r3
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	3301      	adds	r3, #1
 80076f0:	61bb      	str	r3, [r7, #24]
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	2b0f      	cmp	r3, #15
 80076f6:	d9dc      	bls.n	80076b2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80076f8:	2300      	movs	r3, #0
 80076fa:	61bb      	str	r3, [r7, #24]
 80076fc:	e034      	b.n	8007768 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	015a      	lsls	r2, r3, #5
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	4413      	add	r3, r2
 8007706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007714:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800771c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007724:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	015a      	lsls	r2, r3, #5
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	4413      	add	r3, r2
 800772e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007732:	461a      	mov	r2, r3
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	3301      	adds	r3, #1
 800773c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007744:	d80c      	bhi.n	8007760 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007746:	69bb      	ldr	r3, [r7, #24]
 8007748:	015a      	lsls	r2, r3, #5
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	4413      	add	r3, r2
 800774e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007758:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800775c:	d0ec      	beq.n	8007738 <USB_StopHost+0xc8>
 800775e:	e000      	b.n	8007762 <USB_StopHost+0xf2>
        break;
 8007760:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007762:	69bb      	ldr	r3, [r7, #24]
 8007764:	3301      	adds	r3, #1
 8007766:	61bb      	str	r3, [r7, #24]
 8007768:	69bb      	ldr	r3, [r7, #24]
 800776a:	2b0f      	cmp	r3, #15
 800776c:	d9c7      	bls.n	80076fe <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007774:	461a      	mov	r2, r3
 8007776:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800777a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007782:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f7ff f880 	bl	800688a <USB_EnableGlobalInt>

  return ret;
 800778a:	7ffb      	ldrb	r3, [r7, #31]
}
 800778c:	4618      	mov	r0, r3
 800778e:	3720      	adds	r7, #32
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007794:	b590      	push	{r4, r7, lr}
 8007796:	b089      	sub	sp, #36	; 0x24
 8007798:	af04      	add	r7, sp, #16
 800779a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800779c:	2301      	movs	r3, #1
 800779e:	2202      	movs	r2, #2
 80077a0:	2102      	movs	r1, #2
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fcb8 	bl	8008118 <USBH_FindInterface>
 80077a8:	4603      	mov	r3, r0
 80077aa:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80077ac:	7bfb      	ldrb	r3, [r7, #15]
 80077ae:	2bff      	cmp	r3, #255	; 0xff
 80077b0:	d002      	beq.n	80077b8 <USBH_CDC_InterfaceInit+0x24>
 80077b2:	7bfb      	ldrb	r3, [r7, #15]
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d901      	bls.n	80077bc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80077b8:	2302      	movs	r3, #2
 80077ba:	e13d      	b.n	8007a38 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80077bc:	7bfb      	ldrb	r3, [r7, #15]
 80077be:	4619      	mov	r1, r3
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 fc8d 	bl	80080e0 <USBH_SelectInterface>
 80077c6:	4603      	mov	r3, r0
 80077c8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80077ca:	7bbb      	ldrb	r3, [r7, #14]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d001      	beq.n	80077d4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80077d0:	2302      	movs	r3, #2
 80077d2:	e131      	b.n	8007a38 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80077da:	2050      	movs	r0, #80	; 0x50
 80077dc:	f005 fa8a 	bl	800ccf4 <malloc>
 80077e0:	4603      	mov	r3, r0
 80077e2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077ea:	69db      	ldr	r3, [r3, #28]
 80077ec:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d101      	bne.n	80077f8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80077f4:	2302      	movs	r3, #2
 80077f6:	e11f      	b.n	8007a38 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80077f8:	2250      	movs	r2, #80	; 0x50
 80077fa:	2100      	movs	r1, #0
 80077fc:	68b8      	ldr	r0, [r7, #8]
 80077fe:	f005 fd3d 	bl	800d27c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007802:	7bfb      	ldrb	r3, [r7, #15]
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	211a      	movs	r1, #26
 8007808:	fb01 f303 	mul.w	r3, r1, r3
 800780c:	4413      	add	r3, r2
 800780e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	b25b      	sxtb	r3, r3
 8007816:	2b00      	cmp	r3, #0
 8007818:	da15      	bge.n	8007846 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800781a:	7bfb      	ldrb	r3, [r7, #15]
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	211a      	movs	r1, #26
 8007820:	fb01 f303 	mul.w	r3, r1, r3
 8007824:	4413      	add	r3, r2
 8007826:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800782a:	781a      	ldrb	r2, [r3, #0]
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007830:	7bfb      	ldrb	r3, [r7, #15]
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	211a      	movs	r1, #26
 8007836:	fb01 f303 	mul.w	r3, r1, r3
 800783a:	4413      	add	r3, r2
 800783c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007840:	881a      	ldrh	r2, [r3, #0]
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	785b      	ldrb	r3, [r3, #1]
 800784a:	4619      	mov	r1, r3
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f002 f98a 	bl	8009b66 <USBH_AllocPipe>
 8007852:	4603      	mov	r3, r0
 8007854:	461a      	mov	r2, r3
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	7819      	ldrb	r1, [r3, #0]
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	7858      	ldrb	r0, [r3, #1]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800786e:	68ba      	ldr	r2, [r7, #8]
 8007870:	8952      	ldrh	r2, [r2, #10]
 8007872:	9202      	str	r2, [sp, #8]
 8007874:	2203      	movs	r2, #3
 8007876:	9201      	str	r2, [sp, #4]
 8007878:	9300      	str	r3, [sp, #0]
 800787a:	4623      	mov	r3, r4
 800787c:	4602      	mov	r2, r0
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f002 f942 	bl	8009b08 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	2200      	movs	r2, #0
 800788a:	4619      	mov	r1, r3
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f005 f9ad 	bl	800cbec <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007892:	2300      	movs	r3, #0
 8007894:	2200      	movs	r2, #0
 8007896:	210a      	movs	r1, #10
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 fc3d 	bl	8008118 <USBH_FindInterface>
 800789e:	4603      	mov	r3, r0
 80078a0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80078a2:	7bfb      	ldrb	r3, [r7, #15]
 80078a4:	2bff      	cmp	r3, #255	; 0xff
 80078a6:	d002      	beq.n	80078ae <USBH_CDC_InterfaceInit+0x11a>
 80078a8:	7bfb      	ldrb	r3, [r7, #15]
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d901      	bls.n	80078b2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80078ae:	2302      	movs	r3, #2
 80078b0:	e0c2      	b.n	8007a38 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80078b2:	7bfb      	ldrb	r3, [r7, #15]
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	211a      	movs	r1, #26
 80078b8:	fb01 f303 	mul.w	r3, r1, r3
 80078bc:	4413      	add	r3, r2
 80078be:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	b25b      	sxtb	r3, r3
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	da16      	bge.n	80078f8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80078ca:	7bfb      	ldrb	r3, [r7, #15]
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	211a      	movs	r1, #26
 80078d0:	fb01 f303 	mul.w	r3, r1, r3
 80078d4:	4413      	add	r3, r2
 80078d6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80078da:	781a      	ldrb	r2, [r3, #0]
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80078e0:	7bfb      	ldrb	r3, [r7, #15]
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	211a      	movs	r1, #26
 80078e6:	fb01 f303 	mul.w	r3, r1, r3
 80078ea:	4413      	add	r3, r2
 80078ec:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80078f0:	881a      	ldrh	r2, [r3, #0]
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	835a      	strh	r2, [r3, #26]
 80078f6:	e015      	b.n	8007924 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80078f8:	7bfb      	ldrb	r3, [r7, #15]
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	211a      	movs	r1, #26
 80078fe:	fb01 f303 	mul.w	r3, r1, r3
 8007902:	4413      	add	r3, r2
 8007904:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007908:	781a      	ldrb	r2, [r3, #0]
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800790e:	7bfb      	ldrb	r3, [r7, #15]
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	211a      	movs	r1, #26
 8007914:	fb01 f303 	mul.w	r3, r1, r3
 8007918:	4413      	add	r3, r2
 800791a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800791e:	881a      	ldrh	r2, [r3, #0]
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007924:	7bfb      	ldrb	r3, [r7, #15]
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	211a      	movs	r1, #26
 800792a:	fb01 f303 	mul.w	r3, r1, r3
 800792e:	4413      	add	r3, r2
 8007930:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	b25b      	sxtb	r3, r3
 8007938:	2b00      	cmp	r3, #0
 800793a:	da16      	bge.n	800796a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800793c:	7bfb      	ldrb	r3, [r7, #15]
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	211a      	movs	r1, #26
 8007942:	fb01 f303 	mul.w	r3, r1, r3
 8007946:	4413      	add	r3, r2
 8007948:	f203 3356 	addw	r3, r3, #854	; 0x356
 800794c:	781a      	ldrb	r2, [r3, #0]
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007952:	7bfb      	ldrb	r3, [r7, #15]
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	211a      	movs	r1, #26
 8007958:	fb01 f303 	mul.w	r3, r1, r3
 800795c:	4413      	add	r3, r2
 800795e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007962:	881a      	ldrh	r2, [r3, #0]
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	835a      	strh	r2, [r3, #26]
 8007968:	e015      	b.n	8007996 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800796a:	7bfb      	ldrb	r3, [r7, #15]
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	211a      	movs	r1, #26
 8007970:	fb01 f303 	mul.w	r3, r1, r3
 8007974:	4413      	add	r3, r2
 8007976:	f203 3356 	addw	r3, r3, #854	; 0x356
 800797a:	781a      	ldrb	r2, [r3, #0]
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007980:	7bfb      	ldrb	r3, [r7, #15]
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	211a      	movs	r1, #26
 8007986:	fb01 f303 	mul.w	r3, r1, r3
 800798a:	4413      	add	r3, r2
 800798c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007990:	881a      	ldrh	r2, [r3, #0]
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	7b9b      	ldrb	r3, [r3, #14]
 800799a:	4619      	mov	r1, r3
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f002 f8e2 	bl	8009b66 <USBH_AllocPipe>
 80079a2:	4603      	mov	r3, r0
 80079a4:	461a      	mov	r2, r3
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	7bdb      	ldrb	r3, [r3, #15]
 80079ae:	4619      	mov	r1, r3
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f002 f8d8 	bl	8009b66 <USBH_AllocPipe>
 80079b6:	4603      	mov	r3, r0
 80079b8:	461a      	mov	r2, r3
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	7b59      	ldrb	r1, [r3, #13]
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	7b98      	ldrb	r0, [r3, #14]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80079d2:	68ba      	ldr	r2, [r7, #8]
 80079d4:	8b12      	ldrh	r2, [r2, #24]
 80079d6:	9202      	str	r2, [sp, #8]
 80079d8:	2202      	movs	r2, #2
 80079da:	9201      	str	r2, [sp, #4]
 80079dc:	9300      	str	r3, [sp, #0]
 80079de:	4623      	mov	r3, r4
 80079e0:	4602      	mov	r2, r0
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f002 f890 	bl	8009b08 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	7b19      	ldrb	r1, [r3, #12]
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	7bd8      	ldrb	r0, [r3, #15]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80079fc:	68ba      	ldr	r2, [r7, #8]
 80079fe:	8b52      	ldrh	r2, [r2, #26]
 8007a00:	9202      	str	r2, [sp, #8]
 8007a02:	2202      	movs	r2, #2
 8007a04:	9201      	str	r2, [sp, #4]
 8007a06:	9300      	str	r3, [sp, #0]
 8007a08:	4623      	mov	r3, r4
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f002 f87b 	bl	8009b08 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	2200      	movs	r2, #0
 8007a16:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	7b5b      	ldrb	r3, [r3, #13]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	4619      	mov	r1, r3
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f005 f8e2 	bl	800cbec <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	7b1b      	ldrb	r3, [r3, #12]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	4619      	mov	r1, r3
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f005 f8db 	bl	800cbec <USBH_LL_SetToggle>

  return USBH_OK;
 8007a36:	2300      	movs	r3, #0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3714      	adds	r7, #20
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd90      	pop	{r4, r7, pc}

08007a40 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a4e:	69db      	ldr	r3, [r3, #28]
 8007a50:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00e      	beq.n	8007a78 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	4619      	mov	r1, r3
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f002 f870 	bl	8009b46 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f002 f89b 	bl	8009ba8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2200      	movs	r2, #0
 8007a76:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	7b1b      	ldrb	r3, [r3, #12]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d00e      	beq.n	8007a9e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	7b1b      	ldrb	r3, [r3, #12]
 8007a84:	4619      	mov	r1, r3
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f002 f85d 	bl	8009b46 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	7b1b      	ldrb	r3, [r3, #12]
 8007a90:	4619      	mov	r1, r3
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f002 f888 	bl	8009ba8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	7b5b      	ldrb	r3, [r3, #13]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d00e      	beq.n	8007ac4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	7b5b      	ldrb	r3, [r3, #13]
 8007aaa:	4619      	mov	r1, r3
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f002 f84a 	bl	8009b46 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	7b5b      	ldrb	r3, [r3, #13]
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f002 f875 	bl	8009ba8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007aca:	69db      	ldr	r3, [r3, #28]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d00b      	beq.n	8007ae8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ad6:	69db      	ldr	r3, [r3, #28]
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f005 f913 	bl	800cd04 <free>
    phost->pActiveClass->pData = 0U;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3710      	adds	r7, #16
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}

08007af2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007af2:	b580      	push	{r7, lr}
 8007af4:	b084      	sub	sp, #16
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b00:	69db      	ldr	r3, [r3, #28]
 8007b02:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	3340      	adds	r3, #64	; 0x40
 8007b08:	4619      	mov	r1, r3
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 f8b1 	bl	8007c72 <GetLineCoding>
 8007b10:	4603      	mov	r3, r0
 8007b12:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007b14:	7afb      	ldrb	r3, [r7, #11]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d105      	bne.n	8007b26 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b20:	2102      	movs	r1, #2
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007b26:	7afb      	ldrb	r3, [r7, #11]
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3710      	adds	r7, #16
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b46:	69db      	ldr	r3, [r3, #28]
 8007b48:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007b50:	2b04      	cmp	r3, #4
 8007b52:	d877      	bhi.n	8007c44 <USBH_CDC_Process+0x114>
 8007b54:	a201      	add	r2, pc, #4	; (adr r2, 8007b5c <USBH_CDC_Process+0x2c>)
 8007b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b5a:	bf00      	nop
 8007b5c:	08007b71 	.word	0x08007b71
 8007b60:	08007b77 	.word	0x08007b77
 8007b64:	08007ba7 	.word	0x08007ba7
 8007b68:	08007c1b 	.word	0x08007c1b
 8007b6c:	08007c29 	.word	0x08007c29
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007b70:	2300      	movs	r3, #0
 8007b72:	73fb      	strb	r3, [r7, #15]
      break;
 8007b74:	e06d      	b.n	8007c52 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 f897 	bl	8007cb0 <SetLineCoding>
 8007b82:	4603      	mov	r3, r0
 8007b84:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007b86:	7bbb      	ldrb	r3, [r7, #14]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d104      	bne.n	8007b96 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	2202      	movs	r2, #2
 8007b90:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007b94:	e058      	b.n	8007c48 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007b96:	7bbb      	ldrb	r3, [r7, #14]
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d055      	beq.n	8007c48 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	2204      	movs	r2, #4
 8007ba0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007ba4:	e050      	b.n	8007c48 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	3340      	adds	r3, #64	; 0x40
 8007baa:	4619      	mov	r1, r3
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 f860 	bl	8007c72 <GetLineCoding>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007bb6:	7bbb      	ldrb	r3, [r7, #14]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d126      	bne.n	8007c0a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bce:	791b      	ldrb	r3, [r3, #4]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d13b      	bne.n	8007c4c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bde:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d133      	bne.n	8007c4c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bee:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d12b      	bne.n	8007c4c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bfc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d124      	bne.n	8007c4c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 f982 	bl	8007f0c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007c08:	e020      	b.n	8007c4c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007c0a:	7bbb      	ldrb	r3, [r7, #14]
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d01d      	beq.n	8007c4c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	2204      	movs	r2, #4
 8007c14:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007c18:	e018      	b.n	8007c4c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 f867 	bl	8007cee <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 f8f6 	bl	8007e12 <CDC_ProcessReception>
      break;
 8007c26:	e014      	b.n	8007c52 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007c28:	2100      	movs	r1, #0
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f001 f95b 	bl	8008ee6 <USBH_ClrFeature>
 8007c30:	4603      	mov	r3, r0
 8007c32:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007c34:	7bbb      	ldrb	r3, [r7, #14]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d10a      	bne.n	8007c50 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007c42:	e005      	b.n	8007c50 <USBH_CDC_Process+0x120>

    default:
      break;
 8007c44:	bf00      	nop
 8007c46:	e004      	b.n	8007c52 <USBH_CDC_Process+0x122>
      break;
 8007c48:	bf00      	nop
 8007c4a:	e002      	b.n	8007c52 <USBH_CDC_Process+0x122>
      break;
 8007c4c:	bf00      	nop
 8007c4e:	e000      	b.n	8007c52 <USBH_CDC_Process+0x122>
      break;
 8007c50:	bf00      	nop

  }

  return status;
 8007c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007c64:	2300      	movs	r3, #0
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	370c      	adds	r7, #12
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr

08007c72 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b082      	sub	sp, #8
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
 8007c7a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	22a1      	movs	r2, #161	; 0xa1
 8007c80:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2221      	movs	r2, #33	; 0x21
 8007c86:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2207      	movs	r2, #7
 8007c98:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	2207      	movs	r2, #7
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f001 fbef 	bl	8009484 <USBH_CtlReq>
 8007ca6:	4603      	mov	r3, r0
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3708      	adds	r7, #8
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2221      	movs	r2, #33	; 0x21
 8007cbe:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2220      	movs	r2, #32
 8007cc4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2207      	movs	r2, #7
 8007cd6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	2207      	movs	r2, #7
 8007cdc:	4619      	mov	r1, r3
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f001 fbd0 	bl	8009484 <USBH_CtlReq>
 8007ce4:	4603      	mov	r3, r0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3708      	adds	r7, #8
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}

08007cee <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007cee:	b580      	push	{r7, lr}
 8007cf0:	b086      	sub	sp, #24
 8007cf2:	af02      	add	r7, sp, #8
 8007cf4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cfc:	69db      	ldr	r3, [r3, #28]
 8007cfe:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007d00:	2300      	movs	r3, #0
 8007d02:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d002      	beq.n	8007d14 <CDC_ProcessTransmission+0x26>
 8007d0e:	2b02      	cmp	r3, #2
 8007d10:	d023      	beq.n	8007d5a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007d12:	e07a      	b.n	8007e0a <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d18:	68fa      	ldr	r2, [r7, #12]
 8007d1a:	8b12      	ldrh	r2, [r2, #24]
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d90b      	bls.n	8007d38 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	69d9      	ldr	r1, [r3, #28]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	8b1a      	ldrh	r2, [r3, #24]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	7b5b      	ldrb	r3, [r3, #13]
 8007d2c:	2001      	movs	r0, #1
 8007d2e:	9000      	str	r0, [sp, #0]
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f001 fea6 	bl	8009a82 <USBH_BulkSendData>
 8007d36:	e00b      	b.n	8007d50 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007d40:	b29a      	uxth	r2, r3
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	7b5b      	ldrb	r3, [r3, #13]
 8007d46:	2001      	movs	r0, #1
 8007d48:	9000      	str	r0, [sp, #0]
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f001 fe99 	bl	8009a82 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2202      	movs	r2, #2
 8007d54:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007d58:	e057      	b.n	8007e0a <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	7b5b      	ldrb	r3, [r3, #13]
 8007d5e:	4619      	mov	r1, r3
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f004 ff19 	bl	800cb98 <USBH_LL_GetURBState>
 8007d66:	4603      	mov	r3, r0
 8007d68:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007d6a:	7afb      	ldrb	r3, [r7, #11]
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d136      	bne.n	8007dde <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d74:	68fa      	ldr	r2, [r7, #12]
 8007d76:	8b12      	ldrh	r2, [r2, #24]
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d90e      	bls.n	8007d9a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d80:	68fa      	ldr	r2, [r7, #12]
 8007d82:	8b12      	ldrh	r2, [r2, #24]
 8007d84:	1a9a      	subs	r2, r3, r2
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	69db      	ldr	r3, [r3, #28]
 8007d8e:	68fa      	ldr	r2, [r7, #12]
 8007d90:	8b12      	ldrh	r2, [r2, #24]
 8007d92:	441a      	add	r2, r3
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	61da      	str	r2, [r3, #28]
 8007d98:	e002      	b.n	8007da0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d004      	beq.n	8007db2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8007db0:	e006      	b.n	8007dc0 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2200      	movs	r2, #0
 8007db6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 f892 	bl	8007ee4 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2204      	movs	r2, #4
 8007dc4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	f002 f86e 	bl	8009eb8 <osMessagePut>
      break;
 8007ddc:	e014      	b.n	8007e08 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8007dde:	7afb      	ldrb	r3, [r7, #11]
 8007de0:	2b02      	cmp	r3, #2
 8007de2:	d111      	bne.n	8007e08 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2204      	movs	r2, #4
 8007df0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007e00:	2200      	movs	r2, #0
 8007e02:	4619      	mov	r1, r3
 8007e04:	f002 f858 	bl	8009eb8 <osMessagePut>
      break;
 8007e08:	bf00      	nop
  }
}
 8007e0a:	bf00      	nop
 8007e0c:	3710      	adds	r7, #16
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b086      	sub	sp, #24
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e20:	69db      	ldr	r3, [r3, #28]
 8007e22:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007e24:	2300      	movs	r3, #0
 8007e26:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007e2e:	2b03      	cmp	r3, #3
 8007e30:	d002      	beq.n	8007e38 <CDC_ProcessReception+0x26>
 8007e32:	2b04      	cmp	r3, #4
 8007e34:	d00e      	beq.n	8007e54 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007e36:	e051      	b.n	8007edc <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	6a19      	ldr	r1, [r3, #32]
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	8b5a      	ldrh	r2, [r3, #26]
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	7b1b      	ldrb	r3, [r3, #12]
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f001 fe41 	bl	8009acc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	2204      	movs	r2, #4
 8007e4e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007e52:	e043      	b.n	8007edc <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	7b1b      	ldrb	r3, [r3, #12]
 8007e58:	4619      	mov	r1, r3
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f004 fe9c 	bl	800cb98 <USBH_LL_GetURBState>
 8007e60:	4603      	mov	r3, r0
 8007e62:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007e64:	7cfb      	ldrb	r3, [r7, #19]
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d137      	bne.n	8007eda <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	7b1b      	ldrb	r3, [r3, #12]
 8007e6e:	4619      	mov	r1, r3
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f004 fdff 	bl	800ca74 <USBH_LL_GetLastXferSize>
 8007e76:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d016      	beq.n	8007eb0 <CDC_ProcessReception+0x9e>
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	8b5b      	ldrh	r3, [r3, #26]
 8007e86:	461a      	mov	r2, r3
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d910      	bls.n	8007eb0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	1ad2      	subs	r2, r2, r3
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	6a1a      	ldr	r2, [r3, #32]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	441a      	add	r2, r3
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	2203      	movs	r2, #3
 8007eaa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8007eae:	e006      	b.n	8007ebe <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 f81d 	bl	8007ef8 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2204      	movs	r2, #4
 8007ec2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	f001 ffef 	bl	8009eb8 <osMessagePut>
      break;
 8007eda:	bf00      	nop
  }
}
 8007edc:	bf00      	nop
 8007ede:	3718      	adds	r7, #24
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b083      	sub	sp, #12
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007eec:	bf00      	nop
 8007eee:	370c      	adds	r7, #12
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007f00:	bf00      	nop
 8007f02:	370c      	adds	r7, #12
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007f14:	bf00      	nop
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007f20:	b5b0      	push	{r4, r5, r7, lr}
 8007f22:	b090      	sub	sp, #64	; 0x40
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	60f8      	str	r0, [r7, #12]
 8007f28:	60b9      	str	r1, [r7, #8]
 8007f2a:	4613      	mov	r3, r2
 8007f2c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d101      	bne.n	8007f38 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007f34:	2302      	movs	r3, #2
 8007f36:	e04d      	b.n	8007fd4 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	79fa      	ldrb	r2, [r7, #7]
 8007f3c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2200      	movs	r2, #0
 8007f44:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f000 f847 	bl	8007fe4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2200      	movs	r2, #0
 8007f62:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2200      	movs	r2, #0
 8007f72:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d003      	beq.n	8007f84 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	68ba      	ldr	r2, [r7, #8]
 8007f80:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8007f84:	4b15      	ldr	r3, [pc, #84]	; (8007fdc <USBH_Init+0xbc>)
 8007f86:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8007f8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007f8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8007f90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007f94:	2100      	movs	r1, #0
 8007f96:	4618      	mov	r0, r3
 8007f98:	f001 ff66 	bl	8009e68 <osMessageCreate>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8007fa4:	4b0e      	ldr	r3, [pc, #56]	; (8007fe0 <USBH_Init+0xc0>)
 8007fa6:	f107 0414 	add.w	r4, r7, #20
 8007faa:	461d      	mov	r5, r3
 8007fac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007fae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007fb0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007fb4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8007fb8:	f107 0314 	add.w	r3, r7, #20
 8007fbc:	68f9      	ldr	r1, [r7, #12]
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f001 fe65 	bl	8009c8e <osThreadCreate>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f004 fc93 	bl	800c8f8 <USBH_LL_Init>

  return USBH_OK;
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3740      	adds	r7, #64	; 0x40
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bdb0      	pop	{r4, r5, r7, pc}
 8007fdc:	0800dde4 	.word	0x0800dde4
 8007fe0:	0800de00 	.word	0x0800de00

08007fe4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b085      	sub	sp, #20
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007fec:	2300      	movs	r3, #0
 8007fee:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	60fb      	str	r3, [r7, #12]
 8007ff4:	e009      	b.n	800800a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	33e0      	adds	r3, #224	; 0xe0
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	4413      	add	r3, r2
 8008000:	2200      	movs	r2, #0
 8008002:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	3301      	adds	r3, #1
 8008008:	60fb      	str	r3, [r7, #12]
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2b0f      	cmp	r3, #15
 800800e:	d9f2      	bls.n	8007ff6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008010:	2300      	movs	r3, #0
 8008012:	60fb      	str	r3, [r7, #12]
 8008014:	e009      	b.n	800802a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	4413      	add	r3, r2
 800801c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008020:	2200      	movs	r2, #0
 8008022:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	3301      	adds	r3, #1
 8008028:	60fb      	str	r3, [r7, #12]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008030:	d3f1      	bcc.n	8008016 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2201      	movs	r2, #1
 8008042:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2201      	movs	r2, #1
 8008050:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2240      	movs	r2, #64	; 0x40
 8008056:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2201      	movs	r2, #1
 800806a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800807e:	2300      	movs	r3, #0
}
 8008080:	4618      	mov	r0, r3
 8008082:	3714      	adds	r7, #20
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800808c:	b480      	push	{r7}
 800808e:	b085      	sub	sp, #20
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008096:	2300      	movs	r3, #0
 8008098:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d016      	beq.n	80080ce <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d10e      	bne.n	80080c8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80080b0:	1c59      	adds	r1, r3, #1
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	33de      	adds	r3, #222	; 0xde
 80080bc:	6839      	ldr	r1, [r7, #0]
 80080be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80080c2:	2300      	movs	r3, #0
 80080c4:	73fb      	strb	r3, [r7, #15]
 80080c6:	e004      	b.n	80080d2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80080c8:	2302      	movs	r3, #2
 80080ca:	73fb      	strb	r3, [r7, #15]
 80080cc:	e001      	b.n	80080d2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80080ce:	2302      	movs	r3, #2
 80080d0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80080d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3714      	adds	r7, #20
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr

080080e0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b085      	sub	sp, #20
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	460b      	mov	r3, r1
 80080ea:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80080ec:	2300      	movs	r3, #0
 80080ee:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80080f6:	78fa      	ldrb	r2, [r7, #3]
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d204      	bcs.n	8008106 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	78fa      	ldrb	r2, [r7, #3]
 8008100:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008104:	e001      	b.n	800810a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008106:	2302      	movs	r3, #2
 8008108:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800810a:	7bfb      	ldrb	r3, [r7, #15]
}
 800810c:	4618      	mov	r0, r3
 800810e:	3714      	adds	r7, #20
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008118:	b480      	push	{r7}
 800811a:	b087      	sub	sp, #28
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	4608      	mov	r0, r1
 8008122:	4611      	mov	r1, r2
 8008124:	461a      	mov	r2, r3
 8008126:	4603      	mov	r3, r0
 8008128:	70fb      	strb	r3, [r7, #3]
 800812a:	460b      	mov	r3, r1
 800812c:	70bb      	strb	r3, [r7, #2]
 800812e:	4613      	mov	r3, r2
 8008130:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008132:	2300      	movs	r3, #0
 8008134:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008136:	2300      	movs	r3, #0
 8008138:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008140:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008142:	e025      	b.n	8008190 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008144:	7dfb      	ldrb	r3, [r7, #23]
 8008146:	221a      	movs	r2, #26
 8008148:	fb02 f303 	mul.w	r3, r2, r3
 800814c:	3308      	adds	r3, #8
 800814e:	68fa      	ldr	r2, [r7, #12]
 8008150:	4413      	add	r3, r2
 8008152:	3302      	adds	r3, #2
 8008154:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	795b      	ldrb	r3, [r3, #5]
 800815a:	78fa      	ldrb	r2, [r7, #3]
 800815c:	429a      	cmp	r2, r3
 800815e:	d002      	beq.n	8008166 <USBH_FindInterface+0x4e>
 8008160:	78fb      	ldrb	r3, [r7, #3]
 8008162:	2bff      	cmp	r3, #255	; 0xff
 8008164:	d111      	bne.n	800818a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800816a:	78ba      	ldrb	r2, [r7, #2]
 800816c:	429a      	cmp	r2, r3
 800816e:	d002      	beq.n	8008176 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008170:	78bb      	ldrb	r3, [r7, #2]
 8008172:	2bff      	cmp	r3, #255	; 0xff
 8008174:	d109      	bne.n	800818a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800817a:	787a      	ldrb	r2, [r7, #1]
 800817c:	429a      	cmp	r2, r3
 800817e:	d002      	beq.n	8008186 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008180:	787b      	ldrb	r3, [r7, #1]
 8008182:	2bff      	cmp	r3, #255	; 0xff
 8008184:	d101      	bne.n	800818a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008186:	7dfb      	ldrb	r3, [r7, #23]
 8008188:	e006      	b.n	8008198 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800818a:	7dfb      	ldrb	r3, [r7, #23]
 800818c:	3301      	adds	r3, #1
 800818e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008190:	7dfb      	ldrb	r3, [r7, #23]
 8008192:	2b01      	cmp	r3, #1
 8008194:	d9d6      	bls.n	8008144 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008196:	23ff      	movs	r3, #255	; 0xff
}
 8008198:	4618      	mov	r0, r3
 800819a:	371c      	adds	r7, #28
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f004 fbe9 	bl	800c984 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80081b2:	2101      	movs	r1, #1
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f004 fd02 	bl	800cbbe <USBH_LL_DriverVBUS>

  return USBH_OK;
 80081ba:	2300      	movs	r3, #0
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3708      	adds	r7, #8
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b088      	sub	sp, #32
 80081c8:	af04      	add	r7, sp, #16
 80081ca:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80081cc:	2302      	movs	r3, #2
 80081ce:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80081d0:	2300      	movs	r3, #0
 80081d2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d102      	bne.n	80081e6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2203      	movs	r2, #3
 80081e4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	2b0b      	cmp	r3, #11
 80081ee:	f200 8247 	bhi.w	8008680 <USBH_Process+0x4bc>
 80081f2:	a201      	add	r2, pc, #4	; (adr r2, 80081f8 <USBH_Process+0x34>)
 80081f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f8:	08008229 	.word	0x08008229
 80081fc:	08008277 	.word	0x08008277
 8008200:	080082fb 	.word	0x080082fb
 8008204:	080085ff 	.word	0x080085ff
 8008208:	08008681 	.word	0x08008681
 800820c:	080083bb 	.word	0x080083bb
 8008210:	08008589 	.word	0x08008589
 8008214:	0800840d 	.word	0x0800840d
 8008218:	08008449 	.word	0x08008449
 800821c:	08008483 	.word	0x08008483
 8008220:	080084e1 	.word	0x080084e1
 8008224:	080085e7 	.word	0x080085e7
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800822e:	b2db      	uxtb	r3, r3
 8008230:	2b00      	cmp	r3, #0
 8008232:	f000 8227 	beq.w	8008684 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2201      	movs	r2, #1
 800823a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800823c:	20c8      	movs	r0, #200	; 0xc8
 800823e:	f004 fd05 	bl	800cc4c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f004 fbfb 	bl	800ca3e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2201      	movs	r2, #1
 800825c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800826c:	2200      	movs	r2, #0
 800826e:	4619      	mov	r1, r3
 8008270:	f001 fe22 	bl	8009eb8 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008274:	e206      	b.n	8008684 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800827c:	2b01      	cmp	r3, #1
 800827e:	d107      	bne.n	8008290 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2202      	movs	r2, #2
 800828c:	701a      	strb	r2, [r3, #0]
 800828e:	e025      	b.n	80082dc <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008296:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800829a:	d914      	bls.n	80082c6 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80082a2:	3301      	adds	r3, #1
 80082a4:	b2da      	uxtb	r2, r3
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80082b2:	2b03      	cmp	r3, #3
 80082b4:	d903      	bls.n	80082be <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	220d      	movs	r2, #13
 80082ba:	701a      	strb	r2, [r3, #0]
 80082bc:	e00e      	b.n	80082dc <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2200      	movs	r2, #0
 80082c2:	701a      	strb	r2, [r3, #0]
 80082c4:	e00a      	b.n	80082dc <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80082cc:	f103 020a 	add.w	r2, r3, #10
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80082d6:	200a      	movs	r0, #10
 80082d8:	f004 fcb8 	bl	800cc4c <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80082f0:	2200      	movs	r2, #0
 80082f2:	4619      	mov	r1, r3
 80082f4:	f001 fde0 	bl	8009eb8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80082f8:	e1cb      	b.n	8008692 <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008300:	2b00      	cmp	r3, #0
 8008302:	d005      	beq.n	8008310 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800830a:	2104      	movs	r1, #4
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008310:	2064      	movs	r0, #100	; 0x64
 8008312:	f004 fc9b 	bl	800cc4c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f004 fb6a 	bl	800c9f0 <USBH_LL_GetSpeed>
 800831c:	4603      	mov	r3, r0
 800831e:	461a      	mov	r2, r3
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2205      	movs	r2, #5
 800832a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800832c:	2100      	movs	r1, #0
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f001 fc19 	bl	8009b66 <USBH_AllocPipe>
 8008334:	4603      	mov	r3, r0
 8008336:	461a      	mov	r2, r3
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800833c:	2180      	movs	r1, #128	; 0x80
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f001 fc11 	bl	8009b66 <USBH_AllocPipe>
 8008344:	4603      	mov	r3, r0
 8008346:	461a      	mov	r2, r3
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	7919      	ldrb	r1, [r3, #4]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008360:	b292      	uxth	r2, r2
 8008362:	9202      	str	r2, [sp, #8]
 8008364:	2200      	movs	r2, #0
 8008366:	9201      	str	r2, [sp, #4]
 8008368:	9300      	str	r3, [sp, #0]
 800836a:	4603      	mov	r3, r0
 800836c:	2280      	movs	r2, #128	; 0x80
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f001 fbca 	bl	8009b08 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	7959      	ldrb	r1, [r3, #5]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008388:	b292      	uxth	r2, r2
 800838a:	9202      	str	r2, [sp, #8]
 800838c:	2200      	movs	r2, #0
 800838e:	9201      	str	r2, [sp, #4]
 8008390:	9300      	str	r3, [sp, #0]
 8008392:	4603      	mov	r3, r0
 8008394:	2200      	movs	r2, #0
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f001 fbb6 	bl	8009b08 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80083b0:	2200      	movs	r2, #0
 80083b2:	4619      	mov	r1, r3
 80083b4:	f001 fd80 	bl	8009eb8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80083b8:	e16b      	b.n	8008692 <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 f96e 	bl	800869c <USBH_HandleEnum>
 80083c0:	4603      	mov	r3, r0
 80083c2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80083c4:	7bbb      	ldrb	r3, [r7, #14]
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	f040 815d 	bne.w	8008688 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2200      	movs	r2, #0
 80083d2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d103      	bne.n	80083e8 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2208      	movs	r2, #8
 80083e4:	701a      	strb	r2, [r3, #0]
 80083e6:	e002      	b.n	80083ee <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2207      	movs	r2, #7
 80083ec:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2205      	movs	r2, #5
 80083f2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008402:	2200      	movs	r2, #0
 8008404:	4619      	mov	r1, r3
 8008406:	f001 fd57 	bl	8009eb8 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800840a:	e13d      	b.n	8008688 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008412:	2b00      	cmp	r3, #0
 8008414:	f000 813a 	beq.w	800868c <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800841e:	2101      	movs	r1, #1
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2208      	movs	r2, #8
 8008428:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2205      	movs	r2, #5
 800842e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800843e:	2200      	movs	r2, #0
 8008440:	4619      	mov	r1, r3
 8008442:	f001 fd39 	bl	8009eb8 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008446:	e121      	b.n	800868c <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800844e:	b29b      	uxth	r3, r3
 8008450:	4619      	mov	r1, r3
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 fd00 	bl	8008e58 <USBH_SetCfg>
 8008458:	4603      	mov	r3, r0
 800845a:	2b00      	cmp	r3, #0
 800845c:	d102      	bne.n	8008464 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2209      	movs	r2, #9
 8008462:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2201      	movs	r2, #1
 8008468:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008478:	2200      	movs	r2, #0
 800847a:	4619      	mov	r1, r3
 800847c:	f001 fd1c 	bl	8009eb8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008480:	e107      	b.n	8008692 <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008488:	f003 0320 	and.w	r3, r3, #32
 800848c:	2b00      	cmp	r3, #0
 800848e:	d015      	beq.n	80084bc <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008490:	2101      	movs	r1, #1
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f000 fd03 	bl	8008e9e <USBH_SetFeature>
 8008498:	4603      	mov	r3, r0
 800849a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800849c:	7bbb      	ldrb	r3, [r7, #14]
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d103      	bne.n	80084ac <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	220a      	movs	r2, #10
 80084a8:	701a      	strb	r2, [r3, #0]
 80084aa:	e00a      	b.n	80084c2 <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 80084ac:	7bbb      	ldrb	r3, [r7, #14]
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	2b03      	cmp	r3, #3
 80084b2:	d106      	bne.n	80084c2 <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	220a      	movs	r2, #10
 80084b8:	701a      	strb	r2, [r3, #0]
 80084ba:	e002      	b.n	80084c2 <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	220a      	movs	r2, #10
 80084c0:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2201      	movs	r2, #1
 80084c6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80084d6:	2200      	movs	r2, #0
 80084d8:	4619      	mov	r1, r3
 80084da:	f001 fced 	bl	8009eb8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80084de:	e0d8      	b.n	8008692 <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d03f      	beq.n	800856a <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2200      	movs	r2, #0
 80084ee:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80084f2:	2300      	movs	r3, #0
 80084f4:	73fb      	strb	r3, [r7, #15]
 80084f6:	e016      	b.n	8008526 <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80084f8:	7bfa      	ldrb	r2, [r7, #15]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	32de      	adds	r2, #222	; 0xde
 80084fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008502:	791a      	ldrb	r2, [r3, #4]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800850a:	429a      	cmp	r2, r3
 800850c:	d108      	bne.n	8008520 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 800850e:	7bfa      	ldrb	r2, [r7, #15]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	32de      	adds	r2, #222	; 0xde
 8008514:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800851e:	e005      	b.n	800852c <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008520:	7bfb      	ldrb	r3, [r7, #15]
 8008522:	3301      	adds	r3, #1
 8008524:	73fb      	strb	r3, [r7, #15]
 8008526:	7bfb      	ldrb	r3, [r7, #15]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d0e5      	beq.n	80084f8 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008532:	2b00      	cmp	r3, #0
 8008534:	d016      	beq.n	8008564 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800853c:	689b      	ldr	r3, [r3, #8]
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	4798      	blx	r3
 8008542:	4603      	mov	r3, r0
 8008544:	2b00      	cmp	r3, #0
 8008546:	d109      	bne.n	800855c <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2206      	movs	r2, #6
 800854c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008554:	2103      	movs	r1, #3
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	4798      	blx	r3
 800855a:	e006      	b.n	800856a <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	220d      	movs	r2, #13
 8008560:	701a      	strb	r2, [r3, #0]
 8008562:	e002      	b.n	800856a <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	220d      	movs	r2, #13
 8008568:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2205      	movs	r2, #5
 800856e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800857e:	2200      	movs	r2, #0
 8008580:	4619      	mov	r1, r3
 8008582:	f001 fc99 	bl	8009eb8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008586:	e084      	b.n	8008692 <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800858e:	2b00      	cmp	r3, #0
 8008590:	d017      	beq.n	80085c2 <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008598:	691b      	ldr	r3, [r3, #16]
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	4798      	blx	r3
 800859e:	4603      	mov	r3, r0
 80085a0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80085a2:	7bbb      	ldrb	r3, [r7, #14]
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d103      	bne.n	80085b2 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	220b      	movs	r2, #11
 80085ae:	701a      	strb	r2, [r3, #0]
 80085b0:	e00a      	b.n	80085c8 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 80085b2:	7bbb      	ldrb	r3, [r7, #14]
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	2b02      	cmp	r3, #2
 80085b8:	d106      	bne.n	80085c8 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	220d      	movs	r2, #13
 80085be:	701a      	strb	r2, [r3, #0]
 80085c0:	e002      	b.n	80085c8 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	220d      	movs	r2, #13
 80085c6:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2205      	movs	r2, #5
 80085cc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80085dc:	2200      	movs	r2, #0
 80085de:	4619      	mov	r1, r3
 80085e0:	f001 fc6a 	bl	8009eb8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80085e4:	e055      	b.n	8008692 <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d04f      	beq.n	8008690 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085f6:	695b      	ldr	r3, [r3, #20]
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	4798      	blx	r3
      }
      break;
 80085fc:	e048      	b.n	8008690 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f7ff fcec 	bl	8007fe4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008612:	2b00      	cmp	r3, #0
 8008614:	d009      	beq.n	800862a <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800861c:	68db      	ldr	r3, [r3, #12]
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008630:	2b00      	cmp	r3, #0
 8008632:	d005      	beq.n	8008640 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800863a:	2105      	movs	r1, #5
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008646:	b2db      	uxtb	r3, r3
 8008648:	2b01      	cmp	r3, #1
 800864a:	d107      	bne.n	800865c <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2200      	movs	r2, #0
 8008650:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f7ff fda5 	bl	80081a4 <USBH_Start>
 800865a:	e002      	b.n	8008662 <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f004 f991 	bl	800c984 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2201      	movs	r2, #1
 8008666:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008676:	2200      	movs	r2, #0
 8008678:	4619      	mov	r1, r3
 800867a:	f001 fc1d 	bl	8009eb8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800867e:	e008      	b.n	8008692 <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 8008680:	bf00      	nop
 8008682:	e006      	b.n	8008692 <USBH_Process+0x4ce>
      break;
 8008684:	bf00      	nop
 8008686:	e004      	b.n	8008692 <USBH_Process+0x4ce>
      break;
 8008688:	bf00      	nop
 800868a:	e002      	b.n	8008692 <USBH_Process+0x4ce>
    break;
 800868c:	bf00      	nop
 800868e:	e000      	b.n	8008692 <USBH_Process+0x4ce>
      break;
 8008690:	bf00      	nop
  }
  return USBH_OK;
 8008692:	2300      	movs	r3, #0
}
 8008694:	4618      	mov	r0, r3
 8008696:	3710      	adds	r7, #16
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b088      	sub	sp, #32
 80086a0:	af04      	add	r7, sp, #16
 80086a2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80086a4:	2301      	movs	r3, #1
 80086a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80086a8:	2301      	movs	r3, #1
 80086aa:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	785b      	ldrb	r3, [r3, #1]
 80086b0:	2b07      	cmp	r3, #7
 80086b2:	f200 8208 	bhi.w	8008ac6 <USBH_HandleEnum+0x42a>
 80086b6:	a201      	add	r2, pc, #4	; (adr r2, 80086bc <USBH_HandleEnum+0x20>)
 80086b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086bc:	080086dd 	.word	0x080086dd
 80086c0:	0800879b 	.word	0x0800879b
 80086c4:	08008805 	.word	0x08008805
 80086c8:	08008893 	.word	0x08008893
 80086cc:	080088fd 	.word	0x080088fd
 80086d0:	0800896d 	.word	0x0800896d
 80086d4:	08008a09 	.word	0x08008a09
 80086d8:	08008a87 	.word	0x08008a87
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80086dc:	2108      	movs	r1, #8
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 faea 	bl	8008cb8 <USBH_Get_DevDesc>
 80086e4:	4603      	mov	r3, r0
 80086e6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80086e8:	7bbb      	ldrb	r3, [r7, #14]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d130      	bne.n	8008750 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2201      	movs	r2, #1
 80086fc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	7919      	ldrb	r1, [r3, #4]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800870e:	687a      	ldr	r2, [r7, #4]
 8008710:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008712:	b292      	uxth	r2, r2
 8008714:	9202      	str	r2, [sp, #8]
 8008716:	2200      	movs	r2, #0
 8008718:	9201      	str	r2, [sp, #4]
 800871a:	9300      	str	r3, [sp, #0]
 800871c:	4603      	mov	r3, r0
 800871e:	2280      	movs	r2, #128	; 0x80
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f001 f9f1 	bl	8009b08 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	7959      	ldrb	r1, [r3, #5]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800873a:	b292      	uxth	r2, r2
 800873c:	9202      	str	r2, [sp, #8]
 800873e:	2200      	movs	r2, #0
 8008740:	9201      	str	r2, [sp, #4]
 8008742:	9300      	str	r3, [sp, #0]
 8008744:	4603      	mov	r3, r0
 8008746:	2200      	movs	r2, #0
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f001 f9dd 	bl	8009b08 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800874e:	e1bc      	b.n	8008aca <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008750:	7bbb      	ldrb	r3, [r7, #14]
 8008752:	2b03      	cmp	r3, #3
 8008754:	f040 81b9 	bne.w	8008aca <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800875e:	3301      	adds	r3, #1
 8008760:	b2da      	uxtb	r2, r3
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800876e:	2b03      	cmp	r3, #3
 8008770:	d903      	bls.n	800877a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	220d      	movs	r2, #13
 8008776:	701a      	strb	r2, [r3, #0]
      break;
 8008778:	e1a7      	b.n	8008aca <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	795b      	ldrb	r3, [r3, #5]
 800877e:	4619      	mov	r1, r3
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f001 fa11 	bl	8009ba8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	791b      	ldrb	r3, [r3, #4]
 800878a:	4619      	mov	r1, r3
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f001 fa0b 	bl	8009ba8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2200      	movs	r2, #0
 8008796:	701a      	strb	r2, [r3, #0]
      break;
 8008798:	e197      	b.n	8008aca <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800879a:	2112      	movs	r1, #18
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 fa8b 	bl	8008cb8 <USBH_Get_DevDesc>
 80087a2:	4603      	mov	r3, r0
 80087a4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80087a6:	7bbb      	ldrb	r3, [r7, #14]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d103      	bne.n	80087b4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2202      	movs	r2, #2
 80087b0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80087b2:	e18c      	b.n	8008ace <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80087b4:	7bbb      	ldrb	r3, [r7, #14]
 80087b6:	2b03      	cmp	r3, #3
 80087b8:	f040 8189 	bne.w	8008ace <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80087c2:	3301      	adds	r3, #1
 80087c4:	b2da      	uxtb	r2, r3
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80087d2:	2b03      	cmp	r3, #3
 80087d4:	d903      	bls.n	80087de <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	220d      	movs	r2, #13
 80087da:	701a      	strb	r2, [r3, #0]
      break;
 80087dc:	e177      	b.n	8008ace <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	795b      	ldrb	r3, [r3, #5]
 80087e2:	4619      	mov	r1, r3
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f001 f9df 	bl	8009ba8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	791b      	ldrb	r3, [r3, #4]
 80087ee:	4619      	mov	r1, r3
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f001 f9d9 	bl	8009ba8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2200      	movs	r2, #0
 80087fa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	701a      	strb	r2, [r3, #0]
      break;
 8008802:	e164      	b.n	8008ace <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008804:	2101      	movs	r1, #1
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 fb02 	bl	8008e10 <USBH_SetAddress>
 800880c:	4603      	mov	r3, r0
 800880e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008810:	7bbb      	ldrb	r3, [r7, #14]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d132      	bne.n	800887c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008816:	2002      	movs	r0, #2
 8008818:	f004 fa18 	bl	800cc4c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2201      	movs	r2, #1
 8008820:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2203      	movs	r2, #3
 8008828:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	7919      	ldrb	r1, [r3, #4]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800883e:	b292      	uxth	r2, r2
 8008840:	9202      	str	r2, [sp, #8]
 8008842:	2200      	movs	r2, #0
 8008844:	9201      	str	r2, [sp, #4]
 8008846:	9300      	str	r3, [sp, #0]
 8008848:	4603      	mov	r3, r0
 800884a:	2280      	movs	r2, #128	; 0x80
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f001 f95b 	bl	8009b08 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	7959      	ldrb	r1, [r3, #5]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008866:	b292      	uxth	r2, r2
 8008868:	9202      	str	r2, [sp, #8]
 800886a:	2200      	movs	r2, #0
 800886c:	9201      	str	r2, [sp, #4]
 800886e:	9300      	str	r3, [sp, #0]
 8008870:	4603      	mov	r3, r0
 8008872:	2200      	movs	r2, #0
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f001 f947 	bl	8009b08 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800887a:	e12a      	b.n	8008ad2 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800887c:	7bbb      	ldrb	r3, [r7, #14]
 800887e:	2b03      	cmp	r3, #3
 8008880:	f040 8127 	bne.w	8008ad2 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	220d      	movs	r2, #13
 8008888:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2200      	movs	r2, #0
 800888e:	705a      	strb	r2, [r3, #1]
      break;
 8008890:	e11f      	b.n	8008ad2 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008892:	2109      	movs	r1, #9
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 fa37 	bl	8008d08 <USBH_Get_CfgDesc>
 800889a:	4603      	mov	r3, r0
 800889c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800889e:	7bbb      	ldrb	r3, [r7, #14]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d103      	bne.n	80088ac <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2204      	movs	r2, #4
 80088a8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80088aa:	e114      	b.n	8008ad6 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80088ac:	7bbb      	ldrb	r3, [r7, #14]
 80088ae:	2b03      	cmp	r3, #3
 80088b0:	f040 8111 	bne.w	8008ad6 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80088ba:	3301      	adds	r3, #1
 80088bc:	b2da      	uxtb	r2, r3
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80088ca:	2b03      	cmp	r3, #3
 80088cc:	d903      	bls.n	80088d6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	220d      	movs	r2, #13
 80088d2:	701a      	strb	r2, [r3, #0]
      break;
 80088d4:	e0ff      	b.n	8008ad6 <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	795b      	ldrb	r3, [r3, #5]
 80088da:	4619      	mov	r1, r3
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f001 f963 	bl	8009ba8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	791b      	ldrb	r3, [r3, #4]
 80088e6:	4619      	mov	r1, r3
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f001 f95d 	bl	8009ba8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2200      	movs	r2, #0
 80088f2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2200      	movs	r2, #0
 80088f8:	701a      	strb	r2, [r3, #0]
      break;
 80088fa:	e0ec      	b.n	8008ad6 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008902:	4619      	mov	r1, r3
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 f9ff 	bl	8008d08 <USBH_Get_CfgDesc>
 800890a:	4603      	mov	r3, r0
 800890c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800890e:	7bbb      	ldrb	r3, [r7, #14]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d103      	bne.n	800891c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2205      	movs	r2, #5
 8008918:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800891a:	e0de      	b.n	8008ada <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800891c:	7bbb      	ldrb	r3, [r7, #14]
 800891e:	2b03      	cmp	r3, #3
 8008920:	f040 80db 	bne.w	8008ada <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800892a:	3301      	adds	r3, #1
 800892c:	b2da      	uxtb	r2, r3
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800893a:	2b03      	cmp	r3, #3
 800893c:	d903      	bls.n	8008946 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	220d      	movs	r2, #13
 8008942:	701a      	strb	r2, [r3, #0]
      break;
 8008944:	e0c9      	b.n	8008ada <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	795b      	ldrb	r3, [r3, #5]
 800894a:	4619      	mov	r1, r3
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f001 f92b 	bl	8009ba8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	791b      	ldrb	r3, [r3, #4]
 8008956:	4619      	mov	r1, r3
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f001 f925 	bl	8009ba8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2200      	movs	r2, #0
 8008962:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	701a      	strb	r2, [r3, #0]
      break;
 800896a:	e0b6      	b.n	8008ada <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008972:	2b00      	cmp	r3, #0
 8008974:	d036      	beq.n	80089e4 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008982:	23ff      	movs	r3, #255	; 0xff
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f000 f9e3 	bl	8008d50 <USBH_Get_StringDesc>
 800898a:	4603      	mov	r3, r0
 800898c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800898e:	7bbb      	ldrb	r3, [r7, #14]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d111      	bne.n	80089b8 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2206      	movs	r2, #6
 8008998:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2205      	movs	r2, #5
 800899e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80089ae:	2200      	movs	r2, #0
 80089b0:	4619      	mov	r1, r3
 80089b2:	f001 fa81 	bl	8009eb8 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80089b6:	e092      	b.n	8008ade <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80089b8:	7bbb      	ldrb	r3, [r7, #14]
 80089ba:	2b03      	cmp	r3, #3
 80089bc:	f040 808f 	bne.w	8008ade <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2206      	movs	r2, #6
 80089c4:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2205      	movs	r2, #5
 80089ca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80089da:	2200      	movs	r2, #0
 80089dc:	4619      	mov	r1, r3
 80089de:	f001 fa6b 	bl	8009eb8 <osMessagePut>
      break;
 80089e2:	e07c      	b.n	8008ade <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2206      	movs	r2, #6
 80089e8:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2205      	movs	r2, #5
 80089ee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80089fe:	2200      	movs	r2, #0
 8008a00:	4619      	mov	r1, r3
 8008a02:	f001 fa59 	bl	8009eb8 <osMessagePut>
      break;
 8008a06:	e06a      	b.n	8008ade <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d027      	beq.n	8008a62 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008a1e:	23ff      	movs	r3, #255	; 0xff
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 f995 	bl	8008d50 <USBH_Get_StringDesc>
 8008a26:	4603      	mov	r3, r0
 8008a28:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008a2a:	7bbb      	ldrb	r3, [r7, #14]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d103      	bne.n	8008a38 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2207      	movs	r2, #7
 8008a34:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008a36:	e054      	b.n	8008ae2 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008a38:	7bbb      	ldrb	r3, [r7, #14]
 8008a3a:	2b03      	cmp	r3, #3
 8008a3c:	d151      	bne.n	8008ae2 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2207      	movs	r2, #7
 8008a42:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2205      	movs	r2, #5
 8008a48:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008a58:	2200      	movs	r2, #0
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	f001 fa2c 	bl	8009eb8 <osMessagePut>
      break;
 8008a60:	e03f      	b.n	8008ae2 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2207      	movs	r2, #7
 8008a66:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2205      	movs	r2, #5
 8008a6c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	4619      	mov	r1, r3
 8008a80:	f001 fa1a 	bl	8009eb8 <osMessagePut>
      break;
 8008a84:	e02d      	b.n	8008ae2 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d017      	beq.n	8008ac0 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008a9c:	23ff      	movs	r3, #255	; 0xff
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 f956 	bl	8008d50 <USBH_Get_StringDesc>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008aa8:	7bbb      	ldrb	r3, [r7, #14]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d102      	bne.n	8008ab4 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008ab2:	e018      	b.n	8008ae6 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ab4:	7bbb      	ldrb	r3, [r7, #14]
 8008ab6:	2b03      	cmp	r3, #3
 8008ab8:	d115      	bne.n	8008ae6 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8008aba:	2300      	movs	r3, #0
 8008abc:	73fb      	strb	r3, [r7, #15]
      break;
 8008abe:	e012      	b.n	8008ae6 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8008ac4:	e00f      	b.n	8008ae6 <USBH_HandleEnum+0x44a>

    default:
      break;
 8008ac6:	bf00      	nop
 8008ac8:	e00e      	b.n	8008ae8 <USBH_HandleEnum+0x44c>
      break;
 8008aca:	bf00      	nop
 8008acc:	e00c      	b.n	8008ae8 <USBH_HandleEnum+0x44c>
      break;
 8008ace:	bf00      	nop
 8008ad0:	e00a      	b.n	8008ae8 <USBH_HandleEnum+0x44c>
      break;
 8008ad2:	bf00      	nop
 8008ad4:	e008      	b.n	8008ae8 <USBH_HandleEnum+0x44c>
      break;
 8008ad6:	bf00      	nop
 8008ad8:	e006      	b.n	8008ae8 <USBH_HandleEnum+0x44c>
      break;
 8008ada:	bf00      	nop
 8008adc:	e004      	b.n	8008ae8 <USBH_HandleEnum+0x44c>
      break;
 8008ade:	bf00      	nop
 8008ae0:	e002      	b.n	8008ae8 <USBH_HandleEnum+0x44c>
      break;
 8008ae2:	bf00      	nop
 8008ae4:	e000      	b.n	8008ae8 <USBH_HandleEnum+0x44c>
      break;
 8008ae6:	bf00      	nop
  }
  return Status;
 8008ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3710      	adds	r7, #16
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	bf00      	nop

08008af4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	683a      	ldr	r2, [r7, #0]
 8008b02:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008b06:	bf00      	nop
 8008b08:	370c      	adds	r7, #12
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr

08008b12 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008b12:	b580      	push	{r7, lr}
 8008b14:	b082      	sub	sp, #8
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008b20:	1c5a      	adds	r2, r3, #1
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 f804 	bl	8008b36 <USBH_HandleSof>
}
 8008b2e:	bf00      	nop
 8008b30:	3708      	adds	r7, #8
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}

08008b36 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008b36:	b580      	push	{r7, lr}
 8008b38:	b082      	sub	sp, #8
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	b2db      	uxtb	r3, r3
 8008b44:	2b0b      	cmp	r3, #11
 8008b46:	d10a      	bne.n	8008b5e <USBH_HandleSof+0x28>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d005      	beq.n	8008b5e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b58:	699b      	ldr	r3, [r3, #24]
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	4798      	blx	r3
  }
}
 8008b5e:	bf00      	nop
 8008b60:	3708      	adds	r7, #8
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b082      	sub	sp, #8
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2201      	movs	r2, #1
 8008b72:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2201      	movs	r2, #1
 8008b7a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	f001 f993 	bl	8009eb8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008b92:	bf00      	nop
}
 8008b94:	3708      	adds	r7, #8
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008b9a:	b480      	push	{r7}
 8008b9c:	b083      	sub	sp, #12
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008baa:	bf00      	nop
}
 8008bac:	370c      	adds	r7, #12
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr

08008bb6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b082      	sub	sp, #8
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2201      	movs	r2, #1
 8008bda:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008bea:	2200      	movs	r2, #0
 8008bec:	4619      	mov	r1, r3
 8008bee:	f001 f963 	bl	8009eb8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008bf2:	2300      	movs	r3, #0
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3708      	adds	r7, #8
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2201      	movs	r2, #1
 8008c08:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2200      	movs	r2, #0
 8008c18:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f003 fecc 	bl	800c9ba <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	791b      	ldrb	r3, [r3, #4]
 8008c26:	4619      	mov	r1, r3
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 ffbd 	bl	8009ba8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	795b      	ldrb	r3, [r3, #5]
 8008c32:	4619      	mov	r1, r3
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 ffb7 	bl	8009ba8 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008c4e:	2200      	movs	r2, #0
 8008c50:	4619      	mov	r1, r3
 8008c52:	f001 f931 	bl	8009eb8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008c56:	2300      	movs	r3, #0
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3708      	adds	r7, #8
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b086      	sub	sp, #24
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 8008c6e:	f107 030c 	add.w	r3, r7, #12
 8008c72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c76:	4618      	mov	r0, r3
 8008c78:	f001 f95e 	bl	8009f38 <osMessageGet>
    if (event.status == osEventMessage)
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2b10      	cmp	r3, #16
 8008c80:	d1f2      	bne.n	8008c68 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f7ff fa9e 	bl	80081c4 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8008c88:	e7ee      	b.n	8008c68 <USBH_Process_OS+0x8>

08008c8a <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b082      	sub	sp, #8
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2201      	movs	r2, #1
 8008c96:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	4619      	mov	r1, r3
 8008caa:	f001 f905 	bl	8009eb8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 8008cae:	2300      	movs	r3, #0
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3708      	adds	r7, #8
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b086      	sub	sp, #24
 8008cbc:	af02      	add	r7, sp, #8
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008cca:	78fb      	ldrb	r3, [r7, #3]
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	9300      	str	r3, [sp, #0]
 8008cd0:	4613      	mov	r3, r2
 8008cd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008cd6:	2100      	movs	r1, #0
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 f864 	bl	8008da6 <USBH_GetDescriptor>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8008ce2:	7bfb      	ldrb	r3, [r7, #15]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d10a      	bne.n	8008cfe <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008cf4:	78fa      	ldrb	r2, [r7, #3]
 8008cf6:	b292      	uxth	r2, r2
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	f000 f919 	bl	8008f30 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3710      	adds	r7, #16
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b086      	sub	sp, #24
 8008d0c:	af02      	add	r7, sp, #8
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	460b      	mov	r3, r1
 8008d12:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	331c      	adds	r3, #28
 8008d18:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008d1a:	887b      	ldrh	r3, [r7, #2]
 8008d1c:	9300      	str	r3, [sp, #0]
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d24:	2100      	movs	r1, #0
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 f83d 	bl	8008da6 <USBH_GetDescriptor>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008d30:	7bfb      	ldrb	r3, [r7, #15]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d107      	bne.n	8008d46 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008d36:	887b      	ldrh	r3, [r7, #2]
 8008d38:	461a      	mov	r2, r3
 8008d3a:	68b9      	ldr	r1, [r7, #8]
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 f989 	bl	8009054 <USBH_ParseCfgDesc>
 8008d42:	4603      	mov	r3, r0
 8008d44:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3710      	adds	r7, #16
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b088      	sub	sp, #32
 8008d54:	af02      	add	r7, sp, #8
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	607a      	str	r2, [r7, #4]
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	460b      	mov	r3, r1
 8008d5e:	72fb      	strb	r3, [r7, #11]
 8008d60:	4613      	mov	r3, r2
 8008d62:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8008d64:	7afb      	ldrb	r3, [r7, #11]
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008d6c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008d74:	893b      	ldrh	r3, [r7, #8]
 8008d76:	9300      	str	r3, [sp, #0]
 8008d78:	460b      	mov	r3, r1
 8008d7a:	2100      	movs	r1, #0
 8008d7c:	68f8      	ldr	r0, [r7, #12]
 8008d7e:	f000 f812 	bl	8008da6 <USBH_GetDescriptor>
 8008d82:	4603      	mov	r3, r0
 8008d84:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008d86:	7dfb      	ldrb	r3, [r7, #23]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d107      	bne.n	8008d9c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008d92:	893a      	ldrh	r2, [r7, #8]
 8008d94:	6879      	ldr	r1, [r7, #4]
 8008d96:	4618      	mov	r0, r3
 8008d98:	f000 fb26 	bl	80093e8 <USBH_ParseStringDesc>
  }

  return status;
 8008d9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3718      	adds	r7, #24
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}

08008da6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008da6:	b580      	push	{r7, lr}
 8008da8:	b084      	sub	sp, #16
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	60f8      	str	r0, [r7, #12]
 8008dae:	607b      	str	r3, [r7, #4]
 8008db0:	460b      	mov	r3, r1
 8008db2:	72fb      	strb	r3, [r7, #11]
 8008db4:	4613      	mov	r3, r2
 8008db6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	789b      	ldrb	r3, [r3, #2]
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d11c      	bne.n	8008dfa <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008dc0:	7afb      	ldrb	r3, [r7, #11]
 8008dc2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008dc6:	b2da      	uxtb	r2, r3
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2206      	movs	r2, #6
 8008dd0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	893a      	ldrh	r2, [r7, #8]
 8008dd6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008dd8:	893b      	ldrh	r3, [r7, #8]
 8008dda:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008dde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008de2:	d104      	bne.n	8008dee <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f240 4209 	movw	r2, #1033	; 0x409
 8008dea:	829a      	strh	r2, [r3, #20]
 8008dec:	e002      	b.n	8008df4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2200      	movs	r2, #0
 8008df2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	8b3a      	ldrh	r2, [r7, #24]
 8008df8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008dfa:	8b3b      	ldrh	r3, [r7, #24]
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	6879      	ldr	r1, [r7, #4]
 8008e00:	68f8      	ldr	r0, [r7, #12]
 8008e02:	f000 fb3f 	bl	8009484 <USBH_CtlReq>
 8008e06:	4603      	mov	r3, r0
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3710      	adds	r7, #16
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b082      	sub	sp, #8
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
 8008e18:	460b      	mov	r3, r1
 8008e1a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	789b      	ldrb	r3, [r3, #2]
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d10f      	bne.n	8008e44 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2200      	movs	r2, #0
 8008e28:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2205      	movs	r2, #5
 8008e2e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008e30:	78fb      	ldrb	r3, [r7, #3]
 8008e32:	b29a      	uxth	r2, r3
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008e44:	2200      	movs	r2, #0
 8008e46:	2100      	movs	r1, #0
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 fb1b 	bl	8009484 <USBH_CtlReq>
 8008e4e:	4603      	mov	r3, r0
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3708      	adds	r7, #8
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b082      	sub	sp, #8
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	460b      	mov	r3, r1
 8008e62:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	789b      	ldrb	r3, [r3, #2]
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d10e      	bne.n	8008e8a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2209      	movs	r2, #9
 8008e76:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	887a      	ldrh	r2, [r7, #2]
 8008e7c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2200      	movs	r2, #0
 8008e82:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2200      	movs	r2, #0
 8008e88:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	2100      	movs	r1, #0
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 faf8 	bl	8009484 <USBH_CtlReq>
 8008e94:	4603      	mov	r3, r0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3708      	adds	r7, #8
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}

08008e9e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008e9e:	b580      	push	{r7, lr}
 8008ea0:	b082      	sub	sp, #8
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	6078      	str	r0, [r7, #4]
 8008ea6:	460b      	mov	r3, r1
 8008ea8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	789b      	ldrb	r3, [r3, #2]
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d10f      	bne.n	8008ed2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2203      	movs	r2, #3
 8008ebc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008ebe:	78fb      	ldrb	r3, [r7, #3]
 8008ec0:	b29a      	uxth	r2, r3
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	2100      	movs	r1, #0
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 fad4 	bl	8009484 <USBH_CtlReq>
 8008edc:	4603      	mov	r3, r0
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3708      	adds	r7, #8
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}

08008ee6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008ee6:	b580      	push	{r7, lr}
 8008ee8:	b082      	sub	sp, #8
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
 8008eee:	460b      	mov	r3, r1
 8008ef0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	789b      	ldrb	r3, [r3, #2]
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d10f      	bne.n	8008f1a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2202      	movs	r2, #2
 8008efe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2201      	movs	r2, #1
 8008f04:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008f0c:	78fb      	ldrb	r3, [r7, #3]
 8008f0e:	b29a      	uxth	r2, r3
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	2100      	movs	r1, #0
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 fab0 	bl	8009484 <USBH_CtlReq>
 8008f24:	4603      	mov	r3, r0
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3708      	adds	r7, #8
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
	...

08008f30 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b085      	sub	sp, #20
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	60b9      	str	r1, [r7, #8]
 8008f3a:	4613      	mov	r3, r2
 8008f3c:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	781a      	ldrb	r2, [r3, #0]
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	785a      	ldrb	r2, [r3, #1]
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	3302      	adds	r3, #2
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	b29a      	uxth	r2, r3
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	3303      	adds	r3, #3
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	021b      	lsls	r3, r3, #8
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	4313      	orrs	r3, r2
 8008f64:	b29a      	uxth	r2, r3
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	791a      	ldrb	r2, [r3, #4]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	795a      	ldrb	r2, [r3, #5]
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	799a      	ldrb	r2, [r3, #6]
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	79da      	ldrb	r2, [r3, #7]
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	79db      	ldrb	r3, [r3, #7]
 8008f8e:	2b20      	cmp	r3, #32
 8008f90:	dc0f      	bgt.n	8008fb2 <USBH_ParseDevDesc+0x82>
 8008f92:	2b08      	cmp	r3, #8
 8008f94:	db14      	blt.n	8008fc0 <USBH_ParseDevDesc+0x90>
 8008f96:	3b08      	subs	r3, #8
 8008f98:	4a2d      	ldr	r2, [pc, #180]	; (8009050 <USBH_ParseDevDesc+0x120>)
 8008f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8008f9e:	f003 0301 	and.w	r3, r3, #1
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	bf14      	ite	ne
 8008fa6:	2301      	movne	r3, #1
 8008fa8:	2300      	moveq	r3, #0
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d102      	bne.n	8008fb6 <USBH_ParseDevDesc+0x86>
 8008fb0:	e006      	b.n	8008fc0 <USBH_ParseDevDesc+0x90>
 8008fb2:	2b40      	cmp	r3, #64	; 0x40
 8008fb4:	d104      	bne.n	8008fc0 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	79da      	ldrb	r2, [r3, #7]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	71da      	strb	r2, [r3, #7]
      break;
 8008fbe:	e003      	b.n	8008fc8 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2240      	movs	r2, #64	; 0x40
 8008fc4:	71da      	strb	r2, [r3, #7]
      break;
 8008fc6:	bf00      	nop
  }

  if (length > 8U)
 8008fc8:	88fb      	ldrh	r3, [r7, #6]
 8008fca:	2b08      	cmp	r3, #8
 8008fcc:	d939      	bls.n	8009042 <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	3308      	adds	r3, #8
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	b29a      	uxth	r2, r3
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	3309      	adds	r3, #9
 8008fda:	781b      	ldrb	r3, [r3, #0]
 8008fdc:	b29b      	uxth	r3, r3
 8008fde:	021b      	lsls	r3, r3, #8
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	b29a      	uxth	r2, r3
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	330a      	adds	r3, #10
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	b29a      	uxth	r2, r3
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	330b      	adds	r3, #11
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	b29b      	uxth	r3, r3
 8008ffa:	021b      	lsls	r3, r3, #8
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	4313      	orrs	r3, r2
 8009000:	b29a      	uxth	r2, r3
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	330c      	adds	r3, #12
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	b29a      	uxth	r2, r3
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	330d      	adds	r3, #13
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	b29b      	uxth	r3, r3
 8009016:	021b      	lsls	r3, r3, #8
 8009018:	b29b      	uxth	r3, r3
 800901a:	4313      	orrs	r3, r2
 800901c:	b29a      	uxth	r2, r3
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	7b9a      	ldrb	r2, [r3, #14]
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	7bda      	ldrb	r2, [r3, #15]
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	7c1a      	ldrb	r2, [r3, #16]
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	7c5a      	ldrb	r2, [r3, #17]
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	745a      	strb	r2, [r3, #17]
  }
}
 8009042:	bf00      	nop
 8009044:	3714      	adds	r7, #20
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr
 800904e:	bf00      	nop
 8009050:	01000101 	.word	0x01000101

08009054 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b08c      	sub	sp, #48	; 0x30
 8009058:	af00      	add	r7, sp, #0
 800905a:	60f8      	str	r0, [r7, #12]
 800905c:	60b9      	str	r1, [r7, #8]
 800905e:	4613      	mov	r3, r2
 8009060:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009068:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800906a:	2300      	movs	r3, #0
 800906c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009074:	2300      	movs	r3, #0
 8009076:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800907a:	2300      	movs	r3, #0
 800907c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	781a      	ldrb	r2, [r3, #0]
 8009088:	6a3b      	ldr	r3, [r7, #32]
 800908a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	785a      	ldrb	r2, [r3, #1]
 8009090:	6a3b      	ldr	r3, [r7, #32]
 8009092:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	3302      	adds	r3, #2
 8009098:	781b      	ldrb	r3, [r3, #0]
 800909a:	b29a      	uxth	r2, r3
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	3303      	adds	r3, #3
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	021b      	lsls	r3, r3, #8
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	4313      	orrs	r3, r2
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090b0:	bf28      	it	cs
 80090b2:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80090b6:	b29a      	uxth	r2, r3
 80090b8:	6a3b      	ldr	r3, [r7, #32]
 80090ba:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	791a      	ldrb	r2, [r3, #4]
 80090c0:	6a3b      	ldr	r3, [r7, #32]
 80090c2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	795a      	ldrb	r2, [r3, #5]
 80090c8:	6a3b      	ldr	r3, [r7, #32]
 80090ca:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	799a      	ldrb	r2, [r3, #6]
 80090d0:	6a3b      	ldr	r3, [r7, #32]
 80090d2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	79da      	ldrb	r2, [r3, #7]
 80090d8:	6a3b      	ldr	r3, [r7, #32]
 80090da:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	7a1a      	ldrb	r2, [r3, #8]
 80090e0:	6a3b      	ldr	r3, [r7, #32]
 80090e2:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80090e4:	6a3b      	ldr	r3, [r7, #32]
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	2b09      	cmp	r3, #9
 80090ea:	d002      	beq.n	80090f2 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80090ec:	6a3b      	ldr	r3, [r7, #32]
 80090ee:	2209      	movs	r2, #9
 80090f0:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80090f2:	88fb      	ldrh	r3, [r7, #6]
 80090f4:	2b09      	cmp	r3, #9
 80090f6:	f240 809d 	bls.w	8009234 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 80090fa:	2309      	movs	r3, #9
 80090fc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80090fe:	2300      	movs	r3, #0
 8009100:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009102:	e081      	b.n	8009208 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009104:	f107 0316 	add.w	r3, r7, #22
 8009108:	4619      	mov	r1, r3
 800910a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800910c:	f000 f99f 	bl	800944e <USBH_GetNextDesc>
 8009110:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009114:	785b      	ldrb	r3, [r3, #1]
 8009116:	2b04      	cmp	r3, #4
 8009118:	d176      	bne.n	8009208 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800911a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	2b09      	cmp	r3, #9
 8009120:	d002      	beq.n	8009128 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009124:	2209      	movs	r2, #9
 8009126:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009128:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800912c:	221a      	movs	r2, #26
 800912e:	fb02 f303 	mul.w	r3, r2, r3
 8009132:	3308      	adds	r3, #8
 8009134:	6a3a      	ldr	r2, [r7, #32]
 8009136:	4413      	add	r3, r2
 8009138:	3302      	adds	r3, #2
 800913a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800913c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800913e:	69f8      	ldr	r0, [r7, #28]
 8009140:	f000 f87e 	bl	8009240 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009144:	2300      	movs	r3, #0
 8009146:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800914a:	2300      	movs	r3, #0
 800914c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800914e:	e043      	b.n	80091d8 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009150:	f107 0316 	add.w	r3, r7, #22
 8009154:	4619      	mov	r1, r3
 8009156:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009158:	f000 f979 	bl	800944e <USBH_GetNextDesc>
 800915c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800915e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009160:	785b      	ldrb	r3, [r3, #1]
 8009162:	2b05      	cmp	r3, #5
 8009164:	d138      	bne.n	80091d8 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8009166:	69fb      	ldr	r3, [r7, #28]
 8009168:	795b      	ldrb	r3, [r3, #5]
 800916a:	2b01      	cmp	r3, #1
 800916c:	d10f      	bne.n	800918e <USBH_ParseCfgDesc+0x13a>
 800916e:	69fb      	ldr	r3, [r7, #28]
 8009170:	799b      	ldrb	r3, [r3, #6]
 8009172:	2b02      	cmp	r3, #2
 8009174:	d10b      	bne.n	800918e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009176:	69fb      	ldr	r3, [r7, #28]
 8009178:	79db      	ldrb	r3, [r3, #7]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d10f      	bne.n	800919e <USBH_ParseCfgDesc+0x14a>
 800917e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	2b09      	cmp	r3, #9
 8009184:	d00b      	beq.n	800919e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8009186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009188:	2209      	movs	r2, #9
 800918a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800918c:	e007      	b.n	800919e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800918e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	2b07      	cmp	r3, #7
 8009194:	d004      	beq.n	80091a0 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009198:	2207      	movs	r2, #7
 800919a:	701a      	strb	r2, [r3, #0]
 800919c:	e000      	b.n	80091a0 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800919e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80091a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80091a4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80091a8:	3201      	adds	r2, #1
 80091aa:	00d2      	lsls	r2, r2, #3
 80091ac:	211a      	movs	r1, #26
 80091ae:	fb01 f303 	mul.w	r3, r1, r3
 80091b2:	4413      	add	r3, r2
 80091b4:	3308      	adds	r3, #8
 80091b6:	6a3a      	ldr	r2, [r7, #32]
 80091b8:	4413      	add	r3, r2
 80091ba:	3304      	adds	r3, #4
 80091bc:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80091be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091c0:	69b9      	ldr	r1, [r7, #24]
 80091c2:	68f8      	ldr	r0, [r7, #12]
 80091c4:	f000 f86b 	bl	800929e <USBH_ParseEPDesc>
 80091c8:	4603      	mov	r3, r0
 80091ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80091ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80091d2:	3301      	adds	r3, #1
 80091d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80091d8:	69fb      	ldr	r3, [r7, #28]
 80091da:	791b      	ldrb	r3, [r3, #4]
 80091dc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d204      	bcs.n	80091ee <USBH_ParseCfgDesc+0x19a>
 80091e4:	6a3b      	ldr	r3, [r7, #32]
 80091e6:	885a      	ldrh	r2, [r3, #2]
 80091e8:	8afb      	ldrh	r3, [r7, #22]
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d8b0      	bhi.n	8009150 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80091ee:	69fb      	ldr	r3, [r7, #28]
 80091f0:	791b      	ldrb	r3, [r3, #4]
 80091f2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d201      	bcs.n	80091fe <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 80091fa:	2303      	movs	r3, #3
 80091fc:	e01c      	b.n	8009238 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 80091fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009202:	3301      	adds	r3, #1
 8009204:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009208:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800920c:	2b01      	cmp	r3, #1
 800920e:	d805      	bhi.n	800921c <USBH_ParseCfgDesc+0x1c8>
 8009210:	6a3b      	ldr	r3, [r7, #32]
 8009212:	885a      	ldrh	r2, [r3, #2]
 8009214:	8afb      	ldrh	r3, [r7, #22]
 8009216:	429a      	cmp	r2, r3
 8009218:	f63f af74 	bhi.w	8009104 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800921c:	6a3b      	ldr	r3, [r7, #32]
 800921e:	791b      	ldrb	r3, [r3, #4]
 8009220:	2b02      	cmp	r3, #2
 8009222:	bf28      	it	cs
 8009224:	2302      	movcs	r3, #2
 8009226:	b2db      	uxtb	r3, r3
 8009228:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800922c:	429a      	cmp	r2, r3
 800922e:	d201      	bcs.n	8009234 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8009230:	2303      	movs	r3, #3
 8009232:	e001      	b.n	8009238 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8009234:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009238:	4618      	mov	r0, r3
 800923a:	3730      	adds	r7, #48	; 0x30
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}

08009240 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8009240:	b480      	push	{r7}
 8009242:	b083      	sub	sp, #12
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	781a      	ldrb	r2, [r3, #0]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	785a      	ldrb	r2, [r3, #1]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	789a      	ldrb	r2, [r3, #2]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	78da      	ldrb	r2, [r3, #3]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	791a      	ldrb	r2, [r3, #4]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	795a      	ldrb	r2, [r3, #5]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	799a      	ldrb	r2, [r3, #6]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	79da      	ldrb	r2, [r3, #7]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	7a1a      	ldrb	r2, [r3, #8]
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	721a      	strb	r2, [r3, #8]
}
 8009292:	bf00      	nop
 8009294:	370c      	adds	r7, #12
 8009296:	46bd      	mov	sp, r7
 8009298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929c:	4770      	bx	lr

0800929e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800929e:	b480      	push	{r7}
 80092a0:	b087      	sub	sp, #28
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	60f8      	str	r0, [r7, #12]
 80092a6:	60b9      	str	r1, [r7, #8]
 80092a8:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80092aa:	2300      	movs	r3, #0
 80092ac:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	781a      	ldrb	r2, [r3, #0]
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	785a      	ldrb	r2, [r3, #1]
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	789a      	ldrb	r2, [r3, #2]
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	78da      	ldrb	r2, [r3, #3]
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	3304      	adds	r3, #4
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	b29a      	uxth	r2, r3
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	3305      	adds	r3, #5
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	b29b      	uxth	r3, r3
 80092de:	021b      	lsls	r3, r3, #8
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	4313      	orrs	r3, r2
 80092e4:	b29a      	uxth	r2, r3
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	799a      	ldrb	r2, [r3, #6]
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	889b      	ldrh	r3, [r3, #4]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d102      	bne.n	8009300 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80092fa:	2303      	movs	r3, #3
 80092fc:	75fb      	strb	r3, [r7, #23]
 80092fe:	e033      	b.n	8009368 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	889b      	ldrh	r3, [r3, #4]
 8009304:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009308:	f023 0307 	bic.w	r3, r3, #7
 800930c:	b29a      	uxth	r2, r3
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	889b      	ldrh	r3, [r3, #4]
 8009316:	b21a      	sxth	r2, r3
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	3304      	adds	r3, #4
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	b299      	uxth	r1, r3
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	3305      	adds	r3, #5
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	b29b      	uxth	r3, r3
 8009328:	021b      	lsls	r3, r3, #8
 800932a:	b29b      	uxth	r3, r3
 800932c:	430b      	orrs	r3, r1
 800932e:	b29b      	uxth	r3, r3
 8009330:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009334:	2b00      	cmp	r3, #0
 8009336:	d110      	bne.n	800935a <USBH_ParseEPDesc+0xbc>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	3304      	adds	r3, #4
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	b299      	uxth	r1, r3
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	3305      	adds	r3, #5
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	b29b      	uxth	r3, r3
 8009348:	021b      	lsls	r3, r3, #8
 800934a:	b29b      	uxth	r3, r3
 800934c:	430b      	orrs	r3, r1
 800934e:	b29b      	uxth	r3, r3
 8009350:	b21b      	sxth	r3, r3
 8009352:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009356:	b21b      	sxth	r3, r3
 8009358:	e001      	b.n	800935e <USBH_ParseEPDesc+0xc0>
 800935a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800935e:	4313      	orrs	r3, r2
 8009360:	b21b      	sxth	r3, r3
 8009362:	b29a      	uxth	r2, r3
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800936e:	2b00      	cmp	r3, #0
 8009370:	d116      	bne.n	80093a0 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	78db      	ldrb	r3, [r3, #3]
 8009376:	f003 0303 	and.w	r3, r3, #3
 800937a:	2b01      	cmp	r3, #1
 800937c:	d005      	beq.n	800938a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	78db      	ldrb	r3, [r3, #3]
 8009382:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009386:	2b03      	cmp	r3, #3
 8009388:	d127      	bne.n	80093da <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	799b      	ldrb	r3, [r3, #6]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d003      	beq.n	800939a <USBH_ParseEPDesc+0xfc>
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	799b      	ldrb	r3, [r3, #6]
 8009396:	2b10      	cmp	r3, #16
 8009398:	d91f      	bls.n	80093da <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800939a:	2303      	movs	r3, #3
 800939c:	75fb      	strb	r3, [r7, #23]
 800939e:	e01c      	b.n	80093da <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	78db      	ldrb	r3, [r3, #3]
 80093a4:	f003 0303 	and.w	r3, r3, #3
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d10a      	bne.n	80093c2 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	799b      	ldrb	r3, [r3, #6]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d003      	beq.n	80093bc <USBH_ParseEPDesc+0x11e>
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	799b      	ldrb	r3, [r3, #6]
 80093b8:	2b10      	cmp	r3, #16
 80093ba:	d90e      	bls.n	80093da <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80093bc:	2303      	movs	r3, #3
 80093be:	75fb      	strb	r3, [r7, #23]
 80093c0:	e00b      	b.n	80093da <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	78db      	ldrb	r3, [r3, #3]
 80093c6:	f003 0303 	and.w	r3, r3, #3
 80093ca:	2b03      	cmp	r3, #3
 80093cc:	d105      	bne.n	80093da <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	799b      	ldrb	r3, [r3, #6]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d101      	bne.n	80093da <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80093d6:	2303      	movs	r3, #3
 80093d8:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80093da:	7dfb      	ldrb	r3, [r7, #23]
}
 80093dc:	4618      	mov	r0, r3
 80093de:	371c      	adds	r7, #28
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr

080093e8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b087      	sub	sp, #28
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	60f8      	str	r0, [r7, #12]
 80093f0:	60b9      	str	r1, [r7, #8]
 80093f2:	4613      	mov	r3, r2
 80093f4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	3301      	adds	r3, #1
 80093fa:	781b      	ldrb	r3, [r3, #0]
 80093fc:	2b03      	cmp	r3, #3
 80093fe:	d120      	bne.n	8009442 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	1e9a      	subs	r2, r3, #2
 8009406:	88fb      	ldrh	r3, [r7, #6]
 8009408:	4293      	cmp	r3, r2
 800940a:	bf28      	it	cs
 800940c:	4613      	movcs	r3, r2
 800940e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	3302      	adds	r3, #2
 8009414:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009416:	2300      	movs	r3, #0
 8009418:	82fb      	strh	r3, [r7, #22]
 800941a:	e00b      	b.n	8009434 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800941c:	8afb      	ldrh	r3, [r7, #22]
 800941e:	68fa      	ldr	r2, [r7, #12]
 8009420:	4413      	add	r3, r2
 8009422:	781a      	ldrb	r2, [r3, #0]
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	3301      	adds	r3, #1
 800942c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800942e:	8afb      	ldrh	r3, [r7, #22]
 8009430:	3302      	adds	r3, #2
 8009432:	82fb      	strh	r3, [r7, #22]
 8009434:	8afa      	ldrh	r2, [r7, #22]
 8009436:	8abb      	ldrh	r3, [r7, #20]
 8009438:	429a      	cmp	r2, r3
 800943a:	d3ef      	bcc.n	800941c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	2200      	movs	r2, #0
 8009440:	701a      	strb	r2, [r3, #0]
  }
}
 8009442:	bf00      	nop
 8009444:	371c      	adds	r7, #28
 8009446:	46bd      	mov	sp, r7
 8009448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944c:	4770      	bx	lr

0800944e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800944e:	b480      	push	{r7}
 8009450:	b085      	sub	sp, #20
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
 8009456:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	881a      	ldrh	r2, [r3, #0]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	b29b      	uxth	r3, r3
 8009462:	4413      	add	r3, r2
 8009464:	b29a      	uxth	r2, r3
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	4413      	add	r3, r2
 8009474:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009476:	68fb      	ldr	r3, [r7, #12]
}
 8009478:	4618      	mov	r0, r3
 800947a:	3714      	adds	r7, #20
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr

08009484 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b086      	sub	sp, #24
 8009488:	af00      	add	r7, sp, #0
 800948a:	60f8      	str	r0, [r7, #12]
 800948c:	60b9      	str	r1, [r7, #8]
 800948e:	4613      	mov	r3, r2
 8009490:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009492:	2301      	movs	r3, #1
 8009494:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	789b      	ldrb	r3, [r3, #2]
 800949a:	2b01      	cmp	r3, #1
 800949c:	d002      	beq.n	80094a4 <USBH_CtlReq+0x20>
 800949e:	2b02      	cmp	r3, #2
 80094a0:	d01d      	beq.n	80094de <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 80094a2:	e043      	b.n	800952c <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	68ba      	ldr	r2, [r7, #8]
 80094a8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	88fa      	ldrh	r2, [r7, #6]
 80094ae:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2201      	movs	r2, #1
 80094b4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2202      	movs	r2, #2
 80094ba:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80094bc:	2301      	movs	r3, #1
 80094be:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2203      	movs	r2, #3
 80094c4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80094d4:	2200      	movs	r2, #0
 80094d6:	4619      	mov	r1, r3
 80094d8:	f000 fcee 	bl	8009eb8 <osMessagePut>
      break;
 80094dc:	e026      	b.n	800952c <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 80094de:	68f8      	ldr	r0, [r7, #12]
 80094e0:	f000 f82a 	bl	8009538 <USBH_HandleControl>
 80094e4:	4603      	mov	r3, r0
 80094e6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80094e8:	7dfb      	ldrb	r3, [r7, #23]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d002      	beq.n	80094f4 <USBH_CtlReq+0x70>
 80094ee:	7dfb      	ldrb	r3, [r7, #23]
 80094f0:	2b03      	cmp	r3, #3
 80094f2:	d106      	bne.n	8009502 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	2201      	movs	r2, #1
 80094f8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2200      	movs	r2, #0
 80094fe:	761a      	strb	r2, [r3, #24]
 8009500:	e005      	b.n	800950e <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8009502:	7dfb      	ldrb	r3, [r7, #23]
 8009504:	2b02      	cmp	r3, #2
 8009506:	d102      	bne.n	800950e <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	2201      	movs	r2, #1
 800950c:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2203      	movs	r2, #3
 8009512:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009522:	2200      	movs	r2, #0
 8009524:	4619      	mov	r1, r3
 8009526:	f000 fcc7 	bl	8009eb8 <osMessagePut>
      break;
 800952a:	bf00      	nop
  }
  return status;
 800952c:	7dfb      	ldrb	r3, [r7, #23]
}
 800952e:	4618      	mov	r0, r3
 8009530:	3718      	adds	r7, #24
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
	...

08009538 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b086      	sub	sp, #24
 800953c:	af02      	add	r7, sp, #8
 800953e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009540:	2301      	movs	r3, #1
 8009542:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009544:	2300      	movs	r3, #0
 8009546:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	7e1b      	ldrb	r3, [r3, #24]
 800954c:	3b01      	subs	r3, #1
 800954e:	2b0a      	cmp	r3, #10
 8009550:	f200 8229 	bhi.w	80099a6 <USBH_HandleControl+0x46e>
 8009554:	a201      	add	r2, pc, #4	; (adr r2, 800955c <USBH_HandleControl+0x24>)
 8009556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800955a:	bf00      	nop
 800955c:	08009589 	.word	0x08009589
 8009560:	080095a3 	.word	0x080095a3
 8009564:	08009645 	.word	0x08009645
 8009568:	0800966b 	.word	0x0800966b
 800956c:	080096f7 	.word	0x080096f7
 8009570:	08009721 	.word	0x08009721
 8009574:	080097e3 	.word	0x080097e3
 8009578:	08009805 	.word	0x08009805
 800957c:	08009897 	.word	0x08009897
 8009580:	080098bd 	.word	0x080098bd
 8009584:	0800994f 	.word	0x0800994f
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f103 0110 	add.w	r1, r3, #16
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	795b      	ldrb	r3, [r3, #5]
 8009592:	461a      	mov	r2, r3
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 fa17 	bl	80099c8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2202      	movs	r2, #2
 800959e:	761a      	strb	r2, [r3, #24]
      break;
 80095a0:	e20c      	b.n	80099bc <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	795b      	ldrb	r3, [r3, #5]
 80095a6:	4619      	mov	r1, r3
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f003 faf5 	bl	800cb98 <USBH_LL_GetURBState>
 80095ae:	4603      	mov	r3, r0
 80095b0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80095b2:	7bbb      	ldrb	r3, [r7, #14]
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d12c      	bne.n	8009612 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	7c1b      	ldrb	r3, [r3, #16]
 80095bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80095c0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	8adb      	ldrh	r3, [r3, #22]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d00a      	beq.n	80095e0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80095ca:	7b7b      	ldrb	r3, [r7, #13]
 80095cc:	2b80      	cmp	r3, #128	; 0x80
 80095ce:	d103      	bne.n	80095d8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2203      	movs	r2, #3
 80095d4:	761a      	strb	r2, [r3, #24]
 80095d6:	e00d      	b.n	80095f4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2205      	movs	r2, #5
 80095dc:	761a      	strb	r2, [r3, #24]
 80095de:	e009      	b.n	80095f4 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 80095e0:	7b7b      	ldrb	r3, [r7, #13]
 80095e2:	2b80      	cmp	r3, #128	; 0x80
 80095e4:	d103      	bne.n	80095ee <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2209      	movs	r2, #9
 80095ea:	761a      	strb	r2, [r3, #24]
 80095ec:	e002      	b.n	80095f4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2207      	movs	r2, #7
 80095f2:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2203      	movs	r2, #3
 80095f8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009608:	2200      	movs	r2, #0
 800960a:	4619      	mov	r1, r3
 800960c:	f000 fc54 	bl	8009eb8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009610:	e1cb      	b.n	80099aa <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009612:	7bbb      	ldrb	r3, [r7, #14]
 8009614:	2b04      	cmp	r3, #4
 8009616:	d003      	beq.n	8009620 <USBH_HandleControl+0xe8>
 8009618:	7bbb      	ldrb	r3, [r7, #14]
 800961a:	2b02      	cmp	r3, #2
 800961c:	f040 81c5 	bne.w	80099aa <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	220b      	movs	r2, #11
 8009624:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2203      	movs	r2, #3
 800962a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800963a:	2200      	movs	r2, #0
 800963c:	4619      	mov	r1, r3
 800963e:	f000 fc3b 	bl	8009eb8 <osMessagePut>
      break;
 8009642:	e1b2      	b.n	80099aa <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800964a:	b29a      	uxth	r2, r3
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6899      	ldr	r1, [r3, #8]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	899a      	ldrh	r2, [r3, #12]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	791b      	ldrb	r3, [r3, #4]
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f000 f9f2 	bl	8009a46 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2204      	movs	r2, #4
 8009666:	761a      	strb	r2, [r3, #24]
      break;
 8009668:	e1a8      	b.n	80099bc <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	791b      	ldrb	r3, [r3, #4]
 800966e:	4619      	mov	r1, r3
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f003 fa91 	bl	800cb98 <USBH_LL_GetURBState>
 8009676:	4603      	mov	r3, r0
 8009678:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800967a:	7bbb      	ldrb	r3, [r7, #14]
 800967c:	2b01      	cmp	r3, #1
 800967e:	d110      	bne.n	80096a2 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2209      	movs	r2, #9
 8009684:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2203      	movs	r2, #3
 800968a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800969a:	2200      	movs	r2, #0
 800969c:	4619      	mov	r1, r3
 800969e:	f000 fc0b 	bl	8009eb8 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80096a2:	7bbb      	ldrb	r3, [r7, #14]
 80096a4:	2b05      	cmp	r3, #5
 80096a6:	d110      	bne.n	80096ca <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80096a8:	2303      	movs	r3, #3
 80096aa:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2203      	movs	r2, #3
 80096b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80096c0:	2200      	movs	r2, #0
 80096c2:	4619      	mov	r1, r3
 80096c4:	f000 fbf8 	bl	8009eb8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80096c8:	e171      	b.n	80099ae <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 80096ca:	7bbb      	ldrb	r3, [r7, #14]
 80096cc:	2b04      	cmp	r3, #4
 80096ce:	f040 816e 	bne.w	80099ae <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	220b      	movs	r2, #11
 80096d6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2203      	movs	r2, #3
 80096dc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80096ec:	2200      	movs	r2, #0
 80096ee:	4619      	mov	r1, r3
 80096f0:	f000 fbe2 	bl	8009eb8 <osMessagePut>
      break;
 80096f4:	e15b      	b.n	80099ae <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6899      	ldr	r1, [r3, #8]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	899a      	ldrh	r2, [r3, #12]
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	795b      	ldrb	r3, [r3, #5]
 8009702:	2001      	movs	r0, #1
 8009704:	9000      	str	r0, [sp, #0]
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 f978 	bl	80099fc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009712:	b29a      	uxth	r2, r3
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2206      	movs	r2, #6
 800971c:	761a      	strb	r2, [r3, #24]
      break;
 800971e:	e14d      	b.n	80099bc <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	795b      	ldrb	r3, [r3, #5]
 8009724:	4619      	mov	r1, r3
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f003 fa36 	bl	800cb98 <USBH_LL_GetURBState>
 800972c:	4603      	mov	r3, r0
 800972e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009730:	7bbb      	ldrb	r3, [r7, #14]
 8009732:	2b01      	cmp	r3, #1
 8009734:	d111      	bne.n	800975a <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2207      	movs	r2, #7
 800973a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2203      	movs	r2, #3
 8009740:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009750:	2200      	movs	r2, #0
 8009752:	4619      	mov	r1, r3
 8009754:	f000 fbb0 	bl	8009eb8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009758:	e12b      	b.n	80099b2 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800975a:	7bbb      	ldrb	r3, [r7, #14]
 800975c:	2b05      	cmp	r3, #5
 800975e:	d113      	bne.n	8009788 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	220c      	movs	r2, #12
 8009764:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009766:	2303      	movs	r3, #3
 8009768:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2203      	movs	r2, #3
 800976e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800977e:	2200      	movs	r2, #0
 8009780:	4619      	mov	r1, r3
 8009782:	f000 fb99 	bl	8009eb8 <osMessagePut>
      break;
 8009786:	e114      	b.n	80099b2 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009788:	7bbb      	ldrb	r3, [r7, #14]
 800978a:	2b02      	cmp	r3, #2
 800978c:	d111      	bne.n	80097b2 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2205      	movs	r2, #5
 8009792:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2203      	movs	r2, #3
 8009798:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80097a8:	2200      	movs	r2, #0
 80097aa:	4619      	mov	r1, r3
 80097ac:	f000 fb84 	bl	8009eb8 <osMessagePut>
      break;
 80097b0:	e0ff      	b.n	80099b2 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 80097b2:	7bbb      	ldrb	r3, [r7, #14]
 80097b4:	2b04      	cmp	r3, #4
 80097b6:	f040 80fc 	bne.w	80099b2 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	220b      	movs	r2, #11
 80097be:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80097c0:	2302      	movs	r3, #2
 80097c2:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2203      	movs	r2, #3
 80097c8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80097d8:	2200      	movs	r2, #0
 80097da:	4619      	mov	r1, r3
 80097dc:	f000 fb6c 	bl	8009eb8 <osMessagePut>
      break;
 80097e0:	e0e7      	b.n	80099b2 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	791b      	ldrb	r3, [r3, #4]
 80097e6:	2200      	movs	r2, #0
 80097e8:	2100      	movs	r1, #0
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 f92b 	bl	8009a46 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80097f6:	b29a      	uxth	r2, r3
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2208      	movs	r2, #8
 8009800:	761a      	strb	r2, [r3, #24]

      break;
 8009802:	e0db      	b.n	80099bc <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	791b      	ldrb	r3, [r3, #4]
 8009808:	4619      	mov	r1, r3
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f003 f9c4 	bl	800cb98 <USBH_LL_GetURBState>
 8009810:	4603      	mov	r3, r0
 8009812:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009814:	7bbb      	ldrb	r3, [r7, #14]
 8009816:	2b01      	cmp	r3, #1
 8009818:	d113      	bne.n	8009842 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	220d      	movs	r2, #13
 800981e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009820:	2300      	movs	r3, #0
 8009822:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2203      	movs	r2, #3
 8009828:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009838:	2200      	movs	r2, #0
 800983a:	4619      	mov	r1, r3
 800983c:	f000 fb3c 	bl	8009eb8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009840:	e0b9      	b.n	80099b6 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 8009842:	7bbb      	ldrb	r3, [r7, #14]
 8009844:	2b04      	cmp	r3, #4
 8009846:	d111      	bne.n	800986c <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	220b      	movs	r2, #11
 800984c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2203      	movs	r2, #3
 8009852:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009862:	2200      	movs	r2, #0
 8009864:	4619      	mov	r1, r3
 8009866:	f000 fb27 	bl	8009eb8 <osMessagePut>
      break;
 800986a:	e0a4      	b.n	80099b6 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800986c:	7bbb      	ldrb	r3, [r7, #14]
 800986e:	2b05      	cmp	r3, #5
 8009870:	f040 80a1 	bne.w	80099b6 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8009874:	2303      	movs	r3, #3
 8009876:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2203      	movs	r2, #3
 800987c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800988c:	2200      	movs	r2, #0
 800988e:	4619      	mov	r1, r3
 8009890:	f000 fb12 	bl	8009eb8 <osMessagePut>
      break;
 8009894:	e08f      	b.n	80099b6 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	795b      	ldrb	r3, [r3, #5]
 800989a:	2201      	movs	r2, #1
 800989c:	9200      	str	r2, [sp, #0]
 800989e:	2200      	movs	r2, #0
 80098a0:	2100      	movs	r1, #0
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f000 f8aa 	bl	80099fc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80098ae:	b29a      	uxth	r2, r3
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	220a      	movs	r2, #10
 80098b8:	761a      	strb	r2, [r3, #24]
      break;
 80098ba:	e07f      	b.n	80099bc <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	795b      	ldrb	r3, [r3, #5]
 80098c0:	4619      	mov	r1, r3
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f003 f968 	bl	800cb98 <USBH_LL_GetURBState>
 80098c8:	4603      	mov	r3, r0
 80098ca:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80098cc:	7bbb      	ldrb	r3, [r7, #14]
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	d113      	bne.n	80098fa <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 80098d2:	2300      	movs	r3, #0
 80098d4:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	220d      	movs	r2, #13
 80098da:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2203      	movs	r2, #3
 80098e0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80098f0:	2200      	movs	r2, #0
 80098f2:	4619      	mov	r1, r3
 80098f4:	f000 fae0 	bl	8009eb8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80098f8:	e05f      	b.n	80099ba <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 80098fa:	7bbb      	ldrb	r3, [r7, #14]
 80098fc:	2b02      	cmp	r3, #2
 80098fe:	d111      	bne.n	8009924 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2209      	movs	r2, #9
 8009904:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2203      	movs	r2, #3
 800990a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800991a:	2200      	movs	r2, #0
 800991c:	4619      	mov	r1, r3
 800991e:	f000 facb 	bl	8009eb8 <osMessagePut>
      break;
 8009922:	e04a      	b.n	80099ba <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8009924:	7bbb      	ldrb	r3, [r7, #14]
 8009926:	2b04      	cmp	r3, #4
 8009928:	d147      	bne.n	80099ba <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	220b      	movs	r2, #11
 800992e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2203      	movs	r2, #3
 8009934:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009944:	2200      	movs	r2, #0
 8009946:	4619      	mov	r1, r3
 8009948:	f000 fab6 	bl	8009eb8 <osMessagePut>
      break;
 800994c:	e035      	b.n	80099ba <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	7e5b      	ldrb	r3, [r3, #25]
 8009952:	3301      	adds	r3, #1
 8009954:	b2da      	uxtb	r2, r3
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	765a      	strb	r2, [r3, #25]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	7e5b      	ldrb	r3, [r3, #25]
 800995e:	2b02      	cmp	r3, #2
 8009960:	d806      	bhi.n	8009970 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2201      	movs	r2, #1
 8009966:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2201      	movs	r2, #1
 800996c:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800996e:	e025      	b.n	80099bc <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009976:	2106      	movs	r1, #6
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2200      	movs	r2, #0
 8009980:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	795b      	ldrb	r3, [r3, #5]
 8009986:	4619      	mov	r1, r3
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 f90d 	bl	8009ba8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	791b      	ldrb	r3, [r3, #4]
 8009992:	4619      	mov	r1, r3
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f000 f907 	bl	8009ba8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2200      	movs	r2, #0
 800999e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80099a0:	2302      	movs	r3, #2
 80099a2:	73fb      	strb	r3, [r7, #15]
      break;
 80099a4:	e00a      	b.n	80099bc <USBH_HandleControl+0x484>

    default:
      break;
 80099a6:	bf00      	nop
 80099a8:	e008      	b.n	80099bc <USBH_HandleControl+0x484>
      break;
 80099aa:	bf00      	nop
 80099ac:	e006      	b.n	80099bc <USBH_HandleControl+0x484>
      break;
 80099ae:	bf00      	nop
 80099b0:	e004      	b.n	80099bc <USBH_HandleControl+0x484>
      break;
 80099b2:	bf00      	nop
 80099b4:	e002      	b.n	80099bc <USBH_HandleControl+0x484>
      break;
 80099b6:	bf00      	nop
 80099b8:	e000      	b.n	80099bc <USBH_HandleControl+0x484>
      break;
 80099ba:	bf00      	nop
  }

  return status;
 80099bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3710      	adds	r7, #16
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}
 80099c6:	bf00      	nop

080099c8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b088      	sub	sp, #32
 80099cc:	af04      	add	r7, sp, #16
 80099ce:	60f8      	str	r0, [r7, #12]
 80099d0:	60b9      	str	r1, [r7, #8]
 80099d2:	4613      	mov	r3, r2
 80099d4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80099d6:	79f9      	ldrb	r1, [r7, #7]
 80099d8:	2300      	movs	r3, #0
 80099da:	9303      	str	r3, [sp, #12]
 80099dc:	2308      	movs	r3, #8
 80099de:	9302      	str	r3, [sp, #8]
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	9301      	str	r3, [sp, #4]
 80099e4:	2300      	movs	r3, #0
 80099e6:	9300      	str	r3, [sp, #0]
 80099e8:	2300      	movs	r3, #0
 80099ea:	2200      	movs	r2, #0
 80099ec:	68f8      	ldr	r0, [r7, #12]
 80099ee:	f003 f8a2 	bl	800cb36 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80099f2:	2300      	movs	r3, #0
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3710      	adds	r7, #16
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b088      	sub	sp, #32
 8009a00:	af04      	add	r7, sp, #16
 8009a02:	60f8      	str	r0, [r7, #12]
 8009a04:	60b9      	str	r1, [r7, #8]
 8009a06:	4611      	mov	r1, r2
 8009a08:	461a      	mov	r2, r3
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	80fb      	strh	r3, [r7, #6]
 8009a0e:	4613      	mov	r3, r2
 8009a10:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d001      	beq.n	8009a20 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009a20:	7979      	ldrb	r1, [r7, #5]
 8009a22:	7e3b      	ldrb	r3, [r7, #24]
 8009a24:	9303      	str	r3, [sp, #12]
 8009a26:	88fb      	ldrh	r3, [r7, #6]
 8009a28:	9302      	str	r3, [sp, #8]
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	9301      	str	r3, [sp, #4]
 8009a2e:	2301      	movs	r3, #1
 8009a30:	9300      	str	r3, [sp, #0]
 8009a32:	2300      	movs	r3, #0
 8009a34:	2200      	movs	r2, #0
 8009a36:	68f8      	ldr	r0, [r7, #12]
 8009a38:	f003 f87d 	bl	800cb36 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009a3c:	2300      	movs	r3, #0
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3710      	adds	r7, #16
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}

08009a46 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009a46:	b580      	push	{r7, lr}
 8009a48:	b088      	sub	sp, #32
 8009a4a:	af04      	add	r7, sp, #16
 8009a4c:	60f8      	str	r0, [r7, #12]
 8009a4e:	60b9      	str	r1, [r7, #8]
 8009a50:	4611      	mov	r1, r2
 8009a52:	461a      	mov	r2, r3
 8009a54:	460b      	mov	r3, r1
 8009a56:	80fb      	strh	r3, [r7, #6]
 8009a58:	4613      	mov	r3, r2
 8009a5a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009a5c:	7979      	ldrb	r1, [r7, #5]
 8009a5e:	2300      	movs	r3, #0
 8009a60:	9303      	str	r3, [sp, #12]
 8009a62:	88fb      	ldrh	r3, [r7, #6]
 8009a64:	9302      	str	r3, [sp, #8]
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	9301      	str	r3, [sp, #4]
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	9300      	str	r3, [sp, #0]
 8009a6e:	2300      	movs	r3, #0
 8009a70:	2201      	movs	r2, #1
 8009a72:	68f8      	ldr	r0, [r7, #12]
 8009a74:	f003 f85f 	bl	800cb36 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009a78:	2300      	movs	r3, #0

}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3710      	adds	r7, #16
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}

08009a82 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009a82:	b580      	push	{r7, lr}
 8009a84:	b088      	sub	sp, #32
 8009a86:	af04      	add	r7, sp, #16
 8009a88:	60f8      	str	r0, [r7, #12]
 8009a8a:	60b9      	str	r1, [r7, #8]
 8009a8c:	4611      	mov	r1, r2
 8009a8e:	461a      	mov	r2, r3
 8009a90:	460b      	mov	r3, r1
 8009a92:	80fb      	strh	r3, [r7, #6]
 8009a94:	4613      	mov	r3, r2
 8009a96:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d001      	beq.n	8009aa6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009aa6:	7979      	ldrb	r1, [r7, #5]
 8009aa8:	7e3b      	ldrb	r3, [r7, #24]
 8009aaa:	9303      	str	r3, [sp, #12]
 8009aac:	88fb      	ldrh	r3, [r7, #6]
 8009aae:	9302      	str	r3, [sp, #8]
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	9301      	str	r3, [sp, #4]
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	9300      	str	r3, [sp, #0]
 8009ab8:	2302      	movs	r3, #2
 8009aba:	2200      	movs	r2, #0
 8009abc:	68f8      	ldr	r0, [r7, #12]
 8009abe:	f003 f83a 	bl	800cb36 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009ac2:	2300      	movs	r3, #0
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3710      	adds	r7, #16
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b088      	sub	sp, #32
 8009ad0:	af04      	add	r7, sp, #16
 8009ad2:	60f8      	str	r0, [r7, #12]
 8009ad4:	60b9      	str	r1, [r7, #8]
 8009ad6:	4611      	mov	r1, r2
 8009ad8:	461a      	mov	r2, r3
 8009ada:	460b      	mov	r3, r1
 8009adc:	80fb      	strh	r3, [r7, #6]
 8009ade:	4613      	mov	r3, r2
 8009ae0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009ae2:	7979      	ldrb	r1, [r7, #5]
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	9303      	str	r3, [sp, #12]
 8009ae8:	88fb      	ldrh	r3, [r7, #6]
 8009aea:	9302      	str	r3, [sp, #8]
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	9301      	str	r3, [sp, #4]
 8009af0:	2301      	movs	r3, #1
 8009af2:	9300      	str	r3, [sp, #0]
 8009af4:	2302      	movs	r3, #2
 8009af6:	2201      	movs	r2, #1
 8009af8:	68f8      	ldr	r0, [r7, #12]
 8009afa:	f003 f81c 	bl	800cb36 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009afe:	2300      	movs	r3, #0
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3710      	adds	r7, #16
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b086      	sub	sp, #24
 8009b0c:	af04      	add	r7, sp, #16
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	4608      	mov	r0, r1
 8009b12:	4611      	mov	r1, r2
 8009b14:	461a      	mov	r2, r3
 8009b16:	4603      	mov	r3, r0
 8009b18:	70fb      	strb	r3, [r7, #3]
 8009b1a:	460b      	mov	r3, r1
 8009b1c:	70bb      	strb	r3, [r7, #2]
 8009b1e:	4613      	mov	r3, r2
 8009b20:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009b22:	7878      	ldrb	r0, [r7, #1]
 8009b24:	78ba      	ldrb	r2, [r7, #2]
 8009b26:	78f9      	ldrb	r1, [r7, #3]
 8009b28:	8b3b      	ldrh	r3, [r7, #24]
 8009b2a:	9302      	str	r3, [sp, #8]
 8009b2c:	7d3b      	ldrb	r3, [r7, #20]
 8009b2e:	9301      	str	r3, [sp, #4]
 8009b30:	7c3b      	ldrb	r3, [r7, #16]
 8009b32:	9300      	str	r3, [sp, #0]
 8009b34:	4603      	mov	r3, r0
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f002 ffaf 	bl	800ca9a <USBH_LL_OpenPipe>

  return USBH_OK;
 8009b3c:	2300      	movs	r3, #0
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3708      	adds	r7, #8
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}

08009b46 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009b46:	b580      	push	{r7, lr}
 8009b48:	b082      	sub	sp, #8
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]
 8009b4e:	460b      	mov	r3, r1
 8009b50:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009b52:	78fb      	ldrb	r3, [r7, #3]
 8009b54:	4619      	mov	r1, r3
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f002 ffce 	bl	800caf8 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009b5c:	2300      	movs	r3, #0
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3708      	adds	r7, #8
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}

08009b66 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009b66:	b580      	push	{r7, lr}
 8009b68:	b084      	sub	sp, #16
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	6078      	str	r0, [r7, #4]
 8009b6e:	460b      	mov	r3, r1
 8009b70:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 f836 	bl	8009be4 <USBH_GetFreePipe>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009b7c:	89fb      	ldrh	r3, [r7, #14]
 8009b7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d00a      	beq.n	8009b9c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009b86:	78fa      	ldrb	r2, [r7, #3]
 8009b88:	89fb      	ldrh	r3, [r7, #14]
 8009b8a:	f003 030f 	and.w	r3, r3, #15
 8009b8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009b92:	6879      	ldr	r1, [r7, #4]
 8009b94:	33e0      	adds	r3, #224	; 0xe0
 8009b96:	009b      	lsls	r3, r3, #2
 8009b98:	440b      	add	r3, r1
 8009b9a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009b9c:	89fb      	ldrh	r3, [r7, #14]
 8009b9e:	b2db      	uxtb	r3, r3
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3710      	adds	r7, #16
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}

08009ba8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b083      	sub	sp, #12
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009bb4:	78fb      	ldrb	r3, [r7, #3]
 8009bb6:	2b0f      	cmp	r3, #15
 8009bb8:	d80d      	bhi.n	8009bd6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009bba:	78fb      	ldrb	r3, [r7, #3]
 8009bbc:	687a      	ldr	r2, [r7, #4]
 8009bbe:	33e0      	adds	r3, #224	; 0xe0
 8009bc0:	009b      	lsls	r3, r3, #2
 8009bc2:	4413      	add	r3, r2
 8009bc4:	685a      	ldr	r2, [r3, #4]
 8009bc6:	78fb      	ldrb	r3, [r7, #3]
 8009bc8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009bcc:	6879      	ldr	r1, [r7, #4]
 8009bce:	33e0      	adds	r3, #224	; 0xe0
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	440b      	add	r3, r1
 8009bd4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009bd6:	2300      	movs	r3, #0
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	370c      	adds	r7, #12
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr

08009be4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b085      	sub	sp, #20
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009bec:	2300      	movs	r3, #0
 8009bee:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	73fb      	strb	r3, [r7, #15]
 8009bf4:	e00f      	b.n	8009c16 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009bf6:	7bfb      	ldrb	r3, [r7, #15]
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	33e0      	adds	r3, #224	; 0xe0
 8009bfc:	009b      	lsls	r3, r3, #2
 8009bfe:	4413      	add	r3, r2
 8009c00:	685b      	ldr	r3, [r3, #4]
 8009c02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d102      	bne.n	8009c10 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009c0a:	7bfb      	ldrb	r3, [r7, #15]
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	e007      	b.n	8009c20 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009c10:	7bfb      	ldrb	r3, [r7, #15]
 8009c12:	3301      	adds	r3, #1
 8009c14:	73fb      	strb	r3, [r7, #15]
 8009c16:	7bfb      	ldrb	r3, [r7, #15]
 8009c18:	2b0f      	cmp	r3, #15
 8009c1a:	d9ec      	bls.n	8009bf6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009c1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3714      	adds	r7, #20
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr

08009c2c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b085      	sub	sp, #20
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	4603      	mov	r3, r0
 8009c34:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009c36:	2300      	movs	r3, #0
 8009c38:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009c3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009c3e:	2b84      	cmp	r3, #132	; 0x84
 8009c40:	d005      	beq.n	8009c4e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009c42:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	4413      	add	r3, r2
 8009c4a:	3303      	adds	r3, #3
 8009c4c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3714      	adds	r7, #20
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr

08009c5c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b083      	sub	sp, #12
 8009c60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c62:	f3ef 8305 	mrs	r3, IPSR
 8009c66:	607b      	str	r3, [r7, #4]
  return(result);
 8009c68:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	bf14      	ite	ne
 8009c6e:	2301      	movne	r3, #1
 8009c70:	2300      	moveq	r3, #0
 8009c72:	b2db      	uxtb	r3, r3
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	370c      	adds	r7, #12
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7e:	4770      	bx	lr

08009c80 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009c84:	f001 f9ae 	bl	800afe4 <vTaskStartScheduler>
  
  return osOK;
 8009c88:	2300      	movs	r3, #0
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	bd80      	pop	{r7, pc}

08009c8e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009c8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c90:	b089      	sub	sp, #36	; 0x24
 8009c92:	af04      	add	r7, sp, #16
 8009c94:	6078      	str	r0, [r7, #4]
 8009c96:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	695b      	ldr	r3, [r3, #20]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d020      	beq.n	8009ce2 <osThreadCreate+0x54>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	699b      	ldr	r3, [r3, #24]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d01c      	beq.n	8009ce2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	685c      	ldr	r4, [r3, #4]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	691e      	ldr	r6, [r3, #16]
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f7ff ffb6 	bl	8009c2c <makeFreeRtosPriority>
 8009cc0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	695b      	ldr	r3, [r3, #20]
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009cca:	9202      	str	r2, [sp, #8]
 8009ccc:	9301      	str	r3, [sp, #4]
 8009cce:	9100      	str	r1, [sp, #0]
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	4632      	mov	r2, r6
 8009cd4:	4629      	mov	r1, r5
 8009cd6:	4620      	mov	r0, r4
 8009cd8:	f000 ff9a 	bl	800ac10 <xTaskCreateStatic>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	60fb      	str	r3, [r7, #12]
 8009ce0:	e01c      	b.n	8009d1c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	685c      	ldr	r4, [r3, #4]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009cee:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7ff ff98 	bl	8009c2c <makeFreeRtosPriority>
 8009cfc:	4602      	mov	r2, r0
 8009cfe:	f107 030c 	add.w	r3, r7, #12
 8009d02:	9301      	str	r3, [sp, #4]
 8009d04:	9200      	str	r2, [sp, #0]
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	4632      	mov	r2, r6
 8009d0a:	4629      	mov	r1, r5
 8009d0c:	4620      	mov	r0, r4
 8009d0e:	f000 ffdc 	bl	800acca <xTaskCreate>
 8009d12:	4603      	mov	r3, r0
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	d001      	beq.n	8009d1c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	e000      	b.n	8009d1e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3714      	adds	r7, #20
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009d26 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009d26:	b580      	push	{r7, lr}
 8009d28:	b084      	sub	sp, #16
 8009d2a:	af00      	add	r7, sp, #0
 8009d2c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d001      	beq.n	8009d3c <osDelay+0x16>
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	e000      	b.n	8009d3e <osDelay+0x18>
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f001 f91c 	bl	800af7c <vTaskDelay>
  
  return osOK;
 8009d44:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3710      	adds	r7, #16
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
	...

08009d50 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b086      	sub	sp, #24
 8009d54:	af02      	add	r7, sp, #8
 8009d56:	6078      	str	r0, [r7, #4]
 8009d58:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8009d62:	f7ff ff7b 	bl	8009c5c <inHandlerMode>
 8009d66:	4603      	mov	r3, r0
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d01c      	beq.n	8009da6 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8009d6c:	6839      	ldr	r1, [r7, #0]
 8009d6e:	f107 0208 	add.w	r2, r7, #8
 8009d72:	f107 030c 	add.w	r3, r7, #12
 8009d76:	9300      	str	r3, [sp, #0]
 8009d78:	4613      	mov	r3, r2
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f001 ff2d 	bl	800bbdc <xTaskGenericNotifyFromISR>
 8009d82:	4603      	mov	r3, r0
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	d002      	beq.n	8009d8e <osSignalSet+0x3e>
      return 0x80000000;
 8009d88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009d8c:	e019      	b.n	8009dc2 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d015      	beq.n	8009dc0 <osSignalSet+0x70>
 8009d94:	4b0d      	ldr	r3, [pc, #52]	; (8009dcc <osSignalSet+0x7c>)
 8009d96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d9a:	601a      	str	r2, [r3, #0]
 8009d9c:	f3bf 8f4f 	dsb	sy
 8009da0:	f3bf 8f6f 	isb	sy
 8009da4:	e00c      	b.n	8009dc0 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8009da6:	6839      	ldr	r1, [r7, #0]
 8009da8:	f107 0308 	add.w	r3, r7, #8
 8009dac:	2201      	movs	r2, #1
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f001 fe56 	bl	800ba60 <xTaskGenericNotify>
 8009db4:	4603      	mov	r3, r0
 8009db6:	2b01      	cmp	r3, #1
 8009db8:	d002      	beq.n	8009dc0 <osSignalSet+0x70>
    return 0x80000000;
 8009dba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009dbe:	e000      	b.n	8009dc2 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8009dc0:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3710      	adds	r7, #16
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	e000ed04 	.word	0xe000ed04

08009dd0 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8009dd0:	b590      	push	{r4, r7, lr}
 8009dd2:	b089      	sub	sp, #36	; 0x24
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	60b9      	str	r1, [r7, #8]
 8009dda:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8009ddc:	2300      	movs	r3, #0
 8009dde:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8009de0:	2300      	movs	r3, #0
 8009de2:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009dea:	d103      	bne.n	8009df4 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8009dec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009df0:	61fb      	str	r3, [r7, #28]
 8009df2:	e009      	b.n	8009e08 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d006      	beq.n	8009e08 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8009dfe:	69fb      	ldr	r3, [r7, #28]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d101      	bne.n	8009e08 <osSignalWait+0x38>
      ticks = 1;
 8009e04:	2301      	movs	r3, #1
 8009e06:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8009e08:	f7ff ff28 	bl	8009c5c <inHandlerMode>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d002      	beq.n	8009e18 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8009e12:	2382      	movs	r3, #130	; 0x82
 8009e14:	613b      	str	r3, [r7, #16]
 8009e16:	e01b      	b.n	8009e50 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8009e18:	68b9      	ldr	r1, [r7, #8]
 8009e1a:	f107 0310 	add.w	r3, r7, #16
 8009e1e:	1d1a      	adds	r2, r3, #4
 8009e20:	69fb      	ldr	r3, [r7, #28]
 8009e22:	2000      	movs	r0, #0
 8009e24:	f001 fdbc 	bl	800b9a0 <xTaskNotifyWait>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	2b01      	cmp	r3, #1
 8009e2c:	d008      	beq.n	8009e40 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8009e2e:	69fb      	ldr	r3, [r7, #28]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d102      	bne.n	8009e3a <osSignalWait+0x6a>
 8009e34:	2300      	movs	r3, #0
 8009e36:	613b      	str	r3, [r7, #16]
 8009e38:	e00a      	b.n	8009e50 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8009e3a:	2340      	movs	r3, #64	; 0x40
 8009e3c:	613b      	str	r3, [r7, #16]
 8009e3e:	e007      	b.n	8009e50 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	da02      	bge.n	8009e4c <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8009e46:	2386      	movs	r3, #134	; 0x86
 8009e48:	613b      	str	r3, [r7, #16]
 8009e4a:	e001      	b.n	8009e50 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8009e4c:	2308      	movs	r3, #8
 8009e4e:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	461c      	mov	r4, r3
 8009e54:	f107 0310 	add.w	r3, r7, #16
 8009e58:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009e5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009e60:	68f8      	ldr	r0, [r7, #12]
 8009e62:	3724      	adds	r7, #36	; 0x24
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd90      	pop	{r4, r7, pc}

08009e68 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009e68:	b590      	push	{r4, r7, lr}
 8009e6a:	b085      	sub	sp, #20
 8009e6c:	af02      	add	r7, sp, #8
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	689b      	ldr	r3, [r3, #8]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d011      	beq.n	8009e9e <osMessageCreate+0x36>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	68db      	ldr	r3, [r3, #12]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d00d      	beq.n	8009e9e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6818      	ldr	r0, [r3, #0]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6859      	ldr	r1, [r3, #4]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	689a      	ldr	r2, [r3, #8]
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	68db      	ldr	r3, [r3, #12]
 8009e92:	2400      	movs	r4, #0
 8009e94:	9400      	str	r4, [sp, #0]
 8009e96:	f000 f9df 	bl	800a258 <xQueueGenericCreateStatic>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	e008      	b.n	8009eb0 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6818      	ldr	r0, [r3, #0]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	685b      	ldr	r3, [r3, #4]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	f000 fa4d 	bl	800a348 <xQueueGenericCreate>
 8009eae:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	370c      	adds	r7, #12
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd90      	pop	{r4, r7, pc}

08009eb8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b086      	sub	sp, #24
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	60f8      	str	r0, [r7, #12]
 8009ec0:	60b9      	str	r1, [r7, #8]
 8009ec2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d101      	bne.n	8009ed6 <osMessagePut+0x1e>
    ticks = 1;
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009ed6:	f7ff fec1 	bl	8009c5c <inHandlerMode>
 8009eda:	4603      	mov	r3, r0
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d018      	beq.n	8009f12 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009ee0:	f107 0210 	add.w	r2, r7, #16
 8009ee4:	f107 0108 	add.w	r1, r7, #8
 8009ee8:	2300      	movs	r3, #0
 8009eea:	68f8      	ldr	r0, [r7, #12]
 8009eec:	f000 fb84 	bl	800a5f8 <xQueueGenericSendFromISR>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	d001      	beq.n	8009efa <osMessagePut+0x42>
      return osErrorOS;
 8009ef6:	23ff      	movs	r3, #255	; 0xff
 8009ef8:	e018      	b.n	8009f2c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d014      	beq.n	8009f2a <osMessagePut+0x72>
 8009f00:	4b0c      	ldr	r3, [pc, #48]	; (8009f34 <osMessagePut+0x7c>)
 8009f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f06:	601a      	str	r2, [r3, #0]
 8009f08:	f3bf 8f4f 	dsb	sy
 8009f0c:	f3bf 8f6f 	isb	sy
 8009f10:	e00b      	b.n	8009f2a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009f12:	f107 0108 	add.w	r1, r7, #8
 8009f16:	2300      	movs	r3, #0
 8009f18:	697a      	ldr	r2, [r7, #20]
 8009f1a:	68f8      	ldr	r0, [r7, #12]
 8009f1c:	f000 fa6e 	bl	800a3fc <xQueueGenericSend>
 8009f20:	4603      	mov	r3, r0
 8009f22:	2b01      	cmp	r3, #1
 8009f24:	d001      	beq.n	8009f2a <osMessagePut+0x72>
      return osErrorOS;
 8009f26:	23ff      	movs	r3, #255	; 0xff
 8009f28:	e000      	b.n	8009f2c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8009f2a:	2300      	movs	r3, #0
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3718      	adds	r7, #24
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}
 8009f34:	e000ed04 	.word	0xe000ed04

08009f38 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8009f38:	b590      	push	{r4, r7, lr}
 8009f3a:	b08b      	sub	sp, #44	; 0x2c
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d10a      	bne.n	8009f68 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8009f52:	2380      	movs	r3, #128	; 0x80
 8009f54:	617b      	str	r3, [r7, #20]
    return event;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	461c      	mov	r4, r3
 8009f5a:	f107 0314 	add.w	r3, r7, #20
 8009f5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009f62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009f66:	e054      	b.n	800a012 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f76:	d103      	bne.n	8009f80 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8009f78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8009f7e:	e009      	b.n	8009f94 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d006      	beq.n	8009f94 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8009f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d101      	bne.n	8009f94 <osMessageGet+0x5c>
      ticks = 1;
 8009f90:	2301      	movs	r3, #1
 8009f92:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8009f94:	f7ff fe62 	bl	8009c5c <inHandlerMode>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d01c      	beq.n	8009fd8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8009f9e:	f107 0220 	add.w	r2, r7, #32
 8009fa2:	f107 0314 	add.w	r3, r7, #20
 8009fa6:	3304      	adds	r3, #4
 8009fa8:	4619      	mov	r1, r3
 8009faa:	68b8      	ldr	r0, [r7, #8]
 8009fac:	f000 fca0 	bl	800a8f0 <xQueueReceiveFromISR>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	2b01      	cmp	r3, #1
 8009fb4:	d102      	bne.n	8009fbc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8009fb6:	2310      	movs	r3, #16
 8009fb8:	617b      	str	r3, [r7, #20]
 8009fba:	e001      	b.n	8009fc0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009fc0:	6a3b      	ldr	r3, [r7, #32]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d01d      	beq.n	800a002 <osMessageGet+0xca>
 8009fc6:	4b15      	ldr	r3, [pc, #84]	; (800a01c <osMessageGet+0xe4>)
 8009fc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fcc:	601a      	str	r2, [r3, #0]
 8009fce:	f3bf 8f4f 	dsb	sy
 8009fd2:	f3bf 8f6f 	isb	sy
 8009fd6:	e014      	b.n	800a002 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8009fd8:	f107 0314 	add.w	r3, r7, #20
 8009fdc:	3304      	adds	r3, #4
 8009fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	68b8      	ldr	r0, [r7, #8]
 8009fe4:	f000 fba4 	bl	800a730 <xQueueReceive>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d102      	bne.n	8009ff4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8009fee:	2310      	movs	r3, #16
 8009ff0:	617b      	str	r3, [r7, #20]
 8009ff2:	e006      	b.n	800a002 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d101      	bne.n	8009ffe <osMessageGet+0xc6>
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	e000      	b.n	800a000 <osMessageGet+0xc8>
 8009ffe:	2340      	movs	r3, #64	; 0x40
 800a000:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	461c      	mov	r4, r3
 800a006:	f107 0314 	add.w	r3, r7, #20
 800a00a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a00e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a012:	68f8      	ldr	r0, [r7, #12]
 800a014:	372c      	adds	r7, #44	; 0x2c
 800a016:	46bd      	mov	sp, r7
 800a018:	bd90      	pop	{r4, r7, pc}
 800a01a:	bf00      	nop
 800a01c:	e000ed04 	.word	0xe000ed04

0800a020 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a020:	b480      	push	{r7}
 800a022:	b083      	sub	sp, #12
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f103 0208 	add.w	r2, r3, #8
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a038:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f103 0208 	add.w	r2, r3, #8
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f103 0208 	add.w	r2, r3, #8
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2200      	movs	r2, #0
 800a052:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a054:	bf00      	nop
 800a056:	370c      	adds	r7, #12
 800a058:	46bd      	mov	sp, r7
 800a05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05e:	4770      	bx	lr

0800a060 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a060:	b480      	push	{r7}
 800a062:	b083      	sub	sp, #12
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2200      	movs	r2, #0
 800a06c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a06e:	bf00      	nop
 800a070:	370c      	adds	r7, #12
 800a072:	46bd      	mov	sp, r7
 800a074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a078:	4770      	bx	lr

0800a07a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a07a:	b480      	push	{r7}
 800a07c:	b085      	sub	sp, #20
 800a07e:	af00      	add	r7, sp, #0
 800a080:	6078      	str	r0, [r7, #4]
 800a082:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	68fa      	ldr	r2, [r7, #12]
 800a08e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	689a      	ldr	r2, [r3, #8]
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	689b      	ldr	r3, [r3, #8]
 800a09c:	683a      	ldr	r2, [r7, #0]
 800a09e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	683a      	ldr	r2, [r7, #0]
 800a0a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	687a      	ldr	r2, [r7, #4]
 800a0aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	1c5a      	adds	r2, r3, #1
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	601a      	str	r2, [r3, #0]
}
 800a0b6:	bf00      	nop
 800a0b8:	3714      	adds	r7, #20
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c0:	4770      	bx	lr

0800a0c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a0c2:	b480      	push	{r7}
 800a0c4:	b085      	sub	sp, #20
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
 800a0ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0d8:	d103      	bne.n	800a0e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	691b      	ldr	r3, [r3, #16]
 800a0de:	60fb      	str	r3, [r7, #12]
 800a0e0:	e00c      	b.n	800a0fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	3308      	adds	r3, #8
 800a0e6:	60fb      	str	r3, [r7, #12]
 800a0e8:	e002      	b.n	800a0f0 <vListInsert+0x2e>
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	685b      	ldr	r3, [r3, #4]
 800a0ee:	60fb      	str	r3, [r7, #12]
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	685b      	ldr	r3, [r3, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	68ba      	ldr	r2, [r7, #8]
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d2f6      	bcs.n	800a0ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	685a      	ldr	r2, [r3, #4]
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	683a      	ldr	r2, [r7, #0]
 800a10a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	68fa      	ldr	r2, [r7, #12]
 800a110:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	683a      	ldr	r2, [r7, #0]
 800a116:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	687a      	ldr	r2, [r7, #4]
 800a11c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	1c5a      	adds	r2, r3, #1
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	601a      	str	r2, [r3, #0]
}
 800a128:	bf00      	nop
 800a12a:	3714      	adds	r7, #20
 800a12c:	46bd      	mov	sp, r7
 800a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a132:	4770      	bx	lr

0800a134 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a134:	b480      	push	{r7}
 800a136:	b085      	sub	sp, #20
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	691b      	ldr	r3, [r3, #16]
 800a140:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	685b      	ldr	r3, [r3, #4]
 800a146:	687a      	ldr	r2, [r7, #4]
 800a148:	6892      	ldr	r2, [r2, #8]
 800a14a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	689b      	ldr	r3, [r3, #8]
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	6852      	ldr	r2, [r2, #4]
 800a154:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	685b      	ldr	r3, [r3, #4]
 800a15a:	687a      	ldr	r2, [r7, #4]
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d103      	bne.n	800a168 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	689a      	ldr	r2, [r3, #8]
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2200      	movs	r2, #0
 800a16c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	1e5a      	subs	r2, r3, #1
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3714      	adds	r7, #20
 800a180:	46bd      	mov	sp, r7
 800a182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a186:	4770      	bx	lr

0800a188 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b084      	sub	sp, #16
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d10a      	bne.n	800a1b2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a0:	f383 8811 	msr	BASEPRI, r3
 800a1a4:	f3bf 8f6f 	isb	sy
 800a1a8:	f3bf 8f4f 	dsb	sy
 800a1ac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a1ae:	bf00      	nop
 800a1b0:	e7fe      	b.n	800a1b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a1b2:	f001 ff87 	bl	800c0c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681a      	ldr	r2, [r3, #0]
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1be:	68f9      	ldr	r1, [r7, #12]
 800a1c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a1c2:	fb01 f303 	mul.w	r3, r1, r3
 800a1c6:	441a      	add	r2, r3
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681a      	ldr	r2, [r3, #0]
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681a      	ldr	r2, [r3, #0]
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1e2:	3b01      	subs	r3, #1
 800a1e4:	68f9      	ldr	r1, [r7, #12]
 800a1e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a1e8:	fb01 f303 	mul.w	r3, r1, r3
 800a1ec:	441a      	add	r2, r3
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	22ff      	movs	r2, #255	; 0xff
 800a1f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	22ff      	movs	r2, #255	; 0xff
 800a1fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d114      	bne.n	800a232 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	691b      	ldr	r3, [r3, #16]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d01a      	beq.n	800a246 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	3310      	adds	r3, #16
 800a214:	4618      	mov	r0, r3
 800a216:	f001 f95d 	bl	800b4d4 <xTaskRemoveFromEventList>
 800a21a:	4603      	mov	r3, r0
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d012      	beq.n	800a246 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a220:	4b0c      	ldr	r3, [pc, #48]	; (800a254 <xQueueGenericReset+0xcc>)
 800a222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a226:	601a      	str	r2, [r3, #0]
 800a228:	f3bf 8f4f 	dsb	sy
 800a22c:	f3bf 8f6f 	isb	sy
 800a230:	e009      	b.n	800a246 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	3310      	adds	r3, #16
 800a236:	4618      	mov	r0, r3
 800a238:	f7ff fef2 	bl	800a020 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	3324      	adds	r3, #36	; 0x24
 800a240:	4618      	mov	r0, r3
 800a242:	f7ff feed 	bl	800a020 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a246:	f001 ff6d 	bl	800c124 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a24a:	2301      	movs	r3, #1
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3710      	adds	r7, #16
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}
 800a254:	e000ed04 	.word	0xe000ed04

0800a258 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b08e      	sub	sp, #56	; 0x38
 800a25c:	af02      	add	r7, sp, #8
 800a25e:	60f8      	str	r0, [r7, #12]
 800a260:	60b9      	str	r1, [r7, #8]
 800a262:	607a      	str	r2, [r7, #4]
 800a264:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d10a      	bne.n	800a282 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a26c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a270:	f383 8811 	msr	BASEPRI, r3
 800a274:	f3bf 8f6f 	isb	sy
 800a278:	f3bf 8f4f 	dsb	sy
 800a27c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a27e:	bf00      	nop
 800a280:	e7fe      	b.n	800a280 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d10a      	bne.n	800a29e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a28c:	f383 8811 	msr	BASEPRI, r3
 800a290:	f3bf 8f6f 	isb	sy
 800a294:	f3bf 8f4f 	dsb	sy
 800a298:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a29a:	bf00      	nop
 800a29c:	e7fe      	b.n	800a29c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d002      	beq.n	800a2aa <xQueueGenericCreateStatic+0x52>
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d001      	beq.n	800a2ae <xQueueGenericCreateStatic+0x56>
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	e000      	b.n	800a2b0 <xQueueGenericCreateStatic+0x58>
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d10a      	bne.n	800a2ca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b8:	f383 8811 	msr	BASEPRI, r3
 800a2bc:	f3bf 8f6f 	isb	sy
 800a2c0:	f3bf 8f4f 	dsb	sy
 800a2c4:	623b      	str	r3, [r7, #32]
}
 800a2c6:	bf00      	nop
 800a2c8:	e7fe      	b.n	800a2c8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d102      	bne.n	800a2d6 <xQueueGenericCreateStatic+0x7e>
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d101      	bne.n	800a2da <xQueueGenericCreateStatic+0x82>
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	e000      	b.n	800a2dc <xQueueGenericCreateStatic+0x84>
 800a2da:	2300      	movs	r3, #0
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d10a      	bne.n	800a2f6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e4:	f383 8811 	msr	BASEPRI, r3
 800a2e8:	f3bf 8f6f 	isb	sy
 800a2ec:	f3bf 8f4f 	dsb	sy
 800a2f0:	61fb      	str	r3, [r7, #28]
}
 800a2f2:	bf00      	nop
 800a2f4:	e7fe      	b.n	800a2f4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a2f6:	2348      	movs	r3, #72	; 0x48
 800a2f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	2b48      	cmp	r3, #72	; 0x48
 800a2fe:	d00a      	beq.n	800a316 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a300:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a304:	f383 8811 	msr	BASEPRI, r3
 800a308:	f3bf 8f6f 	isb	sy
 800a30c:	f3bf 8f4f 	dsb	sy
 800a310:	61bb      	str	r3, [r7, #24]
}
 800a312:	bf00      	nop
 800a314:	e7fe      	b.n	800a314 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a316:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d00d      	beq.n	800a33e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a324:	2201      	movs	r2, #1
 800a326:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a32a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a330:	9300      	str	r3, [sp, #0]
 800a332:	4613      	mov	r3, r2
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	68b9      	ldr	r1, [r7, #8]
 800a338:	68f8      	ldr	r0, [r7, #12]
 800a33a:	f000 f83f 	bl	800a3bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a340:	4618      	mov	r0, r3
 800a342:	3730      	adds	r7, #48	; 0x30
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}

0800a348 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b08a      	sub	sp, #40	; 0x28
 800a34c:	af02      	add	r7, sp, #8
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	60b9      	str	r1, [r7, #8]
 800a352:	4613      	mov	r3, r2
 800a354:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d10a      	bne.n	800a372 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a360:	f383 8811 	msr	BASEPRI, r3
 800a364:	f3bf 8f6f 	isb	sy
 800a368:	f3bf 8f4f 	dsb	sy
 800a36c:	613b      	str	r3, [r7, #16]
}
 800a36e:	bf00      	nop
 800a370:	e7fe      	b.n	800a370 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	68ba      	ldr	r2, [r7, #8]
 800a376:	fb02 f303 	mul.w	r3, r2, r3
 800a37a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a37c:	69fb      	ldr	r3, [r7, #28]
 800a37e:	3348      	adds	r3, #72	; 0x48
 800a380:	4618      	mov	r0, r3
 800a382:	f001 ffc1 	bl	800c308 <pvPortMalloc>
 800a386:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a388:	69bb      	ldr	r3, [r7, #24]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d011      	beq.n	800a3b2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a38e:	69bb      	ldr	r3, [r7, #24]
 800a390:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	3348      	adds	r3, #72	; 0x48
 800a396:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a398:	69bb      	ldr	r3, [r7, #24]
 800a39a:	2200      	movs	r2, #0
 800a39c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a3a0:	79fa      	ldrb	r2, [r7, #7]
 800a3a2:	69bb      	ldr	r3, [r7, #24]
 800a3a4:	9300      	str	r3, [sp, #0]
 800a3a6:	4613      	mov	r3, r2
 800a3a8:	697a      	ldr	r2, [r7, #20]
 800a3aa:	68b9      	ldr	r1, [r7, #8]
 800a3ac:	68f8      	ldr	r0, [r7, #12]
 800a3ae:	f000 f805 	bl	800a3bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a3b2:	69bb      	ldr	r3, [r7, #24]
	}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3720      	adds	r7, #32
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}

0800a3bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b084      	sub	sp, #16
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	60f8      	str	r0, [r7, #12]
 800a3c4:	60b9      	str	r1, [r7, #8]
 800a3c6:	607a      	str	r2, [r7, #4]
 800a3c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d103      	bne.n	800a3d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a3d0:	69bb      	ldr	r3, [r7, #24]
 800a3d2:	69ba      	ldr	r2, [r7, #24]
 800a3d4:	601a      	str	r2, [r3, #0]
 800a3d6:	e002      	b.n	800a3de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a3d8:	69bb      	ldr	r3, [r7, #24]
 800a3da:	687a      	ldr	r2, [r7, #4]
 800a3dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a3de:	69bb      	ldr	r3, [r7, #24]
 800a3e0:	68fa      	ldr	r2, [r7, #12]
 800a3e2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a3e4:	69bb      	ldr	r3, [r7, #24]
 800a3e6:	68ba      	ldr	r2, [r7, #8]
 800a3e8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a3ea:	2101      	movs	r1, #1
 800a3ec:	69b8      	ldr	r0, [r7, #24]
 800a3ee:	f7ff fecb 	bl	800a188 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a3f2:	bf00      	nop
 800a3f4:	3710      	adds	r7, #16
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}
	...

0800a3fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b08e      	sub	sp, #56	; 0x38
 800a400:	af00      	add	r7, sp, #0
 800a402:	60f8      	str	r0, [r7, #12]
 800a404:	60b9      	str	r1, [r7, #8]
 800a406:	607a      	str	r2, [r7, #4]
 800a408:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a40a:	2300      	movs	r3, #0
 800a40c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a414:	2b00      	cmp	r3, #0
 800a416:	d10a      	bne.n	800a42e <xQueueGenericSend+0x32>
	__asm volatile
 800a418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41c:	f383 8811 	msr	BASEPRI, r3
 800a420:	f3bf 8f6f 	isb	sy
 800a424:	f3bf 8f4f 	dsb	sy
 800a428:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a42a:	bf00      	nop
 800a42c:	e7fe      	b.n	800a42c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d103      	bne.n	800a43c <xQueueGenericSend+0x40>
 800a434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d101      	bne.n	800a440 <xQueueGenericSend+0x44>
 800a43c:	2301      	movs	r3, #1
 800a43e:	e000      	b.n	800a442 <xQueueGenericSend+0x46>
 800a440:	2300      	movs	r3, #0
 800a442:	2b00      	cmp	r3, #0
 800a444:	d10a      	bne.n	800a45c <xQueueGenericSend+0x60>
	__asm volatile
 800a446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a44a:	f383 8811 	msr	BASEPRI, r3
 800a44e:	f3bf 8f6f 	isb	sy
 800a452:	f3bf 8f4f 	dsb	sy
 800a456:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a458:	bf00      	nop
 800a45a:	e7fe      	b.n	800a45a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	2b02      	cmp	r3, #2
 800a460:	d103      	bne.n	800a46a <xQueueGenericSend+0x6e>
 800a462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a466:	2b01      	cmp	r3, #1
 800a468:	d101      	bne.n	800a46e <xQueueGenericSend+0x72>
 800a46a:	2301      	movs	r3, #1
 800a46c:	e000      	b.n	800a470 <xQueueGenericSend+0x74>
 800a46e:	2300      	movs	r3, #0
 800a470:	2b00      	cmp	r3, #0
 800a472:	d10a      	bne.n	800a48a <xQueueGenericSend+0x8e>
	__asm volatile
 800a474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a478:	f383 8811 	msr	BASEPRI, r3
 800a47c:	f3bf 8f6f 	isb	sy
 800a480:	f3bf 8f4f 	dsb	sy
 800a484:	623b      	str	r3, [r7, #32]
}
 800a486:	bf00      	nop
 800a488:	e7fe      	b.n	800a488 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a48a:	f001 f9e5 	bl	800b858 <xTaskGetSchedulerState>
 800a48e:	4603      	mov	r3, r0
 800a490:	2b00      	cmp	r3, #0
 800a492:	d102      	bne.n	800a49a <xQueueGenericSend+0x9e>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d101      	bne.n	800a49e <xQueueGenericSend+0xa2>
 800a49a:	2301      	movs	r3, #1
 800a49c:	e000      	b.n	800a4a0 <xQueueGenericSend+0xa4>
 800a49e:	2300      	movs	r3, #0
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d10a      	bne.n	800a4ba <xQueueGenericSend+0xbe>
	__asm volatile
 800a4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a8:	f383 8811 	msr	BASEPRI, r3
 800a4ac:	f3bf 8f6f 	isb	sy
 800a4b0:	f3bf 8f4f 	dsb	sy
 800a4b4:	61fb      	str	r3, [r7, #28]
}
 800a4b6:	bf00      	nop
 800a4b8:	e7fe      	b.n	800a4b8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a4ba:	f001 fe03 	bl	800c0c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d302      	bcc.n	800a4d0 <xQueueGenericSend+0xd4>
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	2b02      	cmp	r3, #2
 800a4ce:	d129      	bne.n	800a524 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a4d0:	683a      	ldr	r2, [r7, #0]
 800a4d2:	68b9      	ldr	r1, [r7, #8]
 800a4d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4d6:	f000 fa8b 	bl	800a9f0 <prvCopyDataToQueue>
 800a4da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d010      	beq.n	800a506 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e6:	3324      	adds	r3, #36	; 0x24
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f000 fff3 	bl	800b4d4 <xTaskRemoveFromEventList>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d013      	beq.n	800a51c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a4f4:	4b3f      	ldr	r3, [pc, #252]	; (800a5f4 <xQueueGenericSend+0x1f8>)
 800a4f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4fa:	601a      	str	r2, [r3, #0]
 800a4fc:	f3bf 8f4f 	dsb	sy
 800a500:	f3bf 8f6f 	isb	sy
 800a504:	e00a      	b.n	800a51c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d007      	beq.n	800a51c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a50c:	4b39      	ldr	r3, [pc, #228]	; (800a5f4 <xQueueGenericSend+0x1f8>)
 800a50e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a512:	601a      	str	r2, [r3, #0]
 800a514:	f3bf 8f4f 	dsb	sy
 800a518:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a51c:	f001 fe02 	bl	800c124 <vPortExitCritical>
				return pdPASS;
 800a520:	2301      	movs	r3, #1
 800a522:	e063      	b.n	800a5ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d103      	bne.n	800a532 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a52a:	f001 fdfb 	bl	800c124 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a52e:	2300      	movs	r3, #0
 800a530:	e05c      	b.n	800a5ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a534:	2b00      	cmp	r3, #0
 800a536:	d106      	bne.n	800a546 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a538:	f107 0314 	add.w	r3, r7, #20
 800a53c:	4618      	mov	r0, r3
 800a53e:	f001 f82b 	bl	800b598 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a542:	2301      	movs	r3, #1
 800a544:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a546:	f001 fded 	bl	800c124 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a54a:	f000 fdb5 	bl	800b0b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a54e:	f001 fdb9 	bl	800c0c4 <vPortEnterCritical>
 800a552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a554:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a558:	b25b      	sxtb	r3, r3
 800a55a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a55e:	d103      	bne.n	800a568 <xQueueGenericSend+0x16c>
 800a560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a562:	2200      	movs	r2, #0
 800a564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a56a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a56e:	b25b      	sxtb	r3, r3
 800a570:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a574:	d103      	bne.n	800a57e <xQueueGenericSend+0x182>
 800a576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a578:	2200      	movs	r2, #0
 800a57a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a57e:	f001 fdd1 	bl	800c124 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a582:	1d3a      	adds	r2, r7, #4
 800a584:	f107 0314 	add.w	r3, r7, #20
 800a588:	4611      	mov	r1, r2
 800a58a:	4618      	mov	r0, r3
 800a58c:	f001 f81a 	bl	800b5c4 <xTaskCheckForTimeOut>
 800a590:	4603      	mov	r3, r0
 800a592:	2b00      	cmp	r3, #0
 800a594:	d124      	bne.n	800a5e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a596:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a598:	f000 fb22 	bl	800abe0 <prvIsQueueFull>
 800a59c:	4603      	mov	r3, r0
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d018      	beq.n	800a5d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a4:	3310      	adds	r3, #16
 800a5a6:	687a      	ldr	r2, [r7, #4]
 800a5a8:	4611      	mov	r1, r2
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f000 ff6e 	bl	800b48c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a5b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5b2:	f000 faad 	bl	800ab10 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a5b6:	f000 fd8d 	bl	800b0d4 <xTaskResumeAll>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	f47f af7c 	bne.w	800a4ba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a5c2:	4b0c      	ldr	r3, [pc, #48]	; (800a5f4 <xQueueGenericSend+0x1f8>)
 800a5c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5c8:	601a      	str	r2, [r3, #0]
 800a5ca:	f3bf 8f4f 	dsb	sy
 800a5ce:	f3bf 8f6f 	isb	sy
 800a5d2:	e772      	b.n	800a4ba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a5d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5d6:	f000 fa9b 	bl	800ab10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a5da:	f000 fd7b 	bl	800b0d4 <xTaskResumeAll>
 800a5de:	e76c      	b.n	800a4ba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a5e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5e2:	f000 fa95 	bl	800ab10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a5e6:	f000 fd75 	bl	800b0d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a5ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3738      	adds	r7, #56	; 0x38
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}
 800a5f4:	e000ed04 	.word	0xe000ed04

0800a5f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b090      	sub	sp, #64	; 0x40
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	60f8      	str	r0, [r7, #12]
 800a600:	60b9      	str	r1, [r7, #8]
 800a602:	607a      	str	r2, [r7, #4]
 800a604:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a60a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d10a      	bne.n	800a626 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a614:	f383 8811 	msr	BASEPRI, r3
 800a618:	f3bf 8f6f 	isb	sy
 800a61c:	f3bf 8f4f 	dsb	sy
 800a620:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a622:	bf00      	nop
 800a624:	e7fe      	b.n	800a624 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d103      	bne.n	800a634 <xQueueGenericSendFromISR+0x3c>
 800a62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a62e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a630:	2b00      	cmp	r3, #0
 800a632:	d101      	bne.n	800a638 <xQueueGenericSendFromISR+0x40>
 800a634:	2301      	movs	r3, #1
 800a636:	e000      	b.n	800a63a <xQueueGenericSendFromISR+0x42>
 800a638:	2300      	movs	r3, #0
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d10a      	bne.n	800a654 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a642:	f383 8811 	msr	BASEPRI, r3
 800a646:	f3bf 8f6f 	isb	sy
 800a64a:	f3bf 8f4f 	dsb	sy
 800a64e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a650:	bf00      	nop
 800a652:	e7fe      	b.n	800a652 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	2b02      	cmp	r3, #2
 800a658:	d103      	bne.n	800a662 <xQueueGenericSendFromISR+0x6a>
 800a65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a65c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a65e:	2b01      	cmp	r3, #1
 800a660:	d101      	bne.n	800a666 <xQueueGenericSendFromISR+0x6e>
 800a662:	2301      	movs	r3, #1
 800a664:	e000      	b.n	800a668 <xQueueGenericSendFromISR+0x70>
 800a666:	2300      	movs	r3, #0
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d10a      	bne.n	800a682 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a66c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a670:	f383 8811 	msr	BASEPRI, r3
 800a674:	f3bf 8f6f 	isb	sy
 800a678:	f3bf 8f4f 	dsb	sy
 800a67c:	623b      	str	r3, [r7, #32]
}
 800a67e:	bf00      	nop
 800a680:	e7fe      	b.n	800a680 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a682:	f001 fe01 	bl	800c288 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a686:	f3ef 8211 	mrs	r2, BASEPRI
 800a68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a68e:	f383 8811 	msr	BASEPRI, r3
 800a692:	f3bf 8f6f 	isb	sy
 800a696:	f3bf 8f4f 	dsb	sy
 800a69a:	61fa      	str	r2, [r7, #28]
 800a69c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a69e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a6a0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a6a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d302      	bcc.n	800a6b4 <xQueueGenericSendFromISR+0xbc>
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	2b02      	cmp	r3, #2
 800a6b2:	d12f      	bne.n	800a714 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a6b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6c2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a6c4:	683a      	ldr	r2, [r7, #0]
 800a6c6:	68b9      	ldr	r1, [r7, #8]
 800a6c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a6ca:	f000 f991 	bl	800a9f0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a6ce:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a6d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6d6:	d112      	bne.n	800a6fe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a6d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d016      	beq.n	800a70e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a6e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6e2:	3324      	adds	r3, #36	; 0x24
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f000 fef5 	bl	800b4d4 <xTaskRemoveFromEventList>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d00e      	beq.n	800a70e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d00b      	beq.n	800a70e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2201      	movs	r2, #1
 800a6fa:	601a      	str	r2, [r3, #0]
 800a6fc:	e007      	b.n	800a70e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a6fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a702:	3301      	adds	r3, #1
 800a704:	b2db      	uxtb	r3, r3
 800a706:	b25a      	sxtb	r2, r3
 800a708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a70a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a70e:	2301      	movs	r3, #1
 800a710:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a712:	e001      	b.n	800a718 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a714:	2300      	movs	r3, #0
 800a716:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a71a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a722:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a726:	4618      	mov	r0, r3
 800a728:	3740      	adds	r7, #64	; 0x40
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
	...

0800a730 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b08c      	sub	sp, #48	; 0x30
 800a734:	af00      	add	r7, sp, #0
 800a736:	60f8      	str	r0, [r7, #12]
 800a738:	60b9      	str	r1, [r7, #8]
 800a73a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a73c:	2300      	movs	r3, #0
 800a73e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a746:	2b00      	cmp	r3, #0
 800a748:	d10a      	bne.n	800a760 <xQueueReceive+0x30>
	__asm volatile
 800a74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a74e:	f383 8811 	msr	BASEPRI, r3
 800a752:	f3bf 8f6f 	isb	sy
 800a756:	f3bf 8f4f 	dsb	sy
 800a75a:	623b      	str	r3, [r7, #32]
}
 800a75c:	bf00      	nop
 800a75e:	e7fe      	b.n	800a75e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d103      	bne.n	800a76e <xQueueReceive+0x3e>
 800a766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d101      	bne.n	800a772 <xQueueReceive+0x42>
 800a76e:	2301      	movs	r3, #1
 800a770:	e000      	b.n	800a774 <xQueueReceive+0x44>
 800a772:	2300      	movs	r3, #0
 800a774:	2b00      	cmp	r3, #0
 800a776:	d10a      	bne.n	800a78e <xQueueReceive+0x5e>
	__asm volatile
 800a778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a77c:	f383 8811 	msr	BASEPRI, r3
 800a780:	f3bf 8f6f 	isb	sy
 800a784:	f3bf 8f4f 	dsb	sy
 800a788:	61fb      	str	r3, [r7, #28]
}
 800a78a:	bf00      	nop
 800a78c:	e7fe      	b.n	800a78c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a78e:	f001 f863 	bl	800b858 <xTaskGetSchedulerState>
 800a792:	4603      	mov	r3, r0
 800a794:	2b00      	cmp	r3, #0
 800a796:	d102      	bne.n	800a79e <xQueueReceive+0x6e>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d101      	bne.n	800a7a2 <xQueueReceive+0x72>
 800a79e:	2301      	movs	r3, #1
 800a7a0:	e000      	b.n	800a7a4 <xQueueReceive+0x74>
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d10a      	bne.n	800a7be <xQueueReceive+0x8e>
	__asm volatile
 800a7a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ac:	f383 8811 	msr	BASEPRI, r3
 800a7b0:	f3bf 8f6f 	isb	sy
 800a7b4:	f3bf 8f4f 	dsb	sy
 800a7b8:	61bb      	str	r3, [r7, #24]
}
 800a7ba:	bf00      	nop
 800a7bc:	e7fe      	b.n	800a7bc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a7be:	f001 fc81 	bl	800c0c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7c6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d01f      	beq.n	800a80e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a7ce:	68b9      	ldr	r1, [r7, #8]
 800a7d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7d2:	f000 f977 	bl	800aac4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d8:	1e5a      	subs	r2, r3, #1
 800a7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7dc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7e0:	691b      	ldr	r3, [r3, #16]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d00f      	beq.n	800a806 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7e8:	3310      	adds	r3, #16
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f000 fe72 	bl	800b4d4 <xTaskRemoveFromEventList>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d007      	beq.n	800a806 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a7f6:	4b3d      	ldr	r3, [pc, #244]	; (800a8ec <xQueueReceive+0x1bc>)
 800a7f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7fc:	601a      	str	r2, [r3, #0]
 800a7fe:	f3bf 8f4f 	dsb	sy
 800a802:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a806:	f001 fc8d 	bl	800c124 <vPortExitCritical>
				return pdPASS;
 800a80a:	2301      	movs	r3, #1
 800a80c:	e069      	b.n	800a8e2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d103      	bne.n	800a81c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a814:	f001 fc86 	bl	800c124 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a818:	2300      	movs	r3, #0
 800a81a:	e062      	b.n	800a8e2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d106      	bne.n	800a830 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a822:	f107 0310 	add.w	r3, r7, #16
 800a826:	4618      	mov	r0, r3
 800a828:	f000 feb6 	bl	800b598 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a82c:	2301      	movs	r3, #1
 800a82e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a830:	f001 fc78 	bl	800c124 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a834:	f000 fc40 	bl	800b0b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a838:	f001 fc44 	bl	800c0c4 <vPortEnterCritical>
 800a83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a83e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a842:	b25b      	sxtb	r3, r3
 800a844:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a848:	d103      	bne.n	800a852 <xQueueReceive+0x122>
 800a84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a84c:	2200      	movs	r2, #0
 800a84e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a854:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a858:	b25b      	sxtb	r3, r3
 800a85a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a85e:	d103      	bne.n	800a868 <xQueueReceive+0x138>
 800a860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a862:	2200      	movs	r2, #0
 800a864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a868:	f001 fc5c 	bl	800c124 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a86c:	1d3a      	adds	r2, r7, #4
 800a86e:	f107 0310 	add.w	r3, r7, #16
 800a872:	4611      	mov	r1, r2
 800a874:	4618      	mov	r0, r3
 800a876:	f000 fea5 	bl	800b5c4 <xTaskCheckForTimeOut>
 800a87a:	4603      	mov	r3, r0
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d123      	bne.n	800a8c8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a880:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a882:	f000 f997 	bl	800abb4 <prvIsQueueEmpty>
 800a886:	4603      	mov	r3, r0
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d017      	beq.n	800a8bc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a88e:	3324      	adds	r3, #36	; 0x24
 800a890:	687a      	ldr	r2, [r7, #4]
 800a892:	4611      	mov	r1, r2
 800a894:	4618      	mov	r0, r3
 800a896:	f000 fdf9 	bl	800b48c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a89a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a89c:	f000 f938 	bl	800ab10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a8a0:	f000 fc18 	bl	800b0d4 <xTaskResumeAll>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d189      	bne.n	800a7be <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a8aa:	4b10      	ldr	r3, [pc, #64]	; (800a8ec <xQueueReceive+0x1bc>)
 800a8ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8b0:	601a      	str	r2, [r3, #0]
 800a8b2:	f3bf 8f4f 	dsb	sy
 800a8b6:	f3bf 8f6f 	isb	sy
 800a8ba:	e780      	b.n	800a7be <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a8bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8be:	f000 f927 	bl	800ab10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a8c2:	f000 fc07 	bl	800b0d4 <xTaskResumeAll>
 800a8c6:	e77a      	b.n	800a7be <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a8c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8ca:	f000 f921 	bl	800ab10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a8ce:	f000 fc01 	bl	800b0d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a8d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8d4:	f000 f96e 	bl	800abb4 <prvIsQueueEmpty>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	f43f af6f 	beq.w	800a7be <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a8e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3730      	adds	r7, #48	; 0x30
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}
 800a8ea:	bf00      	nop
 800a8ec:	e000ed04 	.word	0xe000ed04

0800a8f0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b08e      	sub	sp, #56	; 0x38
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	60f8      	str	r0, [r7, #12]
 800a8f8:	60b9      	str	r1, [r7, #8]
 800a8fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a902:	2b00      	cmp	r3, #0
 800a904:	d10a      	bne.n	800a91c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a90a:	f383 8811 	msr	BASEPRI, r3
 800a90e:	f3bf 8f6f 	isb	sy
 800a912:	f3bf 8f4f 	dsb	sy
 800a916:	623b      	str	r3, [r7, #32]
}
 800a918:	bf00      	nop
 800a91a:	e7fe      	b.n	800a91a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d103      	bne.n	800a92a <xQueueReceiveFromISR+0x3a>
 800a922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a926:	2b00      	cmp	r3, #0
 800a928:	d101      	bne.n	800a92e <xQueueReceiveFromISR+0x3e>
 800a92a:	2301      	movs	r3, #1
 800a92c:	e000      	b.n	800a930 <xQueueReceiveFromISR+0x40>
 800a92e:	2300      	movs	r3, #0
 800a930:	2b00      	cmp	r3, #0
 800a932:	d10a      	bne.n	800a94a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a938:	f383 8811 	msr	BASEPRI, r3
 800a93c:	f3bf 8f6f 	isb	sy
 800a940:	f3bf 8f4f 	dsb	sy
 800a944:	61fb      	str	r3, [r7, #28]
}
 800a946:	bf00      	nop
 800a948:	e7fe      	b.n	800a948 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a94a:	f001 fc9d 	bl	800c288 <vPortValidateInterruptPriority>
	__asm volatile
 800a94e:	f3ef 8211 	mrs	r2, BASEPRI
 800a952:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a956:	f383 8811 	msr	BASEPRI, r3
 800a95a:	f3bf 8f6f 	isb	sy
 800a95e:	f3bf 8f4f 	dsb	sy
 800a962:	61ba      	str	r2, [r7, #24]
 800a964:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a966:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a968:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a96c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a96e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a972:	2b00      	cmp	r3, #0
 800a974:	d02f      	beq.n	800a9d6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a978:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a97c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a980:	68b9      	ldr	r1, [r7, #8]
 800a982:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a984:	f000 f89e 	bl	800aac4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a98a:	1e5a      	subs	r2, r3, #1
 800a98c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a98e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a990:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a994:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a998:	d112      	bne.n	800a9c0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a99c:	691b      	ldr	r3, [r3, #16]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d016      	beq.n	800a9d0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a4:	3310      	adds	r3, #16
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f000 fd94 	bl	800b4d4 <xTaskRemoveFromEventList>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d00e      	beq.n	800a9d0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d00b      	beq.n	800a9d0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2201      	movs	r2, #1
 800a9bc:	601a      	str	r2, [r3, #0]
 800a9be:	e007      	b.n	800a9d0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a9c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9c4:	3301      	adds	r3, #1
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	b25a      	sxtb	r2, r3
 800a9ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	637b      	str	r3, [r7, #52]	; 0x34
 800a9d4:	e001      	b.n	800a9da <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	637b      	str	r3, [r7, #52]	; 0x34
 800a9da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9dc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	f383 8811 	msr	BASEPRI, r3
}
 800a9e4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a9e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3738      	adds	r7, #56	; 0x38
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}

0800a9f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b086      	sub	sp, #24
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	60f8      	str	r0, [r7, #12]
 800a9f8:	60b9      	str	r1, [r7, #8]
 800a9fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa04:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d10d      	bne.n	800aa2a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d14d      	bne.n	800aab2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	689b      	ldr	r3, [r3, #8]
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f000 ff3a 	bl	800b894 <xTaskPriorityDisinherit>
 800aa20:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	2200      	movs	r2, #0
 800aa26:	609a      	str	r2, [r3, #8]
 800aa28:	e043      	b.n	800aab2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d119      	bne.n	800aa64 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	6858      	ldr	r0, [r3, #4]
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa38:	461a      	mov	r2, r3
 800aa3a:	68b9      	ldr	r1, [r7, #8]
 800aa3c:	f002 fcff 	bl	800d43e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	685a      	ldr	r2, [r3, #4]
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa48:	441a      	add	r2, r3
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	685a      	ldr	r2, [r3, #4]
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	689b      	ldr	r3, [r3, #8]
 800aa56:	429a      	cmp	r2, r3
 800aa58:	d32b      	bcc.n	800aab2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681a      	ldr	r2, [r3, #0]
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	605a      	str	r2, [r3, #4]
 800aa62:	e026      	b.n	800aab2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	68d8      	ldr	r0, [r3, #12]
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa6c:	461a      	mov	r2, r3
 800aa6e:	68b9      	ldr	r1, [r7, #8]
 800aa70:	f002 fce5 	bl	800d43e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	68da      	ldr	r2, [r3, #12]
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa7c:	425b      	negs	r3, r3
 800aa7e:	441a      	add	r2, r3
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	68da      	ldr	r2, [r3, #12]
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	429a      	cmp	r2, r3
 800aa8e:	d207      	bcs.n	800aaa0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	689a      	ldr	r2, [r3, #8]
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa98:	425b      	negs	r3, r3
 800aa9a:	441a      	add	r2, r3
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2b02      	cmp	r3, #2
 800aaa4:	d105      	bne.n	800aab2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d002      	beq.n	800aab2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	3b01      	subs	r3, #1
 800aab0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	1c5a      	adds	r2, r3, #1
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800aaba:	697b      	ldr	r3, [r7, #20]
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3718      	adds	r7, #24
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}

0800aac4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b082      	sub	sp, #8
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
 800aacc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d018      	beq.n	800ab08 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	68da      	ldr	r2, [r3, #12]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aade:	441a      	add	r2, r3
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	68da      	ldr	r2, [r3, #12]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	689b      	ldr	r3, [r3, #8]
 800aaec:	429a      	cmp	r2, r3
 800aaee:	d303      	bcc.n	800aaf8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681a      	ldr	r2, [r3, #0]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	68d9      	ldr	r1, [r3, #12]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab00:	461a      	mov	r2, r3
 800ab02:	6838      	ldr	r0, [r7, #0]
 800ab04:	f002 fc9b 	bl	800d43e <memcpy>
	}
}
 800ab08:	bf00      	nop
 800ab0a:	3708      	adds	r7, #8
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}

0800ab10 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b084      	sub	sp, #16
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ab18:	f001 fad4 	bl	800c0c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab22:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ab24:	e011      	b.n	800ab4a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d012      	beq.n	800ab54 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	3324      	adds	r3, #36	; 0x24
 800ab32:	4618      	mov	r0, r3
 800ab34:	f000 fcce 	bl	800b4d4 <xTaskRemoveFromEventList>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d001      	beq.n	800ab42 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ab3e:	f000 fda3 	bl	800b688 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ab42:	7bfb      	ldrb	r3, [r7, #15]
 800ab44:	3b01      	subs	r3, #1
 800ab46:	b2db      	uxtb	r3, r3
 800ab48:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ab4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	dce9      	bgt.n	800ab26 <prvUnlockQueue+0x16>
 800ab52:	e000      	b.n	800ab56 <prvUnlockQueue+0x46>
					break;
 800ab54:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	22ff      	movs	r2, #255	; 0xff
 800ab5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ab5e:	f001 fae1 	bl	800c124 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ab62:	f001 faaf 	bl	800c0c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab6c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ab6e:	e011      	b.n	800ab94 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	691b      	ldr	r3, [r3, #16]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d012      	beq.n	800ab9e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	3310      	adds	r3, #16
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f000 fca9 	bl	800b4d4 <xTaskRemoveFromEventList>
 800ab82:	4603      	mov	r3, r0
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d001      	beq.n	800ab8c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ab88:	f000 fd7e 	bl	800b688 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ab8c:	7bbb      	ldrb	r3, [r7, #14]
 800ab8e:	3b01      	subs	r3, #1
 800ab90:	b2db      	uxtb	r3, r3
 800ab92:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ab94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	dce9      	bgt.n	800ab70 <prvUnlockQueue+0x60>
 800ab9c:	e000      	b.n	800aba0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ab9e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	22ff      	movs	r2, #255	; 0xff
 800aba4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800aba8:	f001 fabc 	bl	800c124 <vPortExitCritical>
}
 800abac:	bf00      	nop
 800abae:	3710      	adds	r7, #16
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}

0800abb4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b084      	sub	sp, #16
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800abbc:	f001 fa82 	bl	800c0c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d102      	bne.n	800abce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800abc8:	2301      	movs	r3, #1
 800abca:	60fb      	str	r3, [r7, #12]
 800abcc:	e001      	b.n	800abd2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800abce:	2300      	movs	r3, #0
 800abd0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800abd2:	f001 faa7 	bl	800c124 <vPortExitCritical>

	return xReturn;
 800abd6:	68fb      	ldr	r3, [r7, #12]
}
 800abd8:	4618      	mov	r0, r3
 800abda:	3710      	adds	r7, #16
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}

0800abe0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b084      	sub	sp, #16
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800abe8:	f001 fa6c 	bl	800c0c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d102      	bne.n	800abfe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800abf8:	2301      	movs	r3, #1
 800abfa:	60fb      	str	r3, [r7, #12]
 800abfc:	e001      	b.n	800ac02 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800abfe:	2300      	movs	r3, #0
 800ac00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ac02:	f001 fa8f 	bl	800c124 <vPortExitCritical>

	return xReturn;
 800ac06:	68fb      	ldr	r3, [r7, #12]
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	3710      	adds	r7, #16
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}

0800ac10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b08e      	sub	sp, #56	; 0x38
 800ac14:	af04      	add	r7, sp, #16
 800ac16:	60f8      	str	r0, [r7, #12]
 800ac18:	60b9      	str	r1, [r7, #8]
 800ac1a:	607a      	str	r2, [r7, #4]
 800ac1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ac1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d10a      	bne.n	800ac3a <xTaskCreateStatic+0x2a>
	__asm volatile
 800ac24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac28:	f383 8811 	msr	BASEPRI, r3
 800ac2c:	f3bf 8f6f 	isb	sy
 800ac30:	f3bf 8f4f 	dsb	sy
 800ac34:	623b      	str	r3, [r7, #32]
}
 800ac36:	bf00      	nop
 800ac38:	e7fe      	b.n	800ac38 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ac3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d10a      	bne.n	800ac56 <xTaskCreateStatic+0x46>
	__asm volatile
 800ac40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac44:	f383 8811 	msr	BASEPRI, r3
 800ac48:	f3bf 8f6f 	isb	sy
 800ac4c:	f3bf 8f4f 	dsb	sy
 800ac50:	61fb      	str	r3, [r7, #28]
}
 800ac52:	bf00      	nop
 800ac54:	e7fe      	b.n	800ac54 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ac56:	23a4      	movs	r3, #164	; 0xa4
 800ac58:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	2ba4      	cmp	r3, #164	; 0xa4
 800ac5e:	d00a      	beq.n	800ac76 <xTaskCreateStatic+0x66>
	__asm volatile
 800ac60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac64:	f383 8811 	msr	BASEPRI, r3
 800ac68:	f3bf 8f6f 	isb	sy
 800ac6c:	f3bf 8f4f 	dsb	sy
 800ac70:	61bb      	str	r3, [r7, #24]
}
 800ac72:	bf00      	nop
 800ac74:	e7fe      	b.n	800ac74 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ac76:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ac78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d01e      	beq.n	800acbc <xTaskCreateStatic+0xac>
 800ac7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d01b      	beq.n	800acbc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ac84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac86:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ac88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac8c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ac8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac90:	2202      	movs	r2, #2
 800ac92:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ac96:	2300      	movs	r3, #0
 800ac98:	9303      	str	r3, [sp, #12]
 800ac9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac9c:	9302      	str	r3, [sp, #8]
 800ac9e:	f107 0314 	add.w	r3, r7, #20
 800aca2:	9301      	str	r3, [sp, #4]
 800aca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aca6:	9300      	str	r3, [sp, #0]
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	687a      	ldr	r2, [r7, #4]
 800acac:	68b9      	ldr	r1, [r7, #8]
 800acae:	68f8      	ldr	r0, [r7, #12]
 800acb0:	f000 f850 	bl	800ad54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800acb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800acb6:	f000 f8f7 	bl	800aea8 <prvAddNewTaskToReadyList>
 800acba:	e001      	b.n	800acc0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800acbc:	2300      	movs	r3, #0
 800acbe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800acc0:	697b      	ldr	r3, [r7, #20]
	}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3728      	adds	r7, #40	; 0x28
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}

0800acca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800acca:	b580      	push	{r7, lr}
 800accc:	b08c      	sub	sp, #48	; 0x30
 800acce:	af04      	add	r7, sp, #16
 800acd0:	60f8      	str	r0, [r7, #12]
 800acd2:	60b9      	str	r1, [r7, #8]
 800acd4:	603b      	str	r3, [r7, #0]
 800acd6:	4613      	mov	r3, r2
 800acd8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800acda:	88fb      	ldrh	r3, [r7, #6]
 800acdc:	009b      	lsls	r3, r3, #2
 800acde:	4618      	mov	r0, r3
 800ace0:	f001 fb12 	bl	800c308 <pvPortMalloc>
 800ace4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d00e      	beq.n	800ad0a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800acec:	20a4      	movs	r0, #164	; 0xa4
 800acee:	f001 fb0b 	bl	800c308 <pvPortMalloc>
 800acf2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800acf4:	69fb      	ldr	r3, [r7, #28]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d003      	beq.n	800ad02 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800acfa:	69fb      	ldr	r3, [r7, #28]
 800acfc:	697a      	ldr	r2, [r7, #20]
 800acfe:	631a      	str	r2, [r3, #48]	; 0x30
 800ad00:	e005      	b.n	800ad0e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ad02:	6978      	ldr	r0, [r7, #20]
 800ad04:	f001 fbd0 	bl	800c4a8 <vPortFree>
 800ad08:	e001      	b.n	800ad0e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ad0e:	69fb      	ldr	r3, [r7, #28]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d017      	beq.n	800ad44 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ad14:	69fb      	ldr	r3, [r7, #28]
 800ad16:	2200      	movs	r2, #0
 800ad18:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ad1c:	88fa      	ldrh	r2, [r7, #6]
 800ad1e:	2300      	movs	r3, #0
 800ad20:	9303      	str	r3, [sp, #12]
 800ad22:	69fb      	ldr	r3, [r7, #28]
 800ad24:	9302      	str	r3, [sp, #8]
 800ad26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad28:	9301      	str	r3, [sp, #4]
 800ad2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad2c:	9300      	str	r3, [sp, #0]
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	68b9      	ldr	r1, [r7, #8]
 800ad32:	68f8      	ldr	r0, [r7, #12]
 800ad34:	f000 f80e 	bl	800ad54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ad38:	69f8      	ldr	r0, [r7, #28]
 800ad3a:	f000 f8b5 	bl	800aea8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ad3e:	2301      	movs	r3, #1
 800ad40:	61bb      	str	r3, [r7, #24]
 800ad42:	e002      	b.n	800ad4a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ad44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad48:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ad4a:	69bb      	ldr	r3, [r7, #24]
	}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3720      	adds	r7, #32
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b088      	sub	sp, #32
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	60f8      	str	r0, [r7, #12]
 800ad5c:	60b9      	str	r1, [r7, #8]
 800ad5e:	607a      	str	r2, [r7, #4]
 800ad60:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ad62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad64:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	009b      	lsls	r3, r3, #2
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	21a5      	movs	r1, #165	; 0xa5
 800ad6e:	f002 fa85 	bl	800d27c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ad72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ad7c:	3b01      	subs	r3, #1
 800ad7e:	009b      	lsls	r3, r3, #2
 800ad80:	4413      	add	r3, r2
 800ad82:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ad84:	69bb      	ldr	r3, [r7, #24]
 800ad86:	f023 0307 	bic.w	r3, r3, #7
 800ad8a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ad8c:	69bb      	ldr	r3, [r7, #24]
 800ad8e:	f003 0307 	and.w	r3, r3, #7
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d00a      	beq.n	800adac <prvInitialiseNewTask+0x58>
	__asm volatile
 800ad96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad9a:	f383 8811 	msr	BASEPRI, r3
 800ad9e:	f3bf 8f6f 	isb	sy
 800ada2:	f3bf 8f4f 	dsb	sy
 800ada6:	617b      	str	r3, [r7, #20]
}
 800ada8:	bf00      	nop
 800adaa:	e7fe      	b.n	800adaa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d01f      	beq.n	800adf2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800adb2:	2300      	movs	r3, #0
 800adb4:	61fb      	str	r3, [r7, #28]
 800adb6:	e012      	b.n	800adde <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800adb8:	68ba      	ldr	r2, [r7, #8]
 800adba:	69fb      	ldr	r3, [r7, #28]
 800adbc:	4413      	add	r3, r2
 800adbe:	7819      	ldrb	r1, [r3, #0]
 800adc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adc2:	69fb      	ldr	r3, [r7, #28]
 800adc4:	4413      	add	r3, r2
 800adc6:	3334      	adds	r3, #52	; 0x34
 800adc8:	460a      	mov	r2, r1
 800adca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800adcc:	68ba      	ldr	r2, [r7, #8]
 800adce:	69fb      	ldr	r3, [r7, #28]
 800add0:	4413      	add	r3, r2
 800add2:	781b      	ldrb	r3, [r3, #0]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d006      	beq.n	800ade6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800add8:	69fb      	ldr	r3, [r7, #28]
 800adda:	3301      	adds	r3, #1
 800addc:	61fb      	str	r3, [r7, #28]
 800adde:	69fb      	ldr	r3, [r7, #28]
 800ade0:	2b0f      	cmp	r3, #15
 800ade2:	d9e9      	bls.n	800adb8 <prvInitialiseNewTask+0x64>
 800ade4:	e000      	b.n	800ade8 <prvInitialiseNewTask+0x94>
			{
				break;
 800ade6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ade8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adea:	2200      	movs	r2, #0
 800adec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800adf0:	e003      	b.n	800adfa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800adf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf4:	2200      	movs	r2, #0
 800adf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800adfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adfc:	2b06      	cmp	r3, #6
 800adfe:	d901      	bls.n	800ae04 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ae00:	2306      	movs	r3, #6
 800ae02:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ae04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae08:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ae0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae0e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ae10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae12:	2200      	movs	r2, #0
 800ae14:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ae16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae18:	3304      	adds	r3, #4
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f7ff f920 	bl	800a060 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ae20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae22:	3318      	adds	r3, #24
 800ae24:	4618      	mov	r0, r3
 800ae26:	f7ff f91b 	bl	800a060 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ae2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae2e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae32:	f1c3 0207 	rsb	r2, r3, #7
 800ae36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae38:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ae3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae3e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800ae40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae42:	2200      	movs	r2, #0
 800ae44:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ae46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae48:	2200      	movs	r2, #0
 800ae4a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ae4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae50:	2200      	movs	r2, #0
 800ae52:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ae56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae58:	3350      	adds	r3, #80	; 0x50
 800ae5a:	224c      	movs	r2, #76	; 0x4c
 800ae5c:	2100      	movs	r1, #0
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f002 fa0c 	bl	800d27c <memset>
 800ae64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae66:	4a0d      	ldr	r2, [pc, #52]	; (800ae9c <prvInitialiseNewTask+0x148>)
 800ae68:	655a      	str	r2, [r3, #84]	; 0x54
 800ae6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae6c:	4a0c      	ldr	r2, [pc, #48]	; (800aea0 <prvInitialiseNewTask+0x14c>)
 800ae6e:	659a      	str	r2, [r3, #88]	; 0x58
 800ae70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae72:	4a0c      	ldr	r2, [pc, #48]	; (800aea4 <prvInitialiseNewTask+0x150>)
 800ae74:	65da      	str	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ae76:	683a      	ldr	r2, [r7, #0]
 800ae78:	68f9      	ldr	r1, [r7, #12]
 800ae7a:	69b8      	ldr	r0, [r7, #24]
 800ae7c:	f000 fff8 	bl	800be70 <pxPortInitialiseStack>
 800ae80:	4602      	mov	r2, r0
 800ae82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae84:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ae86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d002      	beq.n	800ae92 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ae8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae92:	bf00      	nop
 800ae94:	3720      	adds	r7, #32
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}
 800ae9a:	bf00      	nop
 800ae9c:	20010dd0 	.word	0x20010dd0
 800aea0:	20010e38 	.word	0x20010e38
 800aea4:	20010ea0 	.word	0x20010ea0

0800aea8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b082      	sub	sp, #8
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800aeb0:	f001 f908 	bl	800c0c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800aeb4:	4b2a      	ldr	r3, [pc, #168]	; (800af60 <prvAddNewTaskToReadyList+0xb8>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	3301      	adds	r3, #1
 800aeba:	4a29      	ldr	r2, [pc, #164]	; (800af60 <prvAddNewTaskToReadyList+0xb8>)
 800aebc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800aebe:	4b29      	ldr	r3, [pc, #164]	; (800af64 <prvAddNewTaskToReadyList+0xbc>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d109      	bne.n	800aeda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800aec6:	4a27      	ldr	r2, [pc, #156]	; (800af64 <prvAddNewTaskToReadyList+0xbc>)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800aecc:	4b24      	ldr	r3, [pc, #144]	; (800af60 <prvAddNewTaskToReadyList+0xb8>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	d110      	bne.n	800aef6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800aed4:	f000 fbfe 	bl	800b6d4 <prvInitialiseTaskLists>
 800aed8:	e00d      	b.n	800aef6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800aeda:	4b23      	ldr	r3, [pc, #140]	; (800af68 <prvAddNewTaskToReadyList+0xc0>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d109      	bne.n	800aef6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800aee2:	4b20      	ldr	r3, [pc, #128]	; (800af64 <prvAddNewTaskToReadyList+0xbc>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d802      	bhi.n	800aef6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800aef0:	4a1c      	ldr	r2, [pc, #112]	; (800af64 <prvAddNewTaskToReadyList+0xbc>)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800aef6:	4b1d      	ldr	r3, [pc, #116]	; (800af6c <prvAddNewTaskToReadyList+0xc4>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	3301      	adds	r3, #1
 800aefc:	4a1b      	ldr	r2, [pc, #108]	; (800af6c <prvAddNewTaskToReadyList+0xc4>)
 800aefe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af04:	2201      	movs	r2, #1
 800af06:	409a      	lsls	r2, r3
 800af08:	4b19      	ldr	r3, [pc, #100]	; (800af70 <prvAddNewTaskToReadyList+0xc8>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	4313      	orrs	r3, r2
 800af0e:	4a18      	ldr	r2, [pc, #96]	; (800af70 <prvAddNewTaskToReadyList+0xc8>)
 800af10:	6013      	str	r3, [r2, #0]
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af16:	4613      	mov	r3, r2
 800af18:	009b      	lsls	r3, r3, #2
 800af1a:	4413      	add	r3, r2
 800af1c:	009b      	lsls	r3, r3, #2
 800af1e:	4a15      	ldr	r2, [pc, #84]	; (800af74 <prvAddNewTaskToReadyList+0xcc>)
 800af20:	441a      	add	r2, r3
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	3304      	adds	r3, #4
 800af26:	4619      	mov	r1, r3
 800af28:	4610      	mov	r0, r2
 800af2a:	f7ff f8a6 	bl	800a07a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800af2e:	f001 f8f9 	bl	800c124 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800af32:	4b0d      	ldr	r3, [pc, #52]	; (800af68 <prvAddNewTaskToReadyList+0xc0>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d00e      	beq.n	800af58 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800af3a:	4b0a      	ldr	r3, [pc, #40]	; (800af64 <prvAddNewTaskToReadyList+0xbc>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af44:	429a      	cmp	r2, r3
 800af46:	d207      	bcs.n	800af58 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800af48:	4b0b      	ldr	r3, [pc, #44]	; (800af78 <prvAddNewTaskToReadyList+0xd0>)
 800af4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af4e:	601a      	str	r2, [r3, #0]
 800af50:	f3bf 8f4f 	dsb	sy
 800af54:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af58:	bf00      	nop
 800af5a:	3708      	adds	r7, #8
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}
 800af60:	20000688 	.word	0x20000688
 800af64:	20000588 	.word	0x20000588
 800af68:	20000694 	.word	0x20000694
 800af6c:	200006a4 	.word	0x200006a4
 800af70:	20000690 	.word	0x20000690
 800af74:	2000058c 	.word	0x2000058c
 800af78:	e000ed04 	.word	0xe000ed04

0800af7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b084      	sub	sp, #16
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800af84:	2300      	movs	r3, #0
 800af86:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d017      	beq.n	800afbe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800af8e:	4b13      	ldr	r3, [pc, #76]	; (800afdc <vTaskDelay+0x60>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d00a      	beq.n	800afac <vTaskDelay+0x30>
	__asm volatile
 800af96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af9a:	f383 8811 	msr	BASEPRI, r3
 800af9e:	f3bf 8f6f 	isb	sy
 800afa2:	f3bf 8f4f 	dsb	sy
 800afa6:	60bb      	str	r3, [r7, #8]
}
 800afa8:	bf00      	nop
 800afaa:	e7fe      	b.n	800afaa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800afac:	f000 f884 	bl	800b0b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800afb0:	2100      	movs	r1, #0
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f000 fef6 	bl	800bda4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800afb8:	f000 f88c 	bl	800b0d4 <xTaskResumeAll>
 800afbc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d107      	bne.n	800afd4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800afc4:	4b06      	ldr	r3, [pc, #24]	; (800afe0 <vTaskDelay+0x64>)
 800afc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afca:	601a      	str	r2, [r3, #0]
 800afcc:	f3bf 8f4f 	dsb	sy
 800afd0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800afd4:	bf00      	nop
 800afd6:	3710      	adds	r7, #16
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}
 800afdc:	200006b0 	.word	0x200006b0
 800afe0:	e000ed04 	.word	0xe000ed04

0800afe4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b08a      	sub	sp, #40	; 0x28
 800afe8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800afea:	2300      	movs	r3, #0
 800afec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800afee:	2300      	movs	r3, #0
 800aff0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800aff2:	463a      	mov	r2, r7
 800aff4:	1d39      	adds	r1, r7, #4
 800aff6:	f107 0308 	add.w	r3, r7, #8
 800affa:	4618      	mov	r0, r3
 800affc:	f7f5 fc5c 	bl	80008b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b000:	6839      	ldr	r1, [r7, #0]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	68ba      	ldr	r2, [r7, #8]
 800b006:	9202      	str	r2, [sp, #8]
 800b008:	9301      	str	r3, [sp, #4]
 800b00a:	2300      	movs	r3, #0
 800b00c:	9300      	str	r3, [sp, #0]
 800b00e:	2300      	movs	r3, #0
 800b010:	460a      	mov	r2, r1
 800b012:	4921      	ldr	r1, [pc, #132]	; (800b098 <vTaskStartScheduler+0xb4>)
 800b014:	4821      	ldr	r0, [pc, #132]	; (800b09c <vTaskStartScheduler+0xb8>)
 800b016:	f7ff fdfb 	bl	800ac10 <xTaskCreateStatic>
 800b01a:	4603      	mov	r3, r0
 800b01c:	4a20      	ldr	r2, [pc, #128]	; (800b0a0 <vTaskStartScheduler+0xbc>)
 800b01e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b020:	4b1f      	ldr	r3, [pc, #124]	; (800b0a0 <vTaskStartScheduler+0xbc>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d002      	beq.n	800b02e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b028:	2301      	movs	r3, #1
 800b02a:	617b      	str	r3, [r7, #20]
 800b02c:	e001      	b.n	800b032 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b02e:	2300      	movs	r3, #0
 800b030:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	2b01      	cmp	r3, #1
 800b036:	d11b      	bne.n	800b070 <vTaskStartScheduler+0x8c>
	__asm volatile
 800b038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b03c:	f383 8811 	msr	BASEPRI, r3
 800b040:	f3bf 8f6f 	isb	sy
 800b044:	f3bf 8f4f 	dsb	sy
 800b048:	613b      	str	r3, [r7, #16]
}
 800b04a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b04c:	4b15      	ldr	r3, [pc, #84]	; (800b0a4 <vTaskStartScheduler+0xc0>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	3350      	adds	r3, #80	; 0x50
 800b052:	4a15      	ldr	r2, [pc, #84]	; (800b0a8 <vTaskStartScheduler+0xc4>)
 800b054:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b056:	4b15      	ldr	r3, [pc, #84]	; (800b0ac <vTaskStartScheduler+0xc8>)
 800b058:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b05c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b05e:	4b14      	ldr	r3, [pc, #80]	; (800b0b0 <vTaskStartScheduler+0xcc>)
 800b060:	2201      	movs	r2, #1
 800b062:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b064:	4b13      	ldr	r3, [pc, #76]	; (800b0b4 <vTaskStartScheduler+0xd0>)
 800b066:	2200      	movs	r2, #0
 800b068:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b06a:	f000 ff89 	bl	800bf80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b06e:	e00e      	b.n	800b08e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b076:	d10a      	bne.n	800b08e <vTaskStartScheduler+0xaa>
	__asm volatile
 800b078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b07c:	f383 8811 	msr	BASEPRI, r3
 800b080:	f3bf 8f6f 	isb	sy
 800b084:	f3bf 8f4f 	dsb	sy
 800b088:	60fb      	str	r3, [r7, #12]
}
 800b08a:	bf00      	nop
 800b08c:	e7fe      	b.n	800b08c <vTaskStartScheduler+0xa8>
}
 800b08e:	bf00      	nop
 800b090:	3718      	adds	r7, #24
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}
 800b096:	bf00      	nop
 800b098:	0800de1c 	.word	0x0800de1c
 800b09c:	0800b6a1 	.word	0x0800b6a1
 800b0a0:	200006ac 	.word	0x200006ac
 800b0a4:	20000588 	.word	0x20000588
 800b0a8:	20000088 	.word	0x20000088
 800b0ac:	200006a8 	.word	0x200006a8
 800b0b0:	20000694 	.word	0x20000694
 800b0b4:	2000068c 	.word	0x2000068c

0800b0b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b0bc:	4b04      	ldr	r3, [pc, #16]	; (800b0d0 <vTaskSuspendAll+0x18>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	3301      	adds	r3, #1
 800b0c2:	4a03      	ldr	r2, [pc, #12]	; (800b0d0 <vTaskSuspendAll+0x18>)
 800b0c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b0c6:	bf00      	nop
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ce:	4770      	bx	lr
 800b0d0:	200006b0 	.word	0x200006b0

0800b0d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b084      	sub	sp, #16
 800b0d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b0e2:	4b41      	ldr	r3, [pc, #260]	; (800b1e8 <xTaskResumeAll+0x114>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d10a      	bne.n	800b100 <xTaskResumeAll+0x2c>
	__asm volatile
 800b0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ee:	f383 8811 	msr	BASEPRI, r3
 800b0f2:	f3bf 8f6f 	isb	sy
 800b0f6:	f3bf 8f4f 	dsb	sy
 800b0fa:	603b      	str	r3, [r7, #0]
}
 800b0fc:	bf00      	nop
 800b0fe:	e7fe      	b.n	800b0fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b100:	f000 ffe0 	bl	800c0c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b104:	4b38      	ldr	r3, [pc, #224]	; (800b1e8 <xTaskResumeAll+0x114>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	3b01      	subs	r3, #1
 800b10a:	4a37      	ldr	r2, [pc, #220]	; (800b1e8 <xTaskResumeAll+0x114>)
 800b10c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b10e:	4b36      	ldr	r3, [pc, #216]	; (800b1e8 <xTaskResumeAll+0x114>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d161      	bne.n	800b1da <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b116:	4b35      	ldr	r3, [pc, #212]	; (800b1ec <xTaskResumeAll+0x118>)
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d05d      	beq.n	800b1da <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b11e:	e02e      	b.n	800b17e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b120:	4b33      	ldr	r3, [pc, #204]	; (800b1f0 <xTaskResumeAll+0x11c>)
 800b122:	68db      	ldr	r3, [r3, #12]
 800b124:	68db      	ldr	r3, [r3, #12]
 800b126:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	3318      	adds	r3, #24
 800b12c:	4618      	mov	r0, r3
 800b12e:	f7ff f801 	bl	800a134 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	3304      	adds	r3, #4
 800b136:	4618      	mov	r0, r3
 800b138:	f7fe fffc 	bl	800a134 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b140:	2201      	movs	r2, #1
 800b142:	409a      	lsls	r2, r3
 800b144:	4b2b      	ldr	r3, [pc, #172]	; (800b1f4 <xTaskResumeAll+0x120>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	4313      	orrs	r3, r2
 800b14a:	4a2a      	ldr	r2, [pc, #168]	; (800b1f4 <xTaskResumeAll+0x120>)
 800b14c:	6013      	str	r3, [r2, #0]
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b152:	4613      	mov	r3, r2
 800b154:	009b      	lsls	r3, r3, #2
 800b156:	4413      	add	r3, r2
 800b158:	009b      	lsls	r3, r3, #2
 800b15a:	4a27      	ldr	r2, [pc, #156]	; (800b1f8 <xTaskResumeAll+0x124>)
 800b15c:	441a      	add	r2, r3
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	3304      	adds	r3, #4
 800b162:	4619      	mov	r1, r3
 800b164:	4610      	mov	r0, r2
 800b166:	f7fe ff88 	bl	800a07a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b16e:	4b23      	ldr	r3, [pc, #140]	; (800b1fc <xTaskResumeAll+0x128>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b174:	429a      	cmp	r2, r3
 800b176:	d302      	bcc.n	800b17e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b178:	4b21      	ldr	r3, [pc, #132]	; (800b200 <xTaskResumeAll+0x12c>)
 800b17a:	2201      	movs	r2, #1
 800b17c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b17e:	4b1c      	ldr	r3, [pc, #112]	; (800b1f0 <xTaskResumeAll+0x11c>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d1cc      	bne.n	800b120 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d001      	beq.n	800b190 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b18c:	f000 fb44 	bl	800b818 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b190:	4b1c      	ldr	r3, [pc, #112]	; (800b204 <xTaskResumeAll+0x130>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d010      	beq.n	800b1be <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b19c:	f000 f836 	bl	800b20c <xTaskIncrementTick>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d002      	beq.n	800b1ac <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b1a6:	4b16      	ldr	r3, [pc, #88]	; (800b200 <xTaskResumeAll+0x12c>)
 800b1a8:	2201      	movs	r2, #1
 800b1aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	3b01      	subs	r3, #1
 800b1b0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d1f1      	bne.n	800b19c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800b1b8:	4b12      	ldr	r3, [pc, #72]	; (800b204 <xTaskResumeAll+0x130>)
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b1be:	4b10      	ldr	r3, [pc, #64]	; (800b200 <xTaskResumeAll+0x12c>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d009      	beq.n	800b1da <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b1ca:	4b0f      	ldr	r3, [pc, #60]	; (800b208 <xTaskResumeAll+0x134>)
 800b1cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1d0:	601a      	str	r2, [r3, #0]
 800b1d2:	f3bf 8f4f 	dsb	sy
 800b1d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b1da:	f000 ffa3 	bl	800c124 <vPortExitCritical>

	return xAlreadyYielded;
 800b1de:	68bb      	ldr	r3, [r7, #8]
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	3710      	adds	r7, #16
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}
 800b1e8:	200006b0 	.word	0x200006b0
 800b1ec:	20000688 	.word	0x20000688
 800b1f0:	20000648 	.word	0x20000648
 800b1f4:	20000690 	.word	0x20000690
 800b1f8:	2000058c 	.word	0x2000058c
 800b1fc:	20000588 	.word	0x20000588
 800b200:	2000069c 	.word	0x2000069c
 800b204:	20000698 	.word	0x20000698
 800b208:	e000ed04 	.word	0xe000ed04

0800b20c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b086      	sub	sp, #24
 800b210:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b212:	2300      	movs	r3, #0
 800b214:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b216:	4b4e      	ldr	r3, [pc, #312]	; (800b350 <xTaskIncrementTick+0x144>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	f040 808e 	bne.w	800b33c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b220:	4b4c      	ldr	r3, [pc, #304]	; (800b354 <xTaskIncrementTick+0x148>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	3301      	adds	r3, #1
 800b226:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b228:	4a4a      	ldr	r2, [pc, #296]	; (800b354 <xTaskIncrementTick+0x148>)
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d120      	bne.n	800b276 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b234:	4b48      	ldr	r3, [pc, #288]	; (800b358 <xTaskIncrementTick+0x14c>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d00a      	beq.n	800b254 <xTaskIncrementTick+0x48>
	__asm volatile
 800b23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b242:	f383 8811 	msr	BASEPRI, r3
 800b246:	f3bf 8f6f 	isb	sy
 800b24a:	f3bf 8f4f 	dsb	sy
 800b24e:	603b      	str	r3, [r7, #0]
}
 800b250:	bf00      	nop
 800b252:	e7fe      	b.n	800b252 <xTaskIncrementTick+0x46>
 800b254:	4b40      	ldr	r3, [pc, #256]	; (800b358 <xTaskIncrementTick+0x14c>)
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	60fb      	str	r3, [r7, #12]
 800b25a:	4b40      	ldr	r3, [pc, #256]	; (800b35c <xTaskIncrementTick+0x150>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	4a3e      	ldr	r2, [pc, #248]	; (800b358 <xTaskIncrementTick+0x14c>)
 800b260:	6013      	str	r3, [r2, #0]
 800b262:	4a3e      	ldr	r2, [pc, #248]	; (800b35c <xTaskIncrementTick+0x150>)
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	6013      	str	r3, [r2, #0]
 800b268:	4b3d      	ldr	r3, [pc, #244]	; (800b360 <xTaskIncrementTick+0x154>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	3301      	adds	r3, #1
 800b26e:	4a3c      	ldr	r2, [pc, #240]	; (800b360 <xTaskIncrementTick+0x154>)
 800b270:	6013      	str	r3, [r2, #0]
 800b272:	f000 fad1 	bl	800b818 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b276:	4b3b      	ldr	r3, [pc, #236]	; (800b364 <xTaskIncrementTick+0x158>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	693a      	ldr	r2, [r7, #16]
 800b27c:	429a      	cmp	r2, r3
 800b27e:	d348      	bcc.n	800b312 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b280:	4b35      	ldr	r3, [pc, #212]	; (800b358 <xTaskIncrementTick+0x14c>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d104      	bne.n	800b294 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b28a:	4b36      	ldr	r3, [pc, #216]	; (800b364 <xTaskIncrementTick+0x158>)
 800b28c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b290:	601a      	str	r2, [r3, #0]
					break;
 800b292:	e03e      	b.n	800b312 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b294:	4b30      	ldr	r3, [pc, #192]	; (800b358 <xTaskIncrementTick+0x14c>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	68db      	ldr	r3, [r3, #12]
 800b29a:	68db      	ldr	r3, [r3, #12]
 800b29c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	685b      	ldr	r3, [r3, #4]
 800b2a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b2a4:	693a      	ldr	r2, [r7, #16]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	429a      	cmp	r2, r3
 800b2aa:	d203      	bcs.n	800b2b4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b2ac:	4a2d      	ldr	r2, [pc, #180]	; (800b364 <xTaskIncrementTick+0x158>)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b2b2:	e02e      	b.n	800b312 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	3304      	adds	r3, #4
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f7fe ff3b 	bl	800a134 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d004      	beq.n	800b2d0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	3318      	adds	r3, #24
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f7fe ff32 	bl	800a134 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2d4:	2201      	movs	r2, #1
 800b2d6:	409a      	lsls	r2, r3
 800b2d8:	4b23      	ldr	r3, [pc, #140]	; (800b368 <xTaskIncrementTick+0x15c>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	4313      	orrs	r3, r2
 800b2de:	4a22      	ldr	r2, [pc, #136]	; (800b368 <xTaskIncrementTick+0x15c>)
 800b2e0:	6013      	str	r3, [r2, #0]
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2e6:	4613      	mov	r3, r2
 800b2e8:	009b      	lsls	r3, r3, #2
 800b2ea:	4413      	add	r3, r2
 800b2ec:	009b      	lsls	r3, r3, #2
 800b2ee:	4a1f      	ldr	r2, [pc, #124]	; (800b36c <xTaskIncrementTick+0x160>)
 800b2f0:	441a      	add	r2, r3
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	3304      	adds	r3, #4
 800b2f6:	4619      	mov	r1, r3
 800b2f8:	4610      	mov	r0, r2
 800b2fa:	f7fe febe 	bl	800a07a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b302:	4b1b      	ldr	r3, [pc, #108]	; (800b370 <xTaskIncrementTick+0x164>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b308:	429a      	cmp	r2, r3
 800b30a:	d3b9      	bcc.n	800b280 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b30c:	2301      	movs	r3, #1
 800b30e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b310:	e7b6      	b.n	800b280 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b312:	4b17      	ldr	r3, [pc, #92]	; (800b370 <xTaskIncrementTick+0x164>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b318:	4914      	ldr	r1, [pc, #80]	; (800b36c <xTaskIncrementTick+0x160>)
 800b31a:	4613      	mov	r3, r2
 800b31c:	009b      	lsls	r3, r3, #2
 800b31e:	4413      	add	r3, r2
 800b320:	009b      	lsls	r3, r3, #2
 800b322:	440b      	add	r3, r1
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	2b01      	cmp	r3, #1
 800b328:	d901      	bls.n	800b32e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800b32a:	2301      	movs	r3, #1
 800b32c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b32e:	4b11      	ldr	r3, [pc, #68]	; (800b374 <xTaskIncrementTick+0x168>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d007      	beq.n	800b346 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b336:	2301      	movs	r3, #1
 800b338:	617b      	str	r3, [r7, #20]
 800b33a:	e004      	b.n	800b346 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b33c:	4b0e      	ldr	r3, [pc, #56]	; (800b378 <xTaskIncrementTick+0x16c>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	3301      	adds	r3, #1
 800b342:	4a0d      	ldr	r2, [pc, #52]	; (800b378 <xTaskIncrementTick+0x16c>)
 800b344:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b346:	697b      	ldr	r3, [r7, #20]
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3718      	adds	r7, #24
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}
 800b350:	200006b0 	.word	0x200006b0
 800b354:	2000068c 	.word	0x2000068c
 800b358:	20000640 	.word	0x20000640
 800b35c:	20000644 	.word	0x20000644
 800b360:	200006a0 	.word	0x200006a0
 800b364:	200006a8 	.word	0x200006a8
 800b368:	20000690 	.word	0x20000690
 800b36c:	2000058c 	.word	0x2000058c
 800b370:	20000588 	.word	0x20000588
 800b374:	2000069c 	.word	0x2000069c
 800b378:	20000698 	.word	0x20000698

0800b37c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b088      	sub	sp, #32
 800b380:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b382:	4b3c      	ldr	r3, [pc, #240]	; (800b474 <vTaskSwitchContext+0xf8>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d003      	beq.n	800b392 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b38a:	4b3b      	ldr	r3, [pc, #236]	; (800b478 <vTaskSwitchContext+0xfc>)
 800b38c:	2201      	movs	r2, #1
 800b38e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b390:	e06b      	b.n	800b46a <vTaskSwitchContext+0xee>
		xYieldPending = pdFALSE;
 800b392:	4b39      	ldr	r3, [pc, #228]	; (800b478 <vTaskSwitchContext+0xfc>)
 800b394:	2200      	movs	r2, #0
 800b396:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800b398:	4b38      	ldr	r3, [pc, #224]	; (800b47c <vTaskSwitchContext+0x100>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b39e:	61fb      	str	r3, [r7, #28]
 800b3a0:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800b3a4:	61bb      	str	r3, [r7, #24]
 800b3a6:	69fb      	ldr	r3, [r7, #28]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	69ba      	ldr	r2, [r7, #24]
 800b3ac:	429a      	cmp	r2, r3
 800b3ae:	d111      	bne.n	800b3d4 <vTaskSwitchContext+0x58>
 800b3b0:	69fb      	ldr	r3, [r7, #28]
 800b3b2:	3304      	adds	r3, #4
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	69ba      	ldr	r2, [r7, #24]
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	d10b      	bne.n	800b3d4 <vTaskSwitchContext+0x58>
 800b3bc:	69fb      	ldr	r3, [r7, #28]
 800b3be:	3308      	adds	r3, #8
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	69ba      	ldr	r2, [r7, #24]
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	d105      	bne.n	800b3d4 <vTaskSwitchContext+0x58>
 800b3c8:	69fb      	ldr	r3, [r7, #28]
 800b3ca:	330c      	adds	r3, #12
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	69ba      	ldr	r2, [r7, #24]
 800b3d0:	429a      	cmp	r2, r3
 800b3d2:	d008      	beq.n	800b3e6 <vTaskSwitchContext+0x6a>
 800b3d4:	4b29      	ldr	r3, [pc, #164]	; (800b47c <vTaskSwitchContext+0x100>)
 800b3d6:	681a      	ldr	r2, [r3, #0]
 800b3d8:	4b28      	ldr	r3, [pc, #160]	; (800b47c <vTaskSwitchContext+0x100>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	3334      	adds	r3, #52	; 0x34
 800b3de:	4619      	mov	r1, r3
 800b3e0:	4610      	mov	r0, r2
 800b3e2:	f7f5 fa56 	bl	8000892 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3e6:	4b26      	ldr	r3, [pc, #152]	; (800b480 <vTaskSwitchContext+0x104>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	fab3 f383 	clz	r3, r3
 800b3f2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b3f4:	7afb      	ldrb	r3, [r7, #11]
 800b3f6:	f1c3 031f 	rsb	r3, r3, #31
 800b3fa:	617b      	str	r3, [r7, #20]
 800b3fc:	4921      	ldr	r1, [pc, #132]	; (800b484 <vTaskSwitchContext+0x108>)
 800b3fe:	697a      	ldr	r2, [r7, #20]
 800b400:	4613      	mov	r3, r2
 800b402:	009b      	lsls	r3, r3, #2
 800b404:	4413      	add	r3, r2
 800b406:	009b      	lsls	r3, r3, #2
 800b408:	440b      	add	r3, r1
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d10a      	bne.n	800b426 <vTaskSwitchContext+0xaa>
	__asm volatile
 800b410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b414:	f383 8811 	msr	BASEPRI, r3
 800b418:	f3bf 8f6f 	isb	sy
 800b41c:	f3bf 8f4f 	dsb	sy
 800b420:	607b      	str	r3, [r7, #4]
}
 800b422:	bf00      	nop
 800b424:	e7fe      	b.n	800b424 <vTaskSwitchContext+0xa8>
 800b426:	697a      	ldr	r2, [r7, #20]
 800b428:	4613      	mov	r3, r2
 800b42a:	009b      	lsls	r3, r3, #2
 800b42c:	4413      	add	r3, r2
 800b42e:	009b      	lsls	r3, r3, #2
 800b430:	4a14      	ldr	r2, [pc, #80]	; (800b484 <vTaskSwitchContext+0x108>)
 800b432:	4413      	add	r3, r2
 800b434:	613b      	str	r3, [r7, #16]
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	685b      	ldr	r3, [r3, #4]
 800b43a:	685a      	ldr	r2, [r3, #4]
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	605a      	str	r2, [r3, #4]
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	685a      	ldr	r2, [r3, #4]
 800b444:	693b      	ldr	r3, [r7, #16]
 800b446:	3308      	adds	r3, #8
 800b448:	429a      	cmp	r2, r3
 800b44a:	d104      	bne.n	800b456 <vTaskSwitchContext+0xda>
 800b44c:	693b      	ldr	r3, [r7, #16]
 800b44e:	685b      	ldr	r3, [r3, #4]
 800b450:	685a      	ldr	r2, [r3, #4]
 800b452:	693b      	ldr	r3, [r7, #16]
 800b454:	605a      	str	r2, [r3, #4]
 800b456:	693b      	ldr	r3, [r7, #16]
 800b458:	685b      	ldr	r3, [r3, #4]
 800b45a:	68db      	ldr	r3, [r3, #12]
 800b45c:	4a07      	ldr	r2, [pc, #28]	; (800b47c <vTaskSwitchContext+0x100>)
 800b45e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b460:	4b06      	ldr	r3, [pc, #24]	; (800b47c <vTaskSwitchContext+0x100>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	3350      	adds	r3, #80	; 0x50
 800b466:	4a08      	ldr	r2, [pc, #32]	; (800b488 <vTaskSwitchContext+0x10c>)
 800b468:	6013      	str	r3, [r2, #0]
}
 800b46a:	bf00      	nop
 800b46c:	3720      	adds	r7, #32
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}
 800b472:	bf00      	nop
 800b474:	200006b0 	.word	0x200006b0
 800b478:	2000069c 	.word	0x2000069c
 800b47c:	20000588 	.word	0x20000588
 800b480:	20000690 	.word	0x20000690
 800b484:	2000058c 	.word	0x2000058c
 800b488:	20000088 	.word	0x20000088

0800b48c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b084      	sub	sp, #16
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d10a      	bne.n	800b4b2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a0:	f383 8811 	msr	BASEPRI, r3
 800b4a4:	f3bf 8f6f 	isb	sy
 800b4a8:	f3bf 8f4f 	dsb	sy
 800b4ac:	60fb      	str	r3, [r7, #12]
}
 800b4ae:	bf00      	nop
 800b4b0:	e7fe      	b.n	800b4b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b4b2:	4b07      	ldr	r3, [pc, #28]	; (800b4d0 <vTaskPlaceOnEventList+0x44>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	3318      	adds	r3, #24
 800b4b8:	4619      	mov	r1, r3
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f7fe fe01 	bl	800a0c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b4c0:	2101      	movs	r1, #1
 800b4c2:	6838      	ldr	r0, [r7, #0]
 800b4c4:	f000 fc6e 	bl	800bda4 <prvAddCurrentTaskToDelayedList>
}
 800b4c8:	bf00      	nop
 800b4ca:	3710      	adds	r7, #16
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}
 800b4d0:	20000588 	.word	0x20000588

0800b4d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b086      	sub	sp, #24
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	68db      	ldr	r3, [r3, #12]
 800b4e0:	68db      	ldr	r3, [r3, #12]
 800b4e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b4e4:	693b      	ldr	r3, [r7, #16]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d10a      	bne.n	800b500 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ee:	f383 8811 	msr	BASEPRI, r3
 800b4f2:	f3bf 8f6f 	isb	sy
 800b4f6:	f3bf 8f4f 	dsb	sy
 800b4fa:	60fb      	str	r3, [r7, #12]
}
 800b4fc:	bf00      	nop
 800b4fe:	e7fe      	b.n	800b4fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b500:	693b      	ldr	r3, [r7, #16]
 800b502:	3318      	adds	r3, #24
 800b504:	4618      	mov	r0, r3
 800b506:	f7fe fe15 	bl	800a134 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b50a:	4b1d      	ldr	r3, [pc, #116]	; (800b580 <xTaskRemoveFromEventList+0xac>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d11c      	bne.n	800b54c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	3304      	adds	r3, #4
 800b516:	4618      	mov	r0, r3
 800b518:	f7fe fe0c 	bl	800a134 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b520:	2201      	movs	r2, #1
 800b522:	409a      	lsls	r2, r3
 800b524:	4b17      	ldr	r3, [pc, #92]	; (800b584 <xTaskRemoveFromEventList+0xb0>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	4313      	orrs	r3, r2
 800b52a:	4a16      	ldr	r2, [pc, #88]	; (800b584 <xTaskRemoveFromEventList+0xb0>)
 800b52c:	6013      	str	r3, [r2, #0]
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b532:	4613      	mov	r3, r2
 800b534:	009b      	lsls	r3, r3, #2
 800b536:	4413      	add	r3, r2
 800b538:	009b      	lsls	r3, r3, #2
 800b53a:	4a13      	ldr	r2, [pc, #76]	; (800b588 <xTaskRemoveFromEventList+0xb4>)
 800b53c:	441a      	add	r2, r3
 800b53e:	693b      	ldr	r3, [r7, #16]
 800b540:	3304      	adds	r3, #4
 800b542:	4619      	mov	r1, r3
 800b544:	4610      	mov	r0, r2
 800b546:	f7fe fd98 	bl	800a07a <vListInsertEnd>
 800b54a:	e005      	b.n	800b558 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	3318      	adds	r3, #24
 800b550:	4619      	mov	r1, r3
 800b552:	480e      	ldr	r0, [pc, #56]	; (800b58c <xTaskRemoveFromEventList+0xb8>)
 800b554:	f7fe fd91 	bl	800a07a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b55c:	4b0c      	ldr	r3, [pc, #48]	; (800b590 <xTaskRemoveFromEventList+0xbc>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b562:	429a      	cmp	r2, r3
 800b564:	d905      	bls.n	800b572 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b566:	2301      	movs	r3, #1
 800b568:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b56a:	4b0a      	ldr	r3, [pc, #40]	; (800b594 <xTaskRemoveFromEventList+0xc0>)
 800b56c:	2201      	movs	r2, #1
 800b56e:	601a      	str	r2, [r3, #0]
 800b570:	e001      	b.n	800b576 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800b572:	2300      	movs	r3, #0
 800b574:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b576:	697b      	ldr	r3, [r7, #20]
}
 800b578:	4618      	mov	r0, r3
 800b57a:	3718      	adds	r7, #24
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}
 800b580:	200006b0 	.word	0x200006b0
 800b584:	20000690 	.word	0x20000690
 800b588:	2000058c 	.word	0x2000058c
 800b58c:	20000648 	.word	0x20000648
 800b590:	20000588 	.word	0x20000588
 800b594:	2000069c 	.word	0x2000069c

0800b598 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b598:	b480      	push	{r7}
 800b59a:	b083      	sub	sp, #12
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b5a0:	4b06      	ldr	r3, [pc, #24]	; (800b5bc <vTaskInternalSetTimeOutState+0x24>)
 800b5a2:	681a      	ldr	r2, [r3, #0]
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b5a8:	4b05      	ldr	r3, [pc, #20]	; (800b5c0 <vTaskInternalSetTimeOutState+0x28>)
 800b5aa:	681a      	ldr	r2, [r3, #0]
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	605a      	str	r2, [r3, #4]
}
 800b5b0:	bf00      	nop
 800b5b2:	370c      	adds	r7, #12
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ba:	4770      	bx	lr
 800b5bc:	200006a0 	.word	0x200006a0
 800b5c0:	2000068c 	.word	0x2000068c

0800b5c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b088      	sub	sp, #32
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
 800b5cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d10a      	bne.n	800b5ea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b5d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d8:	f383 8811 	msr	BASEPRI, r3
 800b5dc:	f3bf 8f6f 	isb	sy
 800b5e0:	f3bf 8f4f 	dsb	sy
 800b5e4:	613b      	str	r3, [r7, #16]
}
 800b5e6:	bf00      	nop
 800b5e8:	e7fe      	b.n	800b5e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d10a      	bne.n	800b606 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f4:	f383 8811 	msr	BASEPRI, r3
 800b5f8:	f3bf 8f6f 	isb	sy
 800b5fc:	f3bf 8f4f 	dsb	sy
 800b600:	60fb      	str	r3, [r7, #12]
}
 800b602:	bf00      	nop
 800b604:	e7fe      	b.n	800b604 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b606:	f000 fd5d 	bl	800c0c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b60a:	4b1d      	ldr	r3, [pc, #116]	; (800b680 <xTaskCheckForTimeOut+0xbc>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	685b      	ldr	r3, [r3, #4]
 800b614:	69ba      	ldr	r2, [r7, #24]
 800b616:	1ad3      	subs	r3, r2, r3
 800b618:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b622:	d102      	bne.n	800b62a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b624:	2300      	movs	r3, #0
 800b626:	61fb      	str	r3, [r7, #28]
 800b628:	e023      	b.n	800b672 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681a      	ldr	r2, [r3, #0]
 800b62e:	4b15      	ldr	r3, [pc, #84]	; (800b684 <xTaskCheckForTimeOut+0xc0>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	429a      	cmp	r2, r3
 800b634:	d007      	beq.n	800b646 <xTaskCheckForTimeOut+0x82>
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	685b      	ldr	r3, [r3, #4]
 800b63a:	69ba      	ldr	r2, [r7, #24]
 800b63c:	429a      	cmp	r2, r3
 800b63e:	d302      	bcc.n	800b646 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b640:	2301      	movs	r3, #1
 800b642:	61fb      	str	r3, [r7, #28]
 800b644:	e015      	b.n	800b672 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	697a      	ldr	r2, [r7, #20]
 800b64c:	429a      	cmp	r2, r3
 800b64e:	d20b      	bcs.n	800b668 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	681a      	ldr	r2, [r3, #0]
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	1ad2      	subs	r2, r2, r3
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f7ff ff9b 	bl	800b598 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b662:	2300      	movs	r3, #0
 800b664:	61fb      	str	r3, [r7, #28]
 800b666:	e004      	b.n	800b672 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	2200      	movs	r2, #0
 800b66c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b66e:	2301      	movs	r3, #1
 800b670:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b672:	f000 fd57 	bl	800c124 <vPortExitCritical>

	return xReturn;
 800b676:	69fb      	ldr	r3, [r7, #28]
}
 800b678:	4618      	mov	r0, r3
 800b67a:	3720      	adds	r7, #32
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}
 800b680:	2000068c 	.word	0x2000068c
 800b684:	200006a0 	.word	0x200006a0

0800b688 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b688:	b480      	push	{r7}
 800b68a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b68c:	4b03      	ldr	r3, [pc, #12]	; (800b69c <vTaskMissedYield+0x14>)
 800b68e:	2201      	movs	r2, #1
 800b690:	601a      	str	r2, [r3, #0]
}
 800b692:	bf00      	nop
 800b694:	46bd      	mov	sp, r7
 800b696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69a:	4770      	bx	lr
 800b69c:	2000069c 	.word	0x2000069c

0800b6a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b082      	sub	sp, #8
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b6a8:	f000 f854 	bl	800b754 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b6ac:	4b07      	ldr	r3, [pc, #28]	; (800b6cc <prvIdleTask+0x2c>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	2b01      	cmp	r3, #1
 800b6b2:	d907      	bls.n	800b6c4 <prvIdleTask+0x24>
			{
				taskYIELD();
 800b6b4:	4b06      	ldr	r3, [pc, #24]	; (800b6d0 <prvIdleTask+0x30>)
 800b6b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6ba:	601a      	str	r2, [r3, #0]
 800b6bc:	f3bf 8f4f 	dsb	sy
 800b6c0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800b6c4:	f7f5 f8de 	bl	8000884 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800b6c8:	e7ee      	b.n	800b6a8 <prvIdleTask+0x8>
 800b6ca:	bf00      	nop
 800b6cc:	2000058c 	.word	0x2000058c
 800b6d0:	e000ed04 	.word	0xe000ed04

0800b6d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b082      	sub	sp, #8
 800b6d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b6da:	2300      	movs	r3, #0
 800b6dc:	607b      	str	r3, [r7, #4]
 800b6de:	e00c      	b.n	800b6fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b6e0:	687a      	ldr	r2, [r7, #4]
 800b6e2:	4613      	mov	r3, r2
 800b6e4:	009b      	lsls	r3, r3, #2
 800b6e6:	4413      	add	r3, r2
 800b6e8:	009b      	lsls	r3, r3, #2
 800b6ea:	4a12      	ldr	r2, [pc, #72]	; (800b734 <prvInitialiseTaskLists+0x60>)
 800b6ec:	4413      	add	r3, r2
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f7fe fc96 	bl	800a020 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	3301      	adds	r3, #1
 800b6f8:	607b      	str	r3, [r7, #4]
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2b06      	cmp	r3, #6
 800b6fe:	d9ef      	bls.n	800b6e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b700:	480d      	ldr	r0, [pc, #52]	; (800b738 <prvInitialiseTaskLists+0x64>)
 800b702:	f7fe fc8d 	bl	800a020 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b706:	480d      	ldr	r0, [pc, #52]	; (800b73c <prvInitialiseTaskLists+0x68>)
 800b708:	f7fe fc8a 	bl	800a020 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b70c:	480c      	ldr	r0, [pc, #48]	; (800b740 <prvInitialiseTaskLists+0x6c>)
 800b70e:	f7fe fc87 	bl	800a020 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b712:	480c      	ldr	r0, [pc, #48]	; (800b744 <prvInitialiseTaskLists+0x70>)
 800b714:	f7fe fc84 	bl	800a020 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b718:	480b      	ldr	r0, [pc, #44]	; (800b748 <prvInitialiseTaskLists+0x74>)
 800b71a:	f7fe fc81 	bl	800a020 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b71e:	4b0b      	ldr	r3, [pc, #44]	; (800b74c <prvInitialiseTaskLists+0x78>)
 800b720:	4a05      	ldr	r2, [pc, #20]	; (800b738 <prvInitialiseTaskLists+0x64>)
 800b722:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b724:	4b0a      	ldr	r3, [pc, #40]	; (800b750 <prvInitialiseTaskLists+0x7c>)
 800b726:	4a05      	ldr	r2, [pc, #20]	; (800b73c <prvInitialiseTaskLists+0x68>)
 800b728:	601a      	str	r2, [r3, #0]
}
 800b72a:	bf00      	nop
 800b72c:	3708      	adds	r7, #8
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}
 800b732:	bf00      	nop
 800b734:	2000058c 	.word	0x2000058c
 800b738:	20000618 	.word	0x20000618
 800b73c:	2000062c 	.word	0x2000062c
 800b740:	20000648 	.word	0x20000648
 800b744:	2000065c 	.word	0x2000065c
 800b748:	20000674 	.word	0x20000674
 800b74c:	20000640 	.word	0x20000640
 800b750:	20000644 	.word	0x20000644

0800b754 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b082      	sub	sp, #8
 800b758:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b75a:	e019      	b.n	800b790 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b75c:	f000 fcb2 	bl	800c0c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b760:	4b10      	ldr	r3, [pc, #64]	; (800b7a4 <prvCheckTasksWaitingTermination+0x50>)
 800b762:	68db      	ldr	r3, [r3, #12]
 800b764:	68db      	ldr	r3, [r3, #12]
 800b766:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	3304      	adds	r3, #4
 800b76c:	4618      	mov	r0, r3
 800b76e:	f7fe fce1 	bl	800a134 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b772:	4b0d      	ldr	r3, [pc, #52]	; (800b7a8 <prvCheckTasksWaitingTermination+0x54>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	3b01      	subs	r3, #1
 800b778:	4a0b      	ldr	r2, [pc, #44]	; (800b7a8 <prvCheckTasksWaitingTermination+0x54>)
 800b77a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b77c:	4b0b      	ldr	r3, [pc, #44]	; (800b7ac <prvCheckTasksWaitingTermination+0x58>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	3b01      	subs	r3, #1
 800b782:	4a0a      	ldr	r2, [pc, #40]	; (800b7ac <prvCheckTasksWaitingTermination+0x58>)
 800b784:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b786:	f000 fccd 	bl	800c124 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	f000 f810 	bl	800b7b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b790:	4b06      	ldr	r3, [pc, #24]	; (800b7ac <prvCheckTasksWaitingTermination+0x58>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d1e1      	bne.n	800b75c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b798:	bf00      	nop
 800b79a:	bf00      	nop
 800b79c:	3708      	adds	r7, #8
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}
 800b7a2:	bf00      	nop
 800b7a4:	2000065c 	.word	0x2000065c
 800b7a8:	20000688 	.word	0x20000688
 800b7ac:	20000670 	.word	0x20000670

0800b7b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b084      	sub	sp, #16
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	3350      	adds	r3, #80	; 0x50
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f001 fd75 	bl	800d2ac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d108      	bne.n	800b7de <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f000 fe69 	bl	800c4a8 <vPortFree>
				vPortFree( pxTCB );
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	f000 fe66 	bl	800c4a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b7dc:	e018      	b.n	800b810 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800b7e4:	2b01      	cmp	r3, #1
 800b7e6:	d103      	bne.n	800b7f0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f000 fe5d 	bl	800c4a8 <vPortFree>
	}
 800b7ee:	e00f      	b.n	800b810 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800b7f6:	2b02      	cmp	r3, #2
 800b7f8:	d00a      	beq.n	800b810 <prvDeleteTCB+0x60>
	__asm volatile
 800b7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7fe:	f383 8811 	msr	BASEPRI, r3
 800b802:	f3bf 8f6f 	isb	sy
 800b806:	f3bf 8f4f 	dsb	sy
 800b80a:	60fb      	str	r3, [r7, #12]
}
 800b80c:	bf00      	nop
 800b80e:	e7fe      	b.n	800b80e <prvDeleteTCB+0x5e>
	}
 800b810:	bf00      	nop
 800b812:	3710      	adds	r7, #16
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}

0800b818 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b818:	b480      	push	{r7}
 800b81a:	b083      	sub	sp, #12
 800b81c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b81e:	4b0c      	ldr	r3, [pc, #48]	; (800b850 <prvResetNextTaskUnblockTime+0x38>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d104      	bne.n	800b832 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b828:	4b0a      	ldr	r3, [pc, #40]	; (800b854 <prvResetNextTaskUnblockTime+0x3c>)
 800b82a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b82e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b830:	e008      	b.n	800b844 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b832:	4b07      	ldr	r3, [pc, #28]	; (800b850 <prvResetNextTaskUnblockTime+0x38>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	68db      	ldr	r3, [r3, #12]
 800b838:	68db      	ldr	r3, [r3, #12]
 800b83a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	685b      	ldr	r3, [r3, #4]
 800b840:	4a04      	ldr	r2, [pc, #16]	; (800b854 <prvResetNextTaskUnblockTime+0x3c>)
 800b842:	6013      	str	r3, [r2, #0]
}
 800b844:	bf00      	nop
 800b846:	370c      	adds	r7, #12
 800b848:	46bd      	mov	sp, r7
 800b84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84e:	4770      	bx	lr
 800b850:	20000640 	.word	0x20000640
 800b854:	200006a8 	.word	0x200006a8

0800b858 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b858:	b480      	push	{r7}
 800b85a:	b083      	sub	sp, #12
 800b85c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b85e:	4b0b      	ldr	r3, [pc, #44]	; (800b88c <xTaskGetSchedulerState+0x34>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d102      	bne.n	800b86c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b866:	2301      	movs	r3, #1
 800b868:	607b      	str	r3, [r7, #4]
 800b86a:	e008      	b.n	800b87e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b86c:	4b08      	ldr	r3, [pc, #32]	; (800b890 <xTaskGetSchedulerState+0x38>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d102      	bne.n	800b87a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b874:	2302      	movs	r3, #2
 800b876:	607b      	str	r3, [r7, #4]
 800b878:	e001      	b.n	800b87e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b87a:	2300      	movs	r3, #0
 800b87c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b87e:	687b      	ldr	r3, [r7, #4]
	}
 800b880:	4618      	mov	r0, r3
 800b882:	370c      	adds	r7, #12
 800b884:	46bd      	mov	sp, r7
 800b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88a:	4770      	bx	lr
 800b88c:	20000694 	.word	0x20000694
 800b890:	200006b0 	.word	0x200006b0

0800b894 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b894:	b580      	push	{r7, lr}
 800b896:	b086      	sub	sp, #24
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d06e      	beq.n	800b988 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b8aa:	4b3a      	ldr	r3, [pc, #232]	; (800b994 <xTaskPriorityDisinherit+0x100>)
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	693a      	ldr	r2, [r7, #16]
 800b8b0:	429a      	cmp	r2, r3
 800b8b2:	d00a      	beq.n	800b8ca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b8:	f383 8811 	msr	BASEPRI, r3
 800b8bc:	f3bf 8f6f 	isb	sy
 800b8c0:	f3bf 8f4f 	dsb	sy
 800b8c4:	60fb      	str	r3, [r7, #12]
}
 800b8c6:	bf00      	nop
 800b8c8:	e7fe      	b.n	800b8c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d10a      	bne.n	800b8e8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b8d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d6:	f383 8811 	msr	BASEPRI, r3
 800b8da:	f3bf 8f6f 	isb	sy
 800b8de:	f3bf 8f4f 	dsb	sy
 800b8e2:	60bb      	str	r3, [r7, #8]
}
 800b8e4:	bf00      	nop
 800b8e6:	e7fe      	b.n	800b8e6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8ec:	1e5a      	subs	r2, r3, #1
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8fa:	429a      	cmp	r2, r3
 800b8fc:	d044      	beq.n	800b988 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b8fe:	693b      	ldr	r3, [r7, #16]
 800b900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b902:	2b00      	cmp	r3, #0
 800b904:	d140      	bne.n	800b988 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	3304      	adds	r3, #4
 800b90a:	4618      	mov	r0, r3
 800b90c:	f7fe fc12 	bl	800a134 <uxListRemove>
 800b910:	4603      	mov	r3, r0
 800b912:	2b00      	cmp	r3, #0
 800b914:	d115      	bne.n	800b942 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b91a:	491f      	ldr	r1, [pc, #124]	; (800b998 <xTaskPriorityDisinherit+0x104>)
 800b91c:	4613      	mov	r3, r2
 800b91e:	009b      	lsls	r3, r3, #2
 800b920:	4413      	add	r3, r2
 800b922:	009b      	lsls	r3, r3, #2
 800b924:	440b      	add	r3, r1
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d10a      	bne.n	800b942 <xTaskPriorityDisinherit+0xae>
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b930:	2201      	movs	r2, #1
 800b932:	fa02 f303 	lsl.w	r3, r2, r3
 800b936:	43da      	mvns	r2, r3
 800b938:	4b18      	ldr	r3, [pc, #96]	; (800b99c <xTaskPriorityDisinherit+0x108>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	4013      	ands	r3, r2
 800b93e:	4a17      	ldr	r2, [pc, #92]	; (800b99c <xTaskPriorityDisinherit+0x108>)
 800b940:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b94e:	f1c3 0207 	rsb	r2, r3, #7
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b95a:	2201      	movs	r2, #1
 800b95c:	409a      	lsls	r2, r3
 800b95e:	4b0f      	ldr	r3, [pc, #60]	; (800b99c <xTaskPriorityDisinherit+0x108>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	4313      	orrs	r3, r2
 800b964:	4a0d      	ldr	r2, [pc, #52]	; (800b99c <xTaskPriorityDisinherit+0x108>)
 800b966:	6013      	str	r3, [r2, #0]
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b96c:	4613      	mov	r3, r2
 800b96e:	009b      	lsls	r3, r3, #2
 800b970:	4413      	add	r3, r2
 800b972:	009b      	lsls	r3, r3, #2
 800b974:	4a08      	ldr	r2, [pc, #32]	; (800b998 <xTaskPriorityDisinherit+0x104>)
 800b976:	441a      	add	r2, r3
 800b978:	693b      	ldr	r3, [r7, #16]
 800b97a:	3304      	adds	r3, #4
 800b97c:	4619      	mov	r1, r3
 800b97e:	4610      	mov	r0, r2
 800b980:	f7fe fb7b 	bl	800a07a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b984:	2301      	movs	r3, #1
 800b986:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b988:	697b      	ldr	r3, [r7, #20]
	}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3718      	adds	r7, #24
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}
 800b992:	bf00      	nop
 800b994:	20000588 	.word	0x20000588
 800b998:	2000058c 	.word	0x2000058c
 800b99c:	20000690 	.word	0x20000690

0800b9a0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b086      	sub	sp, #24
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	60f8      	str	r0, [r7, #12]
 800b9a8:	60b9      	str	r1, [r7, #8]
 800b9aa:	607a      	str	r2, [r7, #4]
 800b9ac:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800b9ae:	f000 fb89 	bl	800c0c4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b9b2:	4b29      	ldr	r3, [pc, #164]	; (800ba58 <xTaskNotifyWait+0xb8>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800b9ba:	b2db      	uxtb	r3, r3
 800b9bc:	2b02      	cmp	r3, #2
 800b9be:	d01c      	beq.n	800b9fa <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800b9c0:	4b25      	ldr	r3, [pc, #148]	; (800ba58 <xTaskNotifyWait+0xb8>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 800b9c8:	68fa      	ldr	r2, [r7, #12]
 800b9ca:	43d2      	mvns	r2, r2
 800b9cc:	400a      	ands	r2, r1
 800b9ce:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800b9d2:	4b21      	ldr	r3, [pc, #132]	; (800ba58 <xTaskNotifyWait+0xb8>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	2201      	movs	r2, #1
 800b9d8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

				if( xTicksToWait > ( TickType_t ) 0 )
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d00b      	beq.n	800b9fa <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b9e2:	2101      	movs	r1, #1
 800b9e4:	6838      	ldr	r0, [r7, #0]
 800b9e6:	f000 f9dd 	bl	800bda4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800b9ea:	4b1c      	ldr	r3, [pc, #112]	; (800ba5c <xTaskNotifyWait+0xbc>)
 800b9ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9f0:	601a      	str	r2, [r3, #0]
 800b9f2:	f3bf 8f4f 	dsb	sy
 800b9f6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b9fa:	f000 fb93 	bl	800c124 <vPortExitCritical>

		taskENTER_CRITICAL();
 800b9fe:	f000 fb61 	bl	800c0c4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d005      	beq.n	800ba14 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800ba08:	4b13      	ldr	r3, [pc, #76]	; (800ba58 <xTaskNotifyWait+0xb8>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ba14:	4b10      	ldr	r3, [pc, #64]	; (800ba58 <xTaskNotifyWait+0xb8>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800ba1c:	b2db      	uxtb	r3, r3
 800ba1e:	2b02      	cmp	r3, #2
 800ba20:	d002      	beq.n	800ba28 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800ba22:	2300      	movs	r3, #0
 800ba24:	617b      	str	r3, [r7, #20]
 800ba26:	e00a      	b.n	800ba3e <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800ba28:	4b0b      	ldr	r3, [pc, #44]	; (800ba58 <xTaskNotifyWait+0xb8>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 800ba30:	68ba      	ldr	r2, [r7, #8]
 800ba32:	43d2      	mvns	r2, r2
 800ba34:	400a      	ands	r2, r1
 800ba36:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
				xReturn = pdTRUE;
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ba3e:	4b06      	ldr	r3, [pc, #24]	; (800ba58 <xTaskNotifyWait+0xb8>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	2200      	movs	r2, #0
 800ba44:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
		}
		taskEXIT_CRITICAL();
 800ba48:	f000 fb6c 	bl	800c124 <vPortExitCritical>

		return xReturn;
 800ba4c:	697b      	ldr	r3, [r7, #20]
	}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3718      	adds	r7, #24
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}
 800ba56:	bf00      	nop
 800ba58:	20000588 	.word	0x20000588
 800ba5c:	e000ed04 	.word	0xe000ed04

0800ba60 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b08a      	sub	sp, #40	; 0x28
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	60f8      	str	r0, [r7, #12]
 800ba68:	60b9      	str	r1, [r7, #8]
 800ba6a:	603b      	str	r3, [r7, #0]
 800ba6c:	4613      	mov	r3, r2
 800ba6e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800ba70:	2301      	movs	r3, #1
 800ba72:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d10a      	bne.n	800ba90 <xTaskGenericNotify+0x30>
	__asm volatile
 800ba7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba7e:	f383 8811 	msr	BASEPRI, r3
 800ba82:	f3bf 8f6f 	isb	sy
 800ba86:	f3bf 8f4f 	dsb	sy
 800ba8a:	61bb      	str	r3, [r7, #24]
}
 800ba8c:	bf00      	nop
 800ba8e:	e7fe      	b.n	800ba8e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800ba94:	f000 fb16 	bl	800c0c4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d004      	beq.n	800baa8 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ba9e:	6a3b      	ldr	r3, [r7, #32]
 800baa0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800baa8:	6a3b      	ldr	r3, [r7, #32]
 800baaa:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800baae:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800bab0:	6a3b      	ldr	r3, [r7, #32]
 800bab2:	2202      	movs	r2, #2
 800bab4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

			switch( eAction )
 800bab8:	79fb      	ldrb	r3, [r7, #7]
 800baba:	2b04      	cmp	r3, #4
 800babc:	d82d      	bhi.n	800bb1a <xTaskGenericNotify+0xba>
 800babe:	a201      	add	r2, pc, #4	; (adr r2, 800bac4 <xTaskGenericNotify+0x64>)
 800bac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bac4:	0800bb3d 	.word	0x0800bb3d
 800bac8:	0800bad9 	.word	0x0800bad9
 800bacc:	0800baeb 	.word	0x0800baeb
 800bad0:	0800bafb 	.word	0x0800bafb
 800bad4:	0800bb05 	.word	0x0800bb05
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800bad8:	6a3b      	ldr	r3, [r7, #32]
 800bada:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	431a      	orrs	r2, r3
 800bae2:	6a3b      	ldr	r3, [r7, #32]
 800bae4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
					break;
 800bae8:	e02b      	b.n	800bb42 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800baea:	6a3b      	ldr	r3, [r7, #32]
 800baec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800baf0:	1c5a      	adds	r2, r3, #1
 800baf2:	6a3b      	ldr	r3, [r7, #32]
 800baf4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
					break;
 800baf8:	e023      	b.n	800bb42 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800bafa:	6a3b      	ldr	r3, [r7, #32]
 800bafc:	68ba      	ldr	r2, [r7, #8]
 800bafe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
					break;
 800bb02:	e01e      	b.n	800bb42 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800bb04:	7ffb      	ldrb	r3, [r7, #31]
 800bb06:	2b02      	cmp	r3, #2
 800bb08:	d004      	beq.n	800bb14 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800bb0a:	6a3b      	ldr	r3, [r7, #32]
 800bb0c:	68ba      	ldr	r2, [r7, #8]
 800bb0e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800bb12:	e016      	b.n	800bb42 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800bb14:	2300      	movs	r3, #0
 800bb16:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800bb18:	e013      	b.n	800bb42 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800bb1a:	6a3b      	ldr	r3, [r7, #32]
 800bb1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bb20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb24:	d00c      	beq.n	800bb40 <xTaskGenericNotify+0xe0>
	__asm volatile
 800bb26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb2a:	f383 8811 	msr	BASEPRI, r3
 800bb2e:	f3bf 8f6f 	isb	sy
 800bb32:	f3bf 8f4f 	dsb	sy
 800bb36:	617b      	str	r3, [r7, #20]
}
 800bb38:	bf00      	nop
 800bb3a:	e7fe      	b.n	800bb3a <xTaskGenericNotify+0xda>
					break;
 800bb3c:	bf00      	nop
 800bb3e:	e000      	b.n	800bb42 <xTaskGenericNotify+0xe2>

					break;
 800bb40:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800bb42:	7ffb      	ldrb	r3, [r7, #31]
 800bb44:	2b01      	cmp	r3, #1
 800bb46:	d139      	bne.n	800bbbc <xTaskGenericNotify+0x15c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb48:	6a3b      	ldr	r3, [r7, #32]
 800bb4a:	3304      	adds	r3, #4
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f7fe faf1 	bl	800a134 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800bb52:	6a3b      	ldr	r3, [r7, #32]
 800bb54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb56:	2201      	movs	r2, #1
 800bb58:	409a      	lsls	r2, r3
 800bb5a:	4b1c      	ldr	r3, [pc, #112]	; (800bbcc <xTaskGenericNotify+0x16c>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	4313      	orrs	r3, r2
 800bb60:	4a1a      	ldr	r2, [pc, #104]	; (800bbcc <xTaskGenericNotify+0x16c>)
 800bb62:	6013      	str	r3, [r2, #0]
 800bb64:	6a3b      	ldr	r3, [r7, #32]
 800bb66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb68:	4613      	mov	r3, r2
 800bb6a:	009b      	lsls	r3, r3, #2
 800bb6c:	4413      	add	r3, r2
 800bb6e:	009b      	lsls	r3, r3, #2
 800bb70:	4a17      	ldr	r2, [pc, #92]	; (800bbd0 <xTaskGenericNotify+0x170>)
 800bb72:	441a      	add	r2, r3
 800bb74:	6a3b      	ldr	r3, [r7, #32]
 800bb76:	3304      	adds	r3, #4
 800bb78:	4619      	mov	r1, r3
 800bb7a:	4610      	mov	r0, r2
 800bb7c:	f7fe fa7d 	bl	800a07a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800bb80:	6a3b      	ldr	r3, [r7, #32]
 800bb82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d00a      	beq.n	800bb9e <xTaskGenericNotify+0x13e>
	__asm volatile
 800bb88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb8c:	f383 8811 	msr	BASEPRI, r3
 800bb90:	f3bf 8f6f 	isb	sy
 800bb94:	f3bf 8f4f 	dsb	sy
 800bb98:	613b      	str	r3, [r7, #16]
}
 800bb9a:	bf00      	nop
 800bb9c:	e7fe      	b.n	800bb9c <xTaskGenericNotify+0x13c>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bb9e:	6a3b      	ldr	r3, [r7, #32]
 800bba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bba2:	4b0c      	ldr	r3, [pc, #48]	; (800bbd4 <xTaskGenericNotify+0x174>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d907      	bls.n	800bbbc <xTaskGenericNotify+0x15c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800bbac:	4b0a      	ldr	r3, [pc, #40]	; (800bbd8 <xTaskGenericNotify+0x178>)
 800bbae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbb2:	601a      	str	r2, [r3, #0]
 800bbb4:	f3bf 8f4f 	dsb	sy
 800bbb8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800bbbc:	f000 fab2 	bl	800c124 <vPortExitCritical>

		return xReturn;
 800bbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	3728      	adds	r7, #40	; 0x28
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}
 800bbca:	bf00      	nop
 800bbcc:	20000690 	.word	0x20000690
 800bbd0:	2000058c 	.word	0x2000058c
 800bbd4:	20000588 	.word	0x20000588
 800bbd8:	e000ed04 	.word	0xe000ed04

0800bbdc <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b08e      	sub	sp, #56	; 0x38
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	60f8      	str	r0, [r7, #12]
 800bbe4:	60b9      	str	r1, [r7, #8]
 800bbe6:	603b      	str	r3, [r7, #0]
 800bbe8:	4613      	mov	r3, r2
 800bbea:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800bbec:	2301      	movs	r3, #1
 800bbee:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d10a      	bne.n	800bc0c <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800bbf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbfa:	f383 8811 	msr	BASEPRI, r3
 800bbfe:	f3bf 8f6f 	isb	sy
 800bc02:	f3bf 8f4f 	dsb	sy
 800bc06:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bc08:	bf00      	nop
 800bc0a:	e7fe      	b.n	800bc0a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bc0c:	f000 fb3c 	bl	800c288 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800bc14:	f3ef 8211 	mrs	r2, BASEPRI
 800bc18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc1c:	f383 8811 	msr	BASEPRI, r3
 800bc20:	f3bf 8f6f 	isb	sy
 800bc24:	f3bf 8f4f 	dsb	sy
 800bc28:	623a      	str	r2, [r7, #32]
 800bc2a:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800bc2c:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bc2e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d004      	beq.n	800bc40 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800bc36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc38:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800bc40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc42:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800bc46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800bc4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc4c:	2202      	movs	r2, #2
 800bc4e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

			switch( eAction )
 800bc52:	79fb      	ldrb	r3, [r7, #7]
 800bc54:	2b04      	cmp	r3, #4
 800bc56:	d82f      	bhi.n	800bcb8 <xTaskGenericNotifyFromISR+0xdc>
 800bc58:	a201      	add	r2, pc, #4	; (adr r2, 800bc60 <xTaskGenericNotifyFromISR+0x84>)
 800bc5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc5e:	bf00      	nop
 800bc60:	0800bcdb 	.word	0x0800bcdb
 800bc64:	0800bc75 	.word	0x0800bc75
 800bc68:	0800bc87 	.word	0x0800bc87
 800bc6c:	0800bc97 	.word	0x0800bc97
 800bc70:	0800bca1 	.word	0x0800bca1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800bc74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc76:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	431a      	orrs	r2, r3
 800bc7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc80:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
					break;
 800bc84:	e02c      	b.n	800bce0 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800bc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bc8c:	1c5a      	adds	r2, r3, #1
 800bc8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc90:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
					break;
 800bc94:	e024      	b.n	800bce0 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800bc96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc98:	68ba      	ldr	r2, [r7, #8]
 800bc9a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
					break;
 800bc9e:	e01f      	b.n	800bce0 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800bca0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bca4:	2b02      	cmp	r3, #2
 800bca6:	d004      	beq.n	800bcb2 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800bca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcaa:	68ba      	ldr	r2, [r7, #8]
 800bcac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800bcb0:	e016      	b.n	800bce0 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800bcb6:	e013      	b.n	800bce0 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800bcb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bcbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bcc2:	d00c      	beq.n	800bcde <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800bcc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc8:	f383 8811 	msr	BASEPRI, r3
 800bccc:	f3bf 8f6f 	isb	sy
 800bcd0:	f3bf 8f4f 	dsb	sy
 800bcd4:	61bb      	str	r3, [r7, #24]
}
 800bcd6:	bf00      	nop
 800bcd8:	e7fe      	b.n	800bcd8 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800bcda:	bf00      	nop
 800bcdc:	e000      	b.n	800bce0 <xTaskGenericNotifyFromISR+0x104>
					break;
 800bcde:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800bce0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bce4:	2b01      	cmp	r3, #1
 800bce6:	d145      	bne.n	800bd74 <xTaskGenericNotifyFromISR+0x198>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800bce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d00a      	beq.n	800bd06 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800bcf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf4:	f383 8811 	msr	BASEPRI, r3
 800bcf8:	f3bf 8f6f 	isb	sy
 800bcfc:	f3bf 8f4f 	dsb	sy
 800bd00:	617b      	str	r3, [r7, #20]
}
 800bd02:	bf00      	nop
 800bd04:	e7fe      	b.n	800bd04 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd06:	4b21      	ldr	r3, [pc, #132]	; (800bd8c <xTaskGenericNotifyFromISR+0x1b0>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d11c      	bne.n	800bd48 <xTaskGenericNotifyFromISR+0x16c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd10:	3304      	adds	r3, #4
 800bd12:	4618      	mov	r0, r3
 800bd14:	f7fe fa0e 	bl	800a134 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bd18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd1c:	2201      	movs	r2, #1
 800bd1e:	409a      	lsls	r2, r3
 800bd20:	4b1b      	ldr	r3, [pc, #108]	; (800bd90 <xTaskGenericNotifyFromISR+0x1b4>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	4313      	orrs	r3, r2
 800bd26:	4a1a      	ldr	r2, [pc, #104]	; (800bd90 <xTaskGenericNotifyFromISR+0x1b4>)
 800bd28:	6013      	str	r3, [r2, #0]
 800bd2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd2e:	4613      	mov	r3, r2
 800bd30:	009b      	lsls	r3, r3, #2
 800bd32:	4413      	add	r3, r2
 800bd34:	009b      	lsls	r3, r3, #2
 800bd36:	4a17      	ldr	r2, [pc, #92]	; (800bd94 <xTaskGenericNotifyFromISR+0x1b8>)
 800bd38:	441a      	add	r2, r3
 800bd3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd3c:	3304      	adds	r3, #4
 800bd3e:	4619      	mov	r1, r3
 800bd40:	4610      	mov	r0, r2
 800bd42:	f7fe f99a 	bl	800a07a <vListInsertEnd>
 800bd46:	e005      	b.n	800bd54 <xTaskGenericNotifyFromISR+0x178>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800bd48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd4a:	3318      	adds	r3, #24
 800bd4c:	4619      	mov	r1, r3
 800bd4e:	4812      	ldr	r0, [pc, #72]	; (800bd98 <xTaskGenericNotifyFromISR+0x1bc>)
 800bd50:	f7fe f993 	bl	800a07a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bd54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd58:	4b10      	ldr	r3, [pc, #64]	; (800bd9c <xTaskGenericNotifyFromISR+0x1c0>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd5e:	429a      	cmp	r2, r3
 800bd60:	d908      	bls.n	800bd74 <xTaskGenericNotifyFromISR+0x198>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800bd62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d002      	beq.n	800bd6e <xTaskGenericNotifyFromISR+0x192>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800bd68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd6a:	2201      	movs	r2, #1
 800bd6c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800bd6e:	4b0c      	ldr	r3, [pc, #48]	; (800bda0 <xTaskGenericNotifyFromISR+0x1c4>)
 800bd70:	2201      	movs	r2, #1
 800bd72:	601a      	str	r2, [r3, #0]
 800bd74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd76:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	f383 8811 	msr	BASEPRI, r3
}
 800bd7e:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800bd80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800bd82:	4618      	mov	r0, r3
 800bd84:	3738      	adds	r7, #56	; 0x38
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}
 800bd8a:	bf00      	nop
 800bd8c:	200006b0 	.word	0x200006b0
 800bd90:	20000690 	.word	0x20000690
 800bd94:	2000058c 	.word	0x2000058c
 800bd98:	20000648 	.word	0x20000648
 800bd9c:	20000588 	.word	0x20000588
 800bda0:	2000069c 	.word	0x2000069c

0800bda4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b084      	sub	sp, #16
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bdae:	4b29      	ldr	r3, [pc, #164]	; (800be54 <prvAddCurrentTaskToDelayedList+0xb0>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bdb4:	4b28      	ldr	r3, [pc, #160]	; (800be58 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	3304      	adds	r3, #4
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f7fe f9ba 	bl	800a134 <uxListRemove>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d10b      	bne.n	800bdde <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800bdc6:	4b24      	ldr	r3, [pc, #144]	; (800be58 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdcc:	2201      	movs	r2, #1
 800bdce:	fa02 f303 	lsl.w	r3, r2, r3
 800bdd2:	43da      	mvns	r2, r3
 800bdd4:	4b21      	ldr	r3, [pc, #132]	; (800be5c <prvAddCurrentTaskToDelayedList+0xb8>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	4013      	ands	r3, r2
 800bdda:	4a20      	ldr	r2, [pc, #128]	; (800be5c <prvAddCurrentTaskToDelayedList+0xb8>)
 800bddc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bde4:	d10a      	bne.n	800bdfc <prvAddCurrentTaskToDelayedList+0x58>
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d007      	beq.n	800bdfc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bdec:	4b1a      	ldr	r3, [pc, #104]	; (800be58 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	3304      	adds	r3, #4
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	481a      	ldr	r0, [pc, #104]	; (800be60 <prvAddCurrentTaskToDelayedList+0xbc>)
 800bdf6:	f7fe f940 	bl	800a07a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bdfa:	e026      	b.n	800be4a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bdfc:	68fa      	ldr	r2, [r7, #12]
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	4413      	add	r3, r2
 800be02:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800be04:	4b14      	ldr	r3, [pc, #80]	; (800be58 <prvAddCurrentTaskToDelayedList+0xb4>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	68ba      	ldr	r2, [r7, #8]
 800be0a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800be0c:	68ba      	ldr	r2, [r7, #8]
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	429a      	cmp	r2, r3
 800be12:	d209      	bcs.n	800be28 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be14:	4b13      	ldr	r3, [pc, #76]	; (800be64 <prvAddCurrentTaskToDelayedList+0xc0>)
 800be16:	681a      	ldr	r2, [r3, #0]
 800be18:	4b0f      	ldr	r3, [pc, #60]	; (800be58 <prvAddCurrentTaskToDelayedList+0xb4>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	3304      	adds	r3, #4
 800be1e:	4619      	mov	r1, r3
 800be20:	4610      	mov	r0, r2
 800be22:	f7fe f94e 	bl	800a0c2 <vListInsert>
}
 800be26:	e010      	b.n	800be4a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be28:	4b0f      	ldr	r3, [pc, #60]	; (800be68 <prvAddCurrentTaskToDelayedList+0xc4>)
 800be2a:	681a      	ldr	r2, [r3, #0]
 800be2c:	4b0a      	ldr	r3, [pc, #40]	; (800be58 <prvAddCurrentTaskToDelayedList+0xb4>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	3304      	adds	r3, #4
 800be32:	4619      	mov	r1, r3
 800be34:	4610      	mov	r0, r2
 800be36:	f7fe f944 	bl	800a0c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800be3a:	4b0c      	ldr	r3, [pc, #48]	; (800be6c <prvAddCurrentTaskToDelayedList+0xc8>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	68ba      	ldr	r2, [r7, #8]
 800be40:	429a      	cmp	r2, r3
 800be42:	d202      	bcs.n	800be4a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800be44:	4a09      	ldr	r2, [pc, #36]	; (800be6c <prvAddCurrentTaskToDelayedList+0xc8>)
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	6013      	str	r3, [r2, #0]
}
 800be4a:	bf00      	nop
 800be4c:	3710      	adds	r7, #16
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}
 800be52:	bf00      	nop
 800be54:	2000068c 	.word	0x2000068c
 800be58:	20000588 	.word	0x20000588
 800be5c:	20000690 	.word	0x20000690
 800be60:	20000674 	.word	0x20000674
 800be64:	20000644 	.word	0x20000644
 800be68:	20000640 	.word	0x20000640
 800be6c:	200006a8 	.word	0x200006a8

0800be70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800be70:	b480      	push	{r7}
 800be72:	b085      	sub	sp, #20
 800be74:	af00      	add	r7, sp, #0
 800be76:	60f8      	str	r0, [r7, #12]
 800be78:	60b9      	str	r1, [r7, #8]
 800be7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	3b04      	subs	r3, #4
 800be80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800be88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	3b04      	subs	r3, #4
 800be8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	f023 0201 	bic.w	r2, r3, #1
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	3b04      	subs	r3, #4
 800be9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bea0:	4a0c      	ldr	r2, [pc, #48]	; (800bed4 <pxPortInitialiseStack+0x64>)
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	3b14      	subs	r3, #20
 800beaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800beac:	687a      	ldr	r2, [r7, #4]
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	3b04      	subs	r3, #4
 800beb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	f06f 0202 	mvn.w	r2, #2
 800bebe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	3b20      	subs	r3, #32
 800bec4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bec6:	68fb      	ldr	r3, [r7, #12]
}
 800bec8:	4618      	mov	r0, r3
 800beca:	3714      	adds	r7, #20
 800becc:	46bd      	mov	sp, r7
 800bece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed2:	4770      	bx	lr
 800bed4:	0800bed9 	.word	0x0800bed9

0800bed8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bed8:	b480      	push	{r7}
 800beda:	b085      	sub	sp, #20
 800bedc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bede:	2300      	movs	r3, #0
 800bee0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bee2:	4b12      	ldr	r3, [pc, #72]	; (800bf2c <prvTaskExitError+0x54>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800beea:	d00a      	beq.n	800bf02 <prvTaskExitError+0x2a>
	__asm volatile
 800beec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef0:	f383 8811 	msr	BASEPRI, r3
 800bef4:	f3bf 8f6f 	isb	sy
 800bef8:	f3bf 8f4f 	dsb	sy
 800befc:	60fb      	str	r3, [r7, #12]
}
 800befe:	bf00      	nop
 800bf00:	e7fe      	b.n	800bf00 <prvTaskExitError+0x28>
	__asm volatile
 800bf02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf06:	f383 8811 	msr	BASEPRI, r3
 800bf0a:	f3bf 8f6f 	isb	sy
 800bf0e:	f3bf 8f4f 	dsb	sy
 800bf12:	60bb      	str	r3, [r7, #8]
}
 800bf14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bf16:	bf00      	nop
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d0fc      	beq.n	800bf18 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bf1e:	bf00      	nop
 800bf20:	bf00      	nop
 800bf22:	3714      	adds	r7, #20
 800bf24:	46bd      	mov	sp, r7
 800bf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2a:	4770      	bx	lr
 800bf2c:	2000002c 	.word	0x2000002c

0800bf30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bf30:	4b07      	ldr	r3, [pc, #28]	; (800bf50 <pxCurrentTCBConst2>)
 800bf32:	6819      	ldr	r1, [r3, #0]
 800bf34:	6808      	ldr	r0, [r1, #0]
 800bf36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf3a:	f380 8809 	msr	PSP, r0
 800bf3e:	f3bf 8f6f 	isb	sy
 800bf42:	f04f 0000 	mov.w	r0, #0
 800bf46:	f380 8811 	msr	BASEPRI, r0
 800bf4a:	4770      	bx	lr
 800bf4c:	f3af 8000 	nop.w

0800bf50 <pxCurrentTCBConst2>:
 800bf50:	20000588 	.word	0x20000588
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bf54:	bf00      	nop
 800bf56:	bf00      	nop

0800bf58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bf58:	4808      	ldr	r0, [pc, #32]	; (800bf7c <prvPortStartFirstTask+0x24>)
 800bf5a:	6800      	ldr	r0, [r0, #0]
 800bf5c:	6800      	ldr	r0, [r0, #0]
 800bf5e:	f380 8808 	msr	MSP, r0
 800bf62:	f04f 0000 	mov.w	r0, #0
 800bf66:	f380 8814 	msr	CONTROL, r0
 800bf6a:	b662      	cpsie	i
 800bf6c:	b661      	cpsie	f
 800bf6e:	f3bf 8f4f 	dsb	sy
 800bf72:	f3bf 8f6f 	isb	sy
 800bf76:	df00      	svc	0
 800bf78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bf7a:	bf00      	nop
 800bf7c:	e000ed08 	.word	0xe000ed08

0800bf80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b086      	sub	sp, #24
 800bf84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bf86:	4b46      	ldr	r3, [pc, #280]	; (800c0a0 <xPortStartScheduler+0x120>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	4a46      	ldr	r2, [pc, #280]	; (800c0a4 <xPortStartScheduler+0x124>)
 800bf8c:	4293      	cmp	r3, r2
 800bf8e:	d10a      	bne.n	800bfa6 <xPortStartScheduler+0x26>
	__asm volatile
 800bf90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf94:	f383 8811 	msr	BASEPRI, r3
 800bf98:	f3bf 8f6f 	isb	sy
 800bf9c:	f3bf 8f4f 	dsb	sy
 800bfa0:	613b      	str	r3, [r7, #16]
}
 800bfa2:	bf00      	nop
 800bfa4:	e7fe      	b.n	800bfa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bfa6:	4b3e      	ldr	r3, [pc, #248]	; (800c0a0 <xPortStartScheduler+0x120>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	4a3f      	ldr	r2, [pc, #252]	; (800c0a8 <xPortStartScheduler+0x128>)
 800bfac:	4293      	cmp	r3, r2
 800bfae:	d10a      	bne.n	800bfc6 <xPortStartScheduler+0x46>
	__asm volatile
 800bfb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb4:	f383 8811 	msr	BASEPRI, r3
 800bfb8:	f3bf 8f6f 	isb	sy
 800bfbc:	f3bf 8f4f 	dsb	sy
 800bfc0:	60fb      	str	r3, [r7, #12]
}
 800bfc2:	bf00      	nop
 800bfc4:	e7fe      	b.n	800bfc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bfc6:	4b39      	ldr	r3, [pc, #228]	; (800c0ac <xPortStartScheduler+0x12c>)
 800bfc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	781b      	ldrb	r3, [r3, #0]
 800bfce:	b2db      	uxtb	r3, r3
 800bfd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bfd2:	697b      	ldr	r3, [r7, #20]
 800bfd4:	22ff      	movs	r2, #255	; 0xff
 800bfd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bfd8:	697b      	ldr	r3, [r7, #20]
 800bfda:	781b      	ldrb	r3, [r3, #0]
 800bfdc:	b2db      	uxtb	r3, r3
 800bfde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bfe0:	78fb      	ldrb	r3, [r7, #3]
 800bfe2:	b2db      	uxtb	r3, r3
 800bfe4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bfe8:	b2da      	uxtb	r2, r3
 800bfea:	4b31      	ldr	r3, [pc, #196]	; (800c0b0 <xPortStartScheduler+0x130>)
 800bfec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bfee:	4b31      	ldr	r3, [pc, #196]	; (800c0b4 <xPortStartScheduler+0x134>)
 800bff0:	2207      	movs	r2, #7
 800bff2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bff4:	e009      	b.n	800c00a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bff6:	4b2f      	ldr	r3, [pc, #188]	; (800c0b4 <xPortStartScheduler+0x134>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	3b01      	subs	r3, #1
 800bffc:	4a2d      	ldr	r2, [pc, #180]	; (800c0b4 <xPortStartScheduler+0x134>)
 800bffe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c000:	78fb      	ldrb	r3, [r7, #3]
 800c002:	b2db      	uxtb	r3, r3
 800c004:	005b      	lsls	r3, r3, #1
 800c006:	b2db      	uxtb	r3, r3
 800c008:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c00a:	78fb      	ldrb	r3, [r7, #3]
 800c00c:	b2db      	uxtb	r3, r3
 800c00e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c012:	2b80      	cmp	r3, #128	; 0x80
 800c014:	d0ef      	beq.n	800bff6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c016:	4b27      	ldr	r3, [pc, #156]	; (800c0b4 <xPortStartScheduler+0x134>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f1c3 0307 	rsb	r3, r3, #7
 800c01e:	2b04      	cmp	r3, #4
 800c020:	d00a      	beq.n	800c038 <xPortStartScheduler+0xb8>
	__asm volatile
 800c022:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c026:	f383 8811 	msr	BASEPRI, r3
 800c02a:	f3bf 8f6f 	isb	sy
 800c02e:	f3bf 8f4f 	dsb	sy
 800c032:	60bb      	str	r3, [r7, #8]
}
 800c034:	bf00      	nop
 800c036:	e7fe      	b.n	800c036 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c038:	4b1e      	ldr	r3, [pc, #120]	; (800c0b4 <xPortStartScheduler+0x134>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	021b      	lsls	r3, r3, #8
 800c03e:	4a1d      	ldr	r2, [pc, #116]	; (800c0b4 <xPortStartScheduler+0x134>)
 800c040:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c042:	4b1c      	ldr	r3, [pc, #112]	; (800c0b4 <xPortStartScheduler+0x134>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c04a:	4a1a      	ldr	r2, [pc, #104]	; (800c0b4 <xPortStartScheduler+0x134>)
 800c04c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	b2da      	uxtb	r2, r3
 800c052:	697b      	ldr	r3, [r7, #20]
 800c054:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c056:	4b18      	ldr	r3, [pc, #96]	; (800c0b8 <xPortStartScheduler+0x138>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	4a17      	ldr	r2, [pc, #92]	; (800c0b8 <xPortStartScheduler+0x138>)
 800c05c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c060:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c062:	4b15      	ldr	r3, [pc, #84]	; (800c0b8 <xPortStartScheduler+0x138>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	4a14      	ldr	r2, [pc, #80]	; (800c0b8 <xPortStartScheduler+0x138>)
 800c068:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c06c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c06e:	f000 f8dd 	bl	800c22c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c072:	4b12      	ldr	r3, [pc, #72]	; (800c0bc <xPortStartScheduler+0x13c>)
 800c074:	2200      	movs	r2, #0
 800c076:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c078:	f000 f8fc 	bl	800c274 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c07c:	4b10      	ldr	r3, [pc, #64]	; (800c0c0 <xPortStartScheduler+0x140>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	4a0f      	ldr	r2, [pc, #60]	; (800c0c0 <xPortStartScheduler+0x140>)
 800c082:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c086:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c088:	f7ff ff66 	bl	800bf58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c08c:	f7ff f976 	bl	800b37c <vTaskSwitchContext>
	prvTaskExitError();
 800c090:	f7ff ff22 	bl	800bed8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c094:	2300      	movs	r3, #0
}
 800c096:	4618      	mov	r0, r3
 800c098:	3718      	adds	r7, #24
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}
 800c09e:	bf00      	nop
 800c0a0:	e000ed00 	.word	0xe000ed00
 800c0a4:	410fc271 	.word	0x410fc271
 800c0a8:	410fc270 	.word	0x410fc270
 800c0ac:	e000e400 	.word	0xe000e400
 800c0b0:	200006b4 	.word	0x200006b4
 800c0b4:	200006b8 	.word	0x200006b8
 800c0b8:	e000ed20 	.word	0xe000ed20
 800c0bc:	2000002c 	.word	0x2000002c
 800c0c0:	e000ef34 	.word	0xe000ef34

0800c0c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b083      	sub	sp, #12
 800c0c8:	af00      	add	r7, sp, #0
	__asm volatile
 800c0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ce:	f383 8811 	msr	BASEPRI, r3
 800c0d2:	f3bf 8f6f 	isb	sy
 800c0d6:	f3bf 8f4f 	dsb	sy
 800c0da:	607b      	str	r3, [r7, #4]
}
 800c0dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c0de:	4b0f      	ldr	r3, [pc, #60]	; (800c11c <vPortEnterCritical+0x58>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	3301      	adds	r3, #1
 800c0e4:	4a0d      	ldr	r2, [pc, #52]	; (800c11c <vPortEnterCritical+0x58>)
 800c0e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c0e8:	4b0c      	ldr	r3, [pc, #48]	; (800c11c <vPortEnterCritical+0x58>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	2b01      	cmp	r3, #1
 800c0ee:	d10f      	bne.n	800c110 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c0f0:	4b0b      	ldr	r3, [pc, #44]	; (800c120 <vPortEnterCritical+0x5c>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	b2db      	uxtb	r3, r3
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d00a      	beq.n	800c110 <vPortEnterCritical+0x4c>
	__asm volatile
 800c0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0fe:	f383 8811 	msr	BASEPRI, r3
 800c102:	f3bf 8f6f 	isb	sy
 800c106:	f3bf 8f4f 	dsb	sy
 800c10a:	603b      	str	r3, [r7, #0]
}
 800c10c:	bf00      	nop
 800c10e:	e7fe      	b.n	800c10e <vPortEnterCritical+0x4a>
	}
}
 800c110:	bf00      	nop
 800c112:	370c      	adds	r7, #12
 800c114:	46bd      	mov	sp, r7
 800c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11a:	4770      	bx	lr
 800c11c:	2000002c 	.word	0x2000002c
 800c120:	e000ed04 	.word	0xe000ed04

0800c124 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c124:	b480      	push	{r7}
 800c126:	b083      	sub	sp, #12
 800c128:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c12a:	4b12      	ldr	r3, [pc, #72]	; (800c174 <vPortExitCritical+0x50>)
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d10a      	bne.n	800c148 <vPortExitCritical+0x24>
	__asm volatile
 800c132:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c136:	f383 8811 	msr	BASEPRI, r3
 800c13a:	f3bf 8f6f 	isb	sy
 800c13e:	f3bf 8f4f 	dsb	sy
 800c142:	607b      	str	r3, [r7, #4]
}
 800c144:	bf00      	nop
 800c146:	e7fe      	b.n	800c146 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c148:	4b0a      	ldr	r3, [pc, #40]	; (800c174 <vPortExitCritical+0x50>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	3b01      	subs	r3, #1
 800c14e:	4a09      	ldr	r2, [pc, #36]	; (800c174 <vPortExitCritical+0x50>)
 800c150:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c152:	4b08      	ldr	r3, [pc, #32]	; (800c174 <vPortExitCritical+0x50>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d105      	bne.n	800c166 <vPortExitCritical+0x42>
 800c15a:	2300      	movs	r3, #0
 800c15c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	f383 8811 	msr	BASEPRI, r3
}
 800c164:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c166:	bf00      	nop
 800c168:	370c      	adds	r7, #12
 800c16a:	46bd      	mov	sp, r7
 800c16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c170:	4770      	bx	lr
 800c172:	bf00      	nop
 800c174:	2000002c 	.word	0x2000002c
	...

0800c180 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c180:	f3ef 8009 	mrs	r0, PSP
 800c184:	f3bf 8f6f 	isb	sy
 800c188:	4b15      	ldr	r3, [pc, #84]	; (800c1e0 <pxCurrentTCBConst>)
 800c18a:	681a      	ldr	r2, [r3, #0]
 800c18c:	f01e 0f10 	tst.w	lr, #16
 800c190:	bf08      	it	eq
 800c192:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c196:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c19a:	6010      	str	r0, [r2, #0]
 800c19c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c1a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c1a4:	f380 8811 	msr	BASEPRI, r0
 800c1a8:	f3bf 8f4f 	dsb	sy
 800c1ac:	f3bf 8f6f 	isb	sy
 800c1b0:	f7ff f8e4 	bl	800b37c <vTaskSwitchContext>
 800c1b4:	f04f 0000 	mov.w	r0, #0
 800c1b8:	f380 8811 	msr	BASEPRI, r0
 800c1bc:	bc09      	pop	{r0, r3}
 800c1be:	6819      	ldr	r1, [r3, #0]
 800c1c0:	6808      	ldr	r0, [r1, #0]
 800c1c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1c6:	f01e 0f10 	tst.w	lr, #16
 800c1ca:	bf08      	it	eq
 800c1cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c1d0:	f380 8809 	msr	PSP, r0
 800c1d4:	f3bf 8f6f 	isb	sy
 800c1d8:	4770      	bx	lr
 800c1da:	bf00      	nop
 800c1dc:	f3af 8000 	nop.w

0800c1e0 <pxCurrentTCBConst>:
 800c1e0:	20000588 	.word	0x20000588
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c1e4:	bf00      	nop
 800c1e6:	bf00      	nop

0800c1e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b082      	sub	sp, #8
 800c1ec:	af00      	add	r7, sp, #0
	__asm volatile
 800c1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1f2:	f383 8811 	msr	BASEPRI, r3
 800c1f6:	f3bf 8f6f 	isb	sy
 800c1fa:	f3bf 8f4f 	dsb	sy
 800c1fe:	607b      	str	r3, [r7, #4]
}
 800c200:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c202:	f7ff f803 	bl	800b20c <xTaskIncrementTick>
 800c206:	4603      	mov	r3, r0
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d003      	beq.n	800c214 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c20c:	4b06      	ldr	r3, [pc, #24]	; (800c228 <SysTick_Handler+0x40>)
 800c20e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c212:	601a      	str	r2, [r3, #0]
 800c214:	2300      	movs	r3, #0
 800c216:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	f383 8811 	msr	BASEPRI, r3
}
 800c21e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c220:	bf00      	nop
 800c222:	3708      	adds	r7, #8
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}
 800c228:	e000ed04 	.word	0xe000ed04

0800c22c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c22c:	b480      	push	{r7}
 800c22e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c230:	4b0b      	ldr	r3, [pc, #44]	; (800c260 <vPortSetupTimerInterrupt+0x34>)
 800c232:	2200      	movs	r2, #0
 800c234:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c236:	4b0b      	ldr	r3, [pc, #44]	; (800c264 <vPortSetupTimerInterrupt+0x38>)
 800c238:	2200      	movs	r2, #0
 800c23a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c23c:	4b0a      	ldr	r3, [pc, #40]	; (800c268 <vPortSetupTimerInterrupt+0x3c>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	4a0a      	ldr	r2, [pc, #40]	; (800c26c <vPortSetupTimerInterrupt+0x40>)
 800c242:	fba2 2303 	umull	r2, r3, r2, r3
 800c246:	099b      	lsrs	r3, r3, #6
 800c248:	4a09      	ldr	r2, [pc, #36]	; (800c270 <vPortSetupTimerInterrupt+0x44>)
 800c24a:	3b01      	subs	r3, #1
 800c24c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c24e:	4b04      	ldr	r3, [pc, #16]	; (800c260 <vPortSetupTimerInterrupt+0x34>)
 800c250:	2207      	movs	r2, #7
 800c252:	601a      	str	r2, [r3, #0]
}
 800c254:	bf00      	nop
 800c256:	46bd      	mov	sp, r7
 800c258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25c:	4770      	bx	lr
 800c25e:	bf00      	nop
 800c260:	e000e010 	.word	0xe000e010
 800c264:	e000e018 	.word	0xe000e018
 800c268:	20000000 	.word	0x20000000
 800c26c:	10624dd3 	.word	0x10624dd3
 800c270:	e000e014 	.word	0xe000e014

0800c274 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c274:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c284 <vPortEnableVFP+0x10>
 800c278:	6801      	ldr	r1, [r0, #0]
 800c27a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c27e:	6001      	str	r1, [r0, #0]
 800c280:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c282:	bf00      	nop
 800c284:	e000ed88 	.word	0xe000ed88

0800c288 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c288:	b480      	push	{r7}
 800c28a:	b085      	sub	sp, #20
 800c28c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c28e:	f3ef 8305 	mrs	r3, IPSR
 800c292:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	2b0f      	cmp	r3, #15
 800c298:	d914      	bls.n	800c2c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c29a:	4a17      	ldr	r2, [pc, #92]	; (800c2f8 <vPortValidateInterruptPriority+0x70>)
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	4413      	add	r3, r2
 800c2a0:	781b      	ldrb	r3, [r3, #0]
 800c2a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c2a4:	4b15      	ldr	r3, [pc, #84]	; (800c2fc <vPortValidateInterruptPriority+0x74>)
 800c2a6:	781b      	ldrb	r3, [r3, #0]
 800c2a8:	7afa      	ldrb	r2, [r7, #11]
 800c2aa:	429a      	cmp	r2, r3
 800c2ac:	d20a      	bcs.n	800c2c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b2:	f383 8811 	msr	BASEPRI, r3
 800c2b6:	f3bf 8f6f 	isb	sy
 800c2ba:	f3bf 8f4f 	dsb	sy
 800c2be:	607b      	str	r3, [r7, #4]
}
 800c2c0:	bf00      	nop
 800c2c2:	e7fe      	b.n	800c2c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c2c4:	4b0e      	ldr	r3, [pc, #56]	; (800c300 <vPortValidateInterruptPriority+0x78>)
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c2cc:	4b0d      	ldr	r3, [pc, #52]	; (800c304 <vPortValidateInterruptPriority+0x7c>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	429a      	cmp	r2, r3
 800c2d2:	d90a      	bls.n	800c2ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2d8:	f383 8811 	msr	BASEPRI, r3
 800c2dc:	f3bf 8f6f 	isb	sy
 800c2e0:	f3bf 8f4f 	dsb	sy
 800c2e4:	603b      	str	r3, [r7, #0]
}
 800c2e6:	bf00      	nop
 800c2e8:	e7fe      	b.n	800c2e8 <vPortValidateInterruptPriority+0x60>
	}
 800c2ea:	bf00      	nop
 800c2ec:	3714      	adds	r7, #20
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f4:	4770      	bx	lr
 800c2f6:	bf00      	nop
 800c2f8:	e000e3f0 	.word	0xe000e3f0
 800c2fc:	200006b4 	.word	0x200006b4
 800c300:	e000ed0c 	.word	0xe000ed0c
 800c304:	200006b8 	.word	0x200006b8

0800c308 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b08a      	sub	sp, #40	; 0x28
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c310:	2300      	movs	r3, #0
 800c312:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c314:	f7fe fed0 	bl	800b0b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c318:	4b5d      	ldr	r3, [pc, #372]	; (800c490 <pvPortMalloc+0x188>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d101      	bne.n	800c324 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c320:	f000 f924 	bl	800c56c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c324:	4b5b      	ldr	r3, [pc, #364]	; (800c494 <pvPortMalloc+0x18c>)
 800c326:	681a      	ldr	r2, [r3, #0]
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	4013      	ands	r3, r2
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	f040 8093 	bne.w	800c458 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d01d      	beq.n	800c374 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c338:	2208      	movs	r2, #8
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	4413      	add	r3, r2
 800c33e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f003 0307 	and.w	r3, r3, #7
 800c346:	2b00      	cmp	r3, #0
 800c348:	d014      	beq.n	800c374 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f023 0307 	bic.w	r3, r3, #7
 800c350:	3308      	adds	r3, #8
 800c352:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f003 0307 	and.w	r3, r3, #7
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d00a      	beq.n	800c374 <pvPortMalloc+0x6c>
	__asm volatile
 800c35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c362:	f383 8811 	msr	BASEPRI, r3
 800c366:	f3bf 8f6f 	isb	sy
 800c36a:	f3bf 8f4f 	dsb	sy
 800c36e:	617b      	str	r3, [r7, #20]
}
 800c370:	bf00      	nop
 800c372:	e7fe      	b.n	800c372 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d06e      	beq.n	800c458 <pvPortMalloc+0x150>
 800c37a:	4b47      	ldr	r3, [pc, #284]	; (800c498 <pvPortMalloc+0x190>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	687a      	ldr	r2, [r7, #4]
 800c380:	429a      	cmp	r2, r3
 800c382:	d869      	bhi.n	800c458 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c384:	4b45      	ldr	r3, [pc, #276]	; (800c49c <pvPortMalloc+0x194>)
 800c386:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c388:	4b44      	ldr	r3, [pc, #272]	; (800c49c <pvPortMalloc+0x194>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c38e:	e004      	b.n	800c39a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c392:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c39c:	685b      	ldr	r3, [r3, #4]
 800c39e:	687a      	ldr	r2, [r7, #4]
 800c3a0:	429a      	cmp	r2, r3
 800c3a2:	d903      	bls.n	800c3ac <pvPortMalloc+0xa4>
 800c3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d1f1      	bne.n	800c390 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c3ac:	4b38      	ldr	r3, [pc, #224]	; (800c490 <pvPortMalloc+0x188>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3b2:	429a      	cmp	r2, r3
 800c3b4:	d050      	beq.n	800c458 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c3b6:	6a3b      	ldr	r3, [r7, #32]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	2208      	movs	r2, #8
 800c3bc:	4413      	add	r3, r2
 800c3be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3c2:	681a      	ldr	r2, [r3, #0]
 800c3c4:	6a3b      	ldr	r3, [r7, #32]
 800c3c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ca:	685a      	ldr	r2, [r3, #4]
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	1ad2      	subs	r2, r2, r3
 800c3d0:	2308      	movs	r3, #8
 800c3d2:	005b      	lsls	r3, r3, #1
 800c3d4:	429a      	cmp	r2, r3
 800c3d6:	d91f      	bls.n	800c418 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c3d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	4413      	add	r3, r2
 800c3de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c3e0:	69bb      	ldr	r3, [r7, #24]
 800c3e2:	f003 0307 	and.w	r3, r3, #7
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d00a      	beq.n	800c400 <pvPortMalloc+0xf8>
	__asm volatile
 800c3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ee:	f383 8811 	msr	BASEPRI, r3
 800c3f2:	f3bf 8f6f 	isb	sy
 800c3f6:	f3bf 8f4f 	dsb	sy
 800c3fa:	613b      	str	r3, [r7, #16]
}
 800c3fc:	bf00      	nop
 800c3fe:	e7fe      	b.n	800c3fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c402:	685a      	ldr	r2, [r3, #4]
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	1ad2      	subs	r2, r2, r3
 800c408:	69bb      	ldr	r3, [r7, #24]
 800c40a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c40e:	687a      	ldr	r2, [r7, #4]
 800c410:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c412:	69b8      	ldr	r0, [r7, #24]
 800c414:	f000 f90c 	bl	800c630 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c418:	4b1f      	ldr	r3, [pc, #124]	; (800c498 <pvPortMalloc+0x190>)
 800c41a:	681a      	ldr	r2, [r3, #0]
 800c41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c41e:	685b      	ldr	r3, [r3, #4]
 800c420:	1ad3      	subs	r3, r2, r3
 800c422:	4a1d      	ldr	r2, [pc, #116]	; (800c498 <pvPortMalloc+0x190>)
 800c424:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c426:	4b1c      	ldr	r3, [pc, #112]	; (800c498 <pvPortMalloc+0x190>)
 800c428:	681a      	ldr	r2, [r3, #0]
 800c42a:	4b1d      	ldr	r3, [pc, #116]	; (800c4a0 <pvPortMalloc+0x198>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	429a      	cmp	r2, r3
 800c430:	d203      	bcs.n	800c43a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c432:	4b19      	ldr	r3, [pc, #100]	; (800c498 <pvPortMalloc+0x190>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	4a1a      	ldr	r2, [pc, #104]	; (800c4a0 <pvPortMalloc+0x198>)
 800c438:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c43c:	685a      	ldr	r2, [r3, #4]
 800c43e:	4b15      	ldr	r3, [pc, #84]	; (800c494 <pvPortMalloc+0x18c>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	431a      	orrs	r2, r3
 800c444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c446:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c44a:	2200      	movs	r2, #0
 800c44c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c44e:	4b15      	ldr	r3, [pc, #84]	; (800c4a4 <pvPortMalloc+0x19c>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	3301      	adds	r3, #1
 800c454:	4a13      	ldr	r2, [pc, #76]	; (800c4a4 <pvPortMalloc+0x19c>)
 800c456:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c458:	f7fe fe3c 	bl	800b0d4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800c45c:	69fb      	ldr	r3, [r7, #28]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d101      	bne.n	800c466 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800c462:	f7f4 fa21 	bl	80008a8 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c466:	69fb      	ldr	r3, [r7, #28]
 800c468:	f003 0307 	and.w	r3, r3, #7
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d00a      	beq.n	800c486 <pvPortMalloc+0x17e>
	__asm volatile
 800c470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c474:	f383 8811 	msr	BASEPRI, r3
 800c478:	f3bf 8f6f 	isb	sy
 800c47c:	f3bf 8f4f 	dsb	sy
 800c480:	60fb      	str	r3, [r7, #12]
}
 800c482:	bf00      	nop
 800c484:	e7fe      	b.n	800c484 <pvPortMalloc+0x17c>
	return pvReturn;
 800c486:	69fb      	ldr	r3, [r7, #28]
}
 800c488:	4618      	mov	r0, r3
 800c48a:	3728      	adds	r7, #40	; 0x28
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}
 800c490:	200106c4 	.word	0x200106c4
 800c494:	200106d8 	.word	0x200106d8
 800c498:	200106c8 	.word	0x200106c8
 800c49c:	200106bc 	.word	0x200106bc
 800c4a0:	200106cc 	.word	0x200106cc
 800c4a4:	200106d0 	.word	0x200106d0

0800c4a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b086      	sub	sp, #24
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d04d      	beq.n	800c556 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c4ba:	2308      	movs	r3, #8
 800c4bc:	425b      	negs	r3, r3
 800c4be:	697a      	ldr	r2, [r7, #20]
 800c4c0:	4413      	add	r3, r2
 800c4c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c4c4:	697b      	ldr	r3, [r7, #20]
 800c4c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	685a      	ldr	r2, [r3, #4]
 800c4cc:	4b24      	ldr	r3, [pc, #144]	; (800c560 <vPortFree+0xb8>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	4013      	ands	r3, r2
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d10a      	bne.n	800c4ec <vPortFree+0x44>
	__asm volatile
 800c4d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4da:	f383 8811 	msr	BASEPRI, r3
 800c4de:	f3bf 8f6f 	isb	sy
 800c4e2:	f3bf 8f4f 	dsb	sy
 800c4e6:	60fb      	str	r3, [r7, #12]
}
 800c4e8:	bf00      	nop
 800c4ea:	e7fe      	b.n	800c4ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c4ec:	693b      	ldr	r3, [r7, #16]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d00a      	beq.n	800c50a <vPortFree+0x62>
	__asm volatile
 800c4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f8:	f383 8811 	msr	BASEPRI, r3
 800c4fc:	f3bf 8f6f 	isb	sy
 800c500:	f3bf 8f4f 	dsb	sy
 800c504:	60bb      	str	r3, [r7, #8]
}
 800c506:	bf00      	nop
 800c508:	e7fe      	b.n	800c508 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c50a:	693b      	ldr	r3, [r7, #16]
 800c50c:	685a      	ldr	r2, [r3, #4]
 800c50e:	4b14      	ldr	r3, [pc, #80]	; (800c560 <vPortFree+0xb8>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	4013      	ands	r3, r2
 800c514:	2b00      	cmp	r3, #0
 800c516:	d01e      	beq.n	800c556 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c518:	693b      	ldr	r3, [r7, #16]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d11a      	bne.n	800c556 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c520:	693b      	ldr	r3, [r7, #16]
 800c522:	685a      	ldr	r2, [r3, #4]
 800c524:	4b0e      	ldr	r3, [pc, #56]	; (800c560 <vPortFree+0xb8>)
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	43db      	mvns	r3, r3
 800c52a:	401a      	ands	r2, r3
 800c52c:	693b      	ldr	r3, [r7, #16]
 800c52e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c530:	f7fe fdc2 	bl	800b0b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c534:	693b      	ldr	r3, [r7, #16]
 800c536:	685a      	ldr	r2, [r3, #4]
 800c538:	4b0a      	ldr	r3, [pc, #40]	; (800c564 <vPortFree+0xbc>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	4413      	add	r3, r2
 800c53e:	4a09      	ldr	r2, [pc, #36]	; (800c564 <vPortFree+0xbc>)
 800c540:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c542:	6938      	ldr	r0, [r7, #16]
 800c544:	f000 f874 	bl	800c630 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c548:	4b07      	ldr	r3, [pc, #28]	; (800c568 <vPortFree+0xc0>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	3301      	adds	r3, #1
 800c54e:	4a06      	ldr	r2, [pc, #24]	; (800c568 <vPortFree+0xc0>)
 800c550:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c552:	f7fe fdbf 	bl	800b0d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c556:	bf00      	nop
 800c558:	3718      	adds	r7, #24
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd80      	pop	{r7, pc}
 800c55e:	bf00      	nop
 800c560:	200106d8 	.word	0x200106d8
 800c564:	200106c8 	.word	0x200106c8
 800c568:	200106d4 	.word	0x200106d4

0800c56c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c56c:	b480      	push	{r7}
 800c56e:	b085      	sub	sp, #20
 800c570:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c572:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c576:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c578:	4b27      	ldr	r3, [pc, #156]	; (800c618 <prvHeapInit+0xac>)
 800c57a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	f003 0307 	and.w	r3, r3, #7
 800c582:	2b00      	cmp	r3, #0
 800c584:	d00c      	beq.n	800c5a0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	3307      	adds	r3, #7
 800c58a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	f023 0307 	bic.w	r3, r3, #7
 800c592:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c594:	68ba      	ldr	r2, [r7, #8]
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	1ad3      	subs	r3, r2, r3
 800c59a:	4a1f      	ldr	r2, [pc, #124]	; (800c618 <prvHeapInit+0xac>)
 800c59c:	4413      	add	r3, r2
 800c59e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c5a4:	4a1d      	ldr	r2, [pc, #116]	; (800c61c <prvHeapInit+0xb0>)
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c5aa:	4b1c      	ldr	r3, [pc, #112]	; (800c61c <prvHeapInit+0xb0>)
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	68ba      	ldr	r2, [r7, #8]
 800c5b4:	4413      	add	r3, r2
 800c5b6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c5b8:	2208      	movs	r2, #8
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	1a9b      	subs	r3, r3, r2
 800c5be:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	f023 0307 	bic.w	r3, r3, #7
 800c5c6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	4a15      	ldr	r2, [pc, #84]	; (800c620 <prvHeapInit+0xb4>)
 800c5cc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c5ce:	4b14      	ldr	r3, [pc, #80]	; (800c620 <prvHeapInit+0xb4>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c5d6:	4b12      	ldr	r3, [pc, #72]	; (800c620 <prvHeapInit+0xb4>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	2200      	movs	r2, #0
 800c5dc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	68fa      	ldr	r2, [r7, #12]
 800c5e6:	1ad2      	subs	r2, r2, r3
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c5ec:	4b0c      	ldr	r3, [pc, #48]	; (800c620 <prvHeapInit+0xb4>)
 800c5ee:	681a      	ldr	r2, [r3, #0]
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	685b      	ldr	r3, [r3, #4]
 800c5f8:	4a0a      	ldr	r2, [pc, #40]	; (800c624 <prvHeapInit+0xb8>)
 800c5fa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	685b      	ldr	r3, [r3, #4]
 800c600:	4a09      	ldr	r2, [pc, #36]	; (800c628 <prvHeapInit+0xbc>)
 800c602:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c604:	4b09      	ldr	r3, [pc, #36]	; (800c62c <prvHeapInit+0xc0>)
 800c606:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c60a:	601a      	str	r2, [r3, #0]
}
 800c60c:	bf00      	nop
 800c60e:	3714      	adds	r7, #20
 800c610:	46bd      	mov	sp, r7
 800c612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c616:	4770      	bx	lr
 800c618:	200006bc 	.word	0x200006bc
 800c61c:	200106bc 	.word	0x200106bc
 800c620:	200106c4 	.word	0x200106c4
 800c624:	200106cc 	.word	0x200106cc
 800c628:	200106c8 	.word	0x200106c8
 800c62c:	200106d8 	.word	0x200106d8

0800c630 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c630:	b480      	push	{r7}
 800c632:	b085      	sub	sp, #20
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c638:	4b28      	ldr	r3, [pc, #160]	; (800c6dc <prvInsertBlockIntoFreeList+0xac>)
 800c63a:	60fb      	str	r3, [r7, #12]
 800c63c:	e002      	b.n	800c644 <prvInsertBlockIntoFreeList+0x14>
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	60fb      	str	r3, [r7, #12]
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	687a      	ldr	r2, [r7, #4]
 800c64a:	429a      	cmp	r2, r3
 800c64c:	d8f7      	bhi.n	800c63e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	685b      	ldr	r3, [r3, #4]
 800c656:	68ba      	ldr	r2, [r7, #8]
 800c658:	4413      	add	r3, r2
 800c65a:	687a      	ldr	r2, [r7, #4]
 800c65c:	429a      	cmp	r2, r3
 800c65e:	d108      	bne.n	800c672 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	685a      	ldr	r2, [r3, #4]
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	685b      	ldr	r3, [r3, #4]
 800c668:	441a      	add	r2, r3
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	685b      	ldr	r3, [r3, #4]
 800c67a:	68ba      	ldr	r2, [r7, #8]
 800c67c:	441a      	add	r2, r3
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	429a      	cmp	r2, r3
 800c684:	d118      	bne.n	800c6b8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	681a      	ldr	r2, [r3, #0]
 800c68a:	4b15      	ldr	r3, [pc, #84]	; (800c6e0 <prvInsertBlockIntoFreeList+0xb0>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	429a      	cmp	r2, r3
 800c690:	d00d      	beq.n	800c6ae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	685a      	ldr	r2, [r3, #4]
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	685b      	ldr	r3, [r3, #4]
 800c69c:	441a      	add	r2, r3
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	681a      	ldr	r2, [r3, #0]
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	601a      	str	r2, [r3, #0]
 800c6ac:	e008      	b.n	800c6c0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c6ae:	4b0c      	ldr	r3, [pc, #48]	; (800c6e0 <prvInsertBlockIntoFreeList+0xb0>)
 800c6b0:	681a      	ldr	r2, [r3, #0]
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	601a      	str	r2, [r3, #0]
 800c6b6:	e003      	b.n	800c6c0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	681a      	ldr	r2, [r3, #0]
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c6c0:	68fa      	ldr	r2, [r7, #12]
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	429a      	cmp	r2, r3
 800c6c6:	d002      	beq.n	800c6ce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	687a      	ldr	r2, [r7, #4]
 800c6cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c6ce:	bf00      	nop
 800c6d0:	3714      	adds	r7, #20
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d8:	4770      	bx	lr
 800c6da:	bf00      	nop
 800c6dc:	200106bc 	.word	0x200106bc
 800c6e0:	200106c4 	.word	0x200106c4

0800c6e4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	490e      	ldr	r1, [pc, #56]	; (800c724 <MX_USB_HOST_Init+0x40>)
 800c6ec:	480e      	ldr	r0, [pc, #56]	; (800c728 <MX_USB_HOST_Init+0x44>)
 800c6ee:	f7fb fc17 	bl	8007f20 <USBH_Init>
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d001      	beq.n	800c6fc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c6f8:	f7f4 fc38 	bl	8000f6c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800c6fc:	490b      	ldr	r1, [pc, #44]	; (800c72c <MX_USB_HOST_Init+0x48>)
 800c6fe:	480a      	ldr	r0, [pc, #40]	; (800c728 <MX_USB_HOST_Init+0x44>)
 800c700:	f7fb fcc4 	bl	800808c <USBH_RegisterClass>
 800c704:	4603      	mov	r3, r0
 800c706:	2b00      	cmp	r3, #0
 800c708:	d001      	beq.n	800c70e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c70a:	f7f4 fc2f 	bl	8000f6c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800c70e:	4806      	ldr	r0, [pc, #24]	; (800c728 <MX_USB_HOST_Init+0x44>)
 800c710:	f7fb fd48 	bl	80081a4 <USBH_Start>
 800c714:	4603      	mov	r3, r0
 800c716:	2b00      	cmp	r3, #0
 800c718:	d001      	beq.n	800c71e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c71a:	f7f4 fc27 	bl	8000f6c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c71e:	bf00      	nop
 800c720:	bd80      	pop	{r7, pc}
 800c722:	bf00      	nop
 800c724:	0800c731 	.word	0x0800c731
 800c728:	200106dc 	.word	0x200106dc
 800c72c:	2000000c 	.word	0x2000000c

0800c730 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c730:	b480      	push	{r7}
 800c732:	b083      	sub	sp, #12
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
 800c738:	460b      	mov	r3, r1
 800c73a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c73c:	78fb      	ldrb	r3, [r7, #3]
 800c73e:	3b01      	subs	r3, #1
 800c740:	2b04      	cmp	r3, #4
 800c742:	d819      	bhi.n	800c778 <USBH_UserProcess+0x48>
 800c744:	a201      	add	r2, pc, #4	; (adr r2, 800c74c <USBH_UserProcess+0x1c>)
 800c746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c74a:	bf00      	nop
 800c74c:	0800c779 	.word	0x0800c779
 800c750:	0800c769 	.word	0x0800c769
 800c754:	0800c779 	.word	0x0800c779
 800c758:	0800c771 	.word	0x0800c771
 800c75c:	0800c761 	.word	0x0800c761
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c760:	4b09      	ldr	r3, [pc, #36]	; (800c788 <USBH_UserProcess+0x58>)
 800c762:	2203      	movs	r2, #3
 800c764:	701a      	strb	r2, [r3, #0]
  break;
 800c766:	e008      	b.n	800c77a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c768:	4b07      	ldr	r3, [pc, #28]	; (800c788 <USBH_UserProcess+0x58>)
 800c76a:	2202      	movs	r2, #2
 800c76c:	701a      	strb	r2, [r3, #0]
  break;
 800c76e:	e004      	b.n	800c77a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c770:	4b05      	ldr	r3, [pc, #20]	; (800c788 <USBH_UserProcess+0x58>)
 800c772:	2201      	movs	r2, #1
 800c774:	701a      	strb	r2, [r3, #0]
  break;
 800c776:	e000      	b.n	800c77a <USBH_UserProcess+0x4a>

  default:
  break;
 800c778:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c77a:	bf00      	nop
 800c77c:	370c      	adds	r7, #12
 800c77e:	46bd      	mov	sp, r7
 800c780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c784:	4770      	bx	lr
 800c786:	bf00      	nop
 800c788:	20010ac0 	.word	0x20010ac0

0800c78c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b08a      	sub	sp, #40	; 0x28
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c794:	f107 0314 	add.w	r3, r7, #20
 800c798:	2200      	movs	r2, #0
 800c79a:	601a      	str	r2, [r3, #0]
 800c79c:	605a      	str	r2, [r3, #4]
 800c79e:	609a      	str	r2, [r3, #8]
 800c7a0:	60da      	str	r2, [r3, #12]
 800c7a2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	4a24      	ldr	r2, [pc, #144]	; (800c83c <HAL_HCD_MspInit+0xb0>)
 800c7aa:	4293      	cmp	r3, r2
 800c7ac:	d141      	bne.n	800c832 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	613b      	str	r3, [r7, #16]
 800c7b2:	4b23      	ldr	r3, [pc, #140]	; (800c840 <HAL_HCD_MspInit+0xb4>)
 800c7b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7b6:	4a22      	ldr	r2, [pc, #136]	; (800c840 <HAL_HCD_MspInit+0xb4>)
 800c7b8:	f043 0302 	orr.w	r3, r3, #2
 800c7bc:	6313      	str	r3, [r2, #48]	; 0x30
 800c7be:	4b20      	ldr	r3, [pc, #128]	; (800c840 <HAL_HCD_MspInit+0xb4>)
 800c7c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7c2:	f003 0302 	and.w	r3, r3, #2
 800c7c6:	613b      	str	r3, [r7, #16]
 800c7c8:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800c7ca:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800c7ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c7d0:	2302      	movs	r3, #2
 800c7d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800c7dc:	230c      	movs	r3, #12
 800c7de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c7e0:	f107 0314 	add.w	r3, r7, #20
 800c7e4:	4619      	mov	r1, r3
 800c7e6:	4817      	ldr	r0, [pc, #92]	; (800c844 <HAL_HCD_MspInit+0xb8>)
 800c7e8:	f7f5 f928 	bl	8001a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800c7ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c7f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800c7fa:	f107 0314 	add.w	r3, r7, #20
 800c7fe:	4619      	mov	r1, r3
 800c800:	4810      	ldr	r0, [pc, #64]	; (800c844 <HAL_HCD_MspInit+0xb8>)
 800c802:	f7f5 f91b 	bl	8001a3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800c806:	2300      	movs	r3, #0
 800c808:	60fb      	str	r3, [r7, #12]
 800c80a:	4b0d      	ldr	r3, [pc, #52]	; (800c840 <HAL_HCD_MspInit+0xb4>)
 800c80c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c80e:	4a0c      	ldr	r2, [pc, #48]	; (800c840 <HAL_HCD_MspInit+0xb4>)
 800c810:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c814:	6313      	str	r3, [r2, #48]	; 0x30
 800c816:	4b0a      	ldr	r3, [pc, #40]	; (800c840 <HAL_HCD_MspInit+0xb4>)
 800c818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c81a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c81e:	60fb      	str	r3, [r7, #12]
 800c820:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800c822:	2200      	movs	r2, #0
 800c824:	2105      	movs	r1, #5
 800c826:	204d      	movs	r0, #77	; 0x4d
 800c828:	f7f4 ff3c 	bl	80016a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800c82c:	204d      	movs	r0, #77	; 0x4d
 800c82e:	f7f4 ff55 	bl	80016dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800c832:	bf00      	nop
 800c834:	3728      	adds	r7, #40	; 0x28
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}
 800c83a:	bf00      	nop
 800c83c:	40040000 	.word	0x40040000
 800c840:	40023800 	.word	0x40023800
 800c844:	40020400 	.word	0x40020400

0800c848 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b082      	sub	sp, #8
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c856:	4618      	mov	r0, r3
 800c858:	f7fc f95b 	bl	8008b12 <USBH_LL_IncTimer>
}
 800c85c:	bf00      	nop
 800c85e:	3708      	adds	r7, #8
 800c860:	46bd      	mov	sp, r7
 800c862:	bd80      	pop	{r7, pc}

0800c864 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b082      	sub	sp, #8
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c872:	4618      	mov	r0, r3
 800c874:	f7fc f99f 	bl	8008bb6 <USBH_LL_Connect>
}
 800c878:	bf00      	nop
 800c87a:	3708      	adds	r7, #8
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}

0800c880 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b082      	sub	sp, #8
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c88e:	4618      	mov	r0, r3
 800c890:	f7fc f9b4 	bl	8008bfc <USBH_LL_Disconnect>
}
 800c894:	bf00      	nop
 800c896:	3708      	adds	r7, #8
 800c898:	46bd      	mov	sp, r7
 800c89a:	bd80      	pop	{r7, pc}

0800c89c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b082      	sub	sp, #8
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
 800c8a4:	460b      	mov	r3, r1
 800c8a6:	70fb      	strb	r3, [r7, #3]
 800c8a8:	4613      	mov	r3, r2
 800c8aa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f7fc f9e9 	bl	8008c8a <USBH_LL_NotifyURBChange>
#endif
}
 800c8b8:	bf00      	nop
 800c8ba:	3708      	adds	r7, #8
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}

0800c8c0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b082      	sub	sp, #8
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	f7fc f949 	bl	8008b66 <USBH_LL_PortEnabled>
}
 800c8d4:	bf00      	nop
 800c8d6:	3708      	adds	r7, #8
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}

0800c8dc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b082      	sub	sp, #8
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	f7fc f955 	bl	8008b9a <USBH_LL_PortDisabled>
}
 800c8f0:	bf00      	nop
 800c8f2:	3708      	adds	r7, #8
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}

0800c8f8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b082      	sub	sp, #8
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c906:	2b00      	cmp	r3, #0
 800c908:	d132      	bne.n	800c970 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800c90a:	4a1c      	ldr	r2, [pc, #112]	; (800c97c <USBH_LL_Init+0x84>)
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	4a19      	ldr	r2, [pc, #100]	; (800c97c <USBH_LL_Init+0x84>)
 800c916:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800c91a:	4b18      	ldr	r3, [pc, #96]	; (800c97c <USBH_LL_Init+0x84>)
 800c91c:	4a18      	ldr	r2, [pc, #96]	; (800c980 <USBH_LL_Init+0x88>)
 800c91e:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800c920:	4b16      	ldr	r3, [pc, #88]	; (800c97c <USBH_LL_Init+0x84>)
 800c922:	220c      	movs	r2, #12
 800c924:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800c926:	4b15      	ldr	r3, [pc, #84]	; (800c97c <USBH_LL_Init+0x84>)
 800c928:	2201      	movs	r2, #1
 800c92a:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800c92c:	4b13      	ldr	r3, [pc, #76]	; (800c97c <USBH_LL_Init+0x84>)
 800c92e:	2200      	movs	r2, #0
 800c930:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800c932:	4b12      	ldr	r3, [pc, #72]	; (800c97c <USBH_LL_Init+0x84>)
 800c934:	2202      	movs	r2, #2
 800c936:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800c938:	4b10      	ldr	r3, [pc, #64]	; (800c97c <USBH_LL_Init+0x84>)
 800c93a:	2200      	movs	r2, #0
 800c93c:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800c93e:	4b0f      	ldr	r3, [pc, #60]	; (800c97c <USBH_LL_Init+0x84>)
 800c940:	2200      	movs	r2, #0
 800c942:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800c944:	4b0d      	ldr	r3, [pc, #52]	; (800c97c <USBH_LL_Init+0x84>)
 800c946:	2200      	movs	r2, #0
 800c948:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800c94a:	4b0c      	ldr	r3, [pc, #48]	; (800c97c <USBH_LL_Init+0x84>)
 800c94c:	2200      	movs	r2, #0
 800c94e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800c950:	480a      	ldr	r0, [pc, #40]	; (800c97c <USBH_LL_Init+0x84>)
 800c952:	f7f5 fa52 	bl	8001dfa <HAL_HCD_Init>
 800c956:	4603      	mov	r3, r0
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d001      	beq.n	800c960 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800c95c:	f7f4 fb06 	bl	8000f6c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800c960:	4806      	ldr	r0, [pc, #24]	; (800c97c <USBH_LL_Init+0x84>)
 800c962:	f7f5 fe36 	bl	80025d2 <HAL_HCD_GetCurrentFrame>
 800c966:	4603      	mov	r3, r0
 800c968:	4619      	mov	r1, r3
 800c96a:	6878      	ldr	r0, [r7, #4]
 800c96c:	f7fc f8c2 	bl	8008af4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c970:	2300      	movs	r3, #0
}
 800c972:	4618      	mov	r0, r3
 800c974:	3708      	adds	r7, #8
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}
 800c97a:	bf00      	nop
 800c97c:	20010ac4 	.word	0x20010ac4
 800c980:	40040000 	.word	0x40040000

0800c984 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b084      	sub	sp, #16
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c98c:	2300      	movs	r3, #0
 800c98e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c990:	2300      	movs	r3, #0
 800c992:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c99a:	4618      	mov	r0, r3
 800c99c:	f7f5 fda3 	bl	80024e6 <HAL_HCD_Start>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c9a4:	7bfb      	ldrb	r3, [r7, #15]
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f000 f95c 	bl	800cc64 <USBH_Get_USB_Status>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c9b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	3710      	adds	r7, #16
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}

0800c9ba <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c9ba:	b580      	push	{r7, lr}
 800c9bc:	b084      	sub	sp, #16
 800c9be:	af00      	add	r7, sp, #0
 800c9c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	f7f5 fdab 	bl	800252c <HAL_HCD_Stop>
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c9da:	7bfb      	ldrb	r3, [r7, #15]
 800c9dc:	4618      	mov	r0, r3
 800c9de:	f000 f941 	bl	800cc64 <USBH_Get_USB_Status>
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c9e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	3710      	adds	r7, #16
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}

0800c9f0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b084      	sub	sp, #16
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c9f8:	2301      	movs	r3, #1
 800c9fa:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ca02:	4618      	mov	r0, r3
 800ca04:	f7f5 fdf3 	bl	80025ee <HAL_HCD_GetCurrentSpeed>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	2b02      	cmp	r3, #2
 800ca0c:	d00c      	beq.n	800ca28 <USBH_LL_GetSpeed+0x38>
 800ca0e:	2b02      	cmp	r3, #2
 800ca10:	d80d      	bhi.n	800ca2e <USBH_LL_GetSpeed+0x3e>
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d002      	beq.n	800ca1c <USBH_LL_GetSpeed+0x2c>
 800ca16:	2b01      	cmp	r3, #1
 800ca18:	d003      	beq.n	800ca22 <USBH_LL_GetSpeed+0x32>
 800ca1a:	e008      	b.n	800ca2e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	73fb      	strb	r3, [r7, #15]
    break;
 800ca20:	e008      	b.n	800ca34 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ca22:	2301      	movs	r3, #1
 800ca24:	73fb      	strb	r3, [r7, #15]
    break;
 800ca26:	e005      	b.n	800ca34 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ca28:	2302      	movs	r3, #2
 800ca2a:	73fb      	strb	r3, [r7, #15]
    break;
 800ca2c:	e002      	b.n	800ca34 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ca2e:	2301      	movs	r3, #1
 800ca30:	73fb      	strb	r3, [r7, #15]
    break;
 800ca32:	bf00      	nop
  }
  return  speed;
 800ca34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca36:	4618      	mov	r0, r3
 800ca38:	3710      	adds	r7, #16
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}

0800ca3e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ca3e:	b580      	push	{r7, lr}
 800ca40:	b084      	sub	sp, #16
 800ca42:	af00      	add	r7, sp, #0
 800ca44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca46:	2300      	movs	r3, #0
 800ca48:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ca54:	4618      	mov	r0, r3
 800ca56:	f7f5 fd86 	bl	8002566 <HAL_HCD_ResetPort>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ca5e:	7bfb      	ldrb	r3, [r7, #15]
 800ca60:	4618      	mov	r0, r3
 800ca62:	f000 f8ff 	bl	800cc64 <USBH_Get_USB_Status>
 800ca66:	4603      	mov	r3, r0
 800ca68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca6a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	3710      	adds	r7, #16
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}

0800ca74 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b082      	sub	sp, #8
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
 800ca7c:	460b      	mov	r3, r1
 800ca7e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ca86:	78fa      	ldrb	r2, [r7, #3]
 800ca88:	4611      	mov	r1, r2
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	f7f5 fd8d 	bl	80025aa <HAL_HCD_HC_GetXferCount>
 800ca90:	4603      	mov	r3, r0
}
 800ca92:	4618      	mov	r0, r3
 800ca94:	3708      	adds	r7, #8
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bd80      	pop	{r7, pc}

0800ca9a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ca9a:	b590      	push	{r4, r7, lr}
 800ca9c:	b089      	sub	sp, #36	; 0x24
 800ca9e:	af04      	add	r7, sp, #16
 800caa0:	6078      	str	r0, [r7, #4]
 800caa2:	4608      	mov	r0, r1
 800caa4:	4611      	mov	r1, r2
 800caa6:	461a      	mov	r2, r3
 800caa8:	4603      	mov	r3, r0
 800caaa:	70fb      	strb	r3, [r7, #3]
 800caac:	460b      	mov	r3, r1
 800caae:	70bb      	strb	r3, [r7, #2]
 800cab0:	4613      	mov	r3, r2
 800cab2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cab4:	2300      	movs	r3, #0
 800cab6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cab8:	2300      	movs	r3, #0
 800caba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800cac2:	787c      	ldrb	r4, [r7, #1]
 800cac4:	78ba      	ldrb	r2, [r7, #2]
 800cac6:	78f9      	ldrb	r1, [r7, #3]
 800cac8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800caca:	9302      	str	r3, [sp, #8]
 800cacc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cad0:	9301      	str	r3, [sp, #4]
 800cad2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cad6:	9300      	str	r3, [sp, #0]
 800cad8:	4623      	mov	r3, r4
 800cada:	f7f5 f9f0 	bl	8001ebe <HAL_HCD_HC_Init>
 800cade:	4603      	mov	r3, r0
 800cae0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800cae2:	7bfb      	ldrb	r3, [r7, #15]
 800cae4:	4618      	mov	r0, r3
 800cae6:	f000 f8bd 	bl	800cc64 <USBH_Get_USB_Status>
 800caea:	4603      	mov	r3, r0
 800caec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800caee:	7bbb      	ldrb	r3, [r7, #14]
}
 800caf0:	4618      	mov	r0, r3
 800caf2:	3714      	adds	r7, #20
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bd90      	pop	{r4, r7, pc}

0800caf8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b084      	sub	sp, #16
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
 800cb00:	460b      	mov	r3, r1
 800cb02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb04:	2300      	movs	r3, #0
 800cb06:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cb08:	2300      	movs	r3, #0
 800cb0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cb12:	78fa      	ldrb	r2, [r7, #3]
 800cb14:	4611      	mov	r1, r2
 800cb16:	4618      	mov	r0, r3
 800cb18:	f7f5 fa60 	bl	8001fdc <HAL_HCD_HC_Halt>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cb20:	7bfb      	ldrb	r3, [r7, #15]
 800cb22:	4618      	mov	r0, r3
 800cb24:	f000 f89e 	bl	800cc64 <USBH_Get_USB_Status>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb2c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	3710      	adds	r7, #16
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}

0800cb36 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800cb36:	b590      	push	{r4, r7, lr}
 800cb38:	b089      	sub	sp, #36	; 0x24
 800cb3a:	af04      	add	r7, sp, #16
 800cb3c:	6078      	str	r0, [r7, #4]
 800cb3e:	4608      	mov	r0, r1
 800cb40:	4611      	mov	r1, r2
 800cb42:	461a      	mov	r2, r3
 800cb44:	4603      	mov	r3, r0
 800cb46:	70fb      	strb	r3, [r7, #3]
 800cb48:	460b      	mov	r3, r1
 800cb4a:	70bb      	strb	r3, [r7, #2]
 800cb4c:	4613      	mov	r3, r2
 800cb4e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb50:	2300      	movs	r3, #0
 800cb52:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cb54:	2300      	movs	r3, #0
 800cb56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800cb5e:	787c      	ldrb	r4, [r7, #1]
 800cb60:	78ba      	ldrb	r2, [r7, #2]
 800cb62:	78f9      	ldrb	r1, [r7, #3]
 800cb64:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cb68:	9303      	str	r3, [sp, #12]
 800cb6a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cb6c:	9302      	str	r3, [sp, #8]
 800cb6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb70:	9301      	str	r3, [sp, #4]
 800cb72:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cb76:	9300      	str	r3, [sp, #0]
 800cb78:	4623      	mov	r3, r4
 800cb7a:	f7f5 fa53 	bl	8002024 <HAL_HCD_HC_SubmitRequest>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800cb82:	7bfb      	ldrb	r3, [r7, #15]
 800cb84:	4618      	mov	r0, r3
 800cb86:	f000 f86d 	bl	800cc64 <USBH_Get_USB_Status>
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb8e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb90:	4618      	mov	r0, r3
 800cb92:	3714      	adds	r7, #20
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd90      	pop	{r4, r7, pc}

0800cb98 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b082      	sub	sp, #8
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
 800cba0:	460b      	mov	r3, r1
 800cba2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cbaa:	78fa      	ldrb	r2, [r7, #3]
 800cbac:	4611      	mov	r1, r2
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f7f5 fce7 	bl	8002582 <HAL_HCD_HC_GetURBState>
 800cbb4:	4603      	mov	r3, r0
}
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	3708      	adds	r7, #8
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd80      	pop	{r7, pc}

0800cbbe <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800cbbe:	b580      	push	{r7, lr}
 800cbc0:	b082      	sub	sp, #8
 800cbc2:	af00      	add	r7, sp, #0
 800cbc4:	6078      	str	r0, [r7, #4]
 800cbc6:	460b      	mov	r3, r1
 800cbc8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d103      	bne.n	800cbdc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800cbd4:	78fb      	ldrb	r3, [r7, #3]
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f000 f870 	bl	800ccbc <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800cbdc:	20c8      	movs	r0, #200	; 0xc8
 800cbde:	f7f4 fc85 	bl	80014ec <HAL_Delay>
  return USBH_OK;
 800cbe2:	2300      	movs	r3, #0
}
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	3708      	adds	r7, #8
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}

0800cbec <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800cbec:	b480      	push	{r7}
 800cbee:	b085      	sub	sp, #20
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
 800cbf4:	460b      	mov	r3, r1
 800cbf6:	70fb      	strb	r3, [r7, #3]
 800cbf8:	4613      	mov	r3, r2
 800cbfa:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cc02:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800cc04:	78fb      	ldrb	r3, [r7, #3]
 800cc06:	68fa      	ldr	r2, [r7, #12]
 800cc08:	212c      	movs	r1, #44	; 0x2c
 800cc0a:	fb01 f303 	mul.w	r3, r1, r3
 800cc0e:	4413      	add	r3, r2
 800cc10:	333b      	adds	r3, #59	; 0x3b
 800cc12:	781b      	ldrb	r3, [r3, #0]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d009      	beq.n	800cc2c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800cc18:	78fb      	ldrb	r3, [r7, #3]
 800cc1a:	68fa      	ldr	r2, [r7, #12]
 800cc1c:	212c      	movs	r1, #44	; 0x2c
 800cc1e:	fb01 f303 	mul.w	r3, r1, r3
 800cc22:	4413      	add	r3, r2
 800cc24:	3354      	adds	r3, #84	; 0x54
 800cc26:	78ba      	ldrb	r2, [r7, #2]
 800cc28:	701a      	strb	r2, [r3, #0]
 800cc2a:	e008      	b.n	800cc3e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800cc2c:	78fb      	ldrb	r3, [r7, #3]
 800cc2e:	68fa      	ldr	r2, [r7, #12]
 800cc30:	212c      	movs	r1, #44	; 0x2c
 800cc32:	fb01 f303 	mul.w	r3, r1, r3
 800cc36:	4413      	add	r3, r2
 800cc38:	3355      	adds	r3, #85	; 0x55
 800cc3a:	78ba      	ldrb	r2, [r7, #2]
 800cc3c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800cc3e:	2300      	movs	r3, #0
}
 800cc40:	4618      	mov	r0, r3
 800cc42:	3714      	adds	r7, #20
 800cc44:	46bd      	mov	sp, r7
 800cc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4a:	4770      	bx	lr

0800cc4c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b082      	sub	sp, #8
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800cc54:	6878      	ldr	r0, [r7, #4]
 800cc56:	f7f4 fc49 	bl	80014ec <HAL_Delay>
}
 800cc5a:	bf00      	nop
 800cc5c:	3708      	adds	r7, #8
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd80      	pop	{r7, pc}
	...

0800cc64 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cc64:	b480      	push	{r7}
 800cc66:	b085      	sub	sp, #20
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cc72:	79fb      	ldrb	r3, [r7, #7]
 800cc74:	2b03      	cmp	r3, #3
 800cc76:	d817      	bhi.n	800cca8 <USBH_Get_USB_Status+0x44>
 800cc78:	a201      	add	r2, pc, #4	; (adr r2, 800cc80 <USBH_Get_USB_Status+0x1c>)
 800cc7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc7e:	bf00      	nop
 800cc80:	0800cc91 	.word	0x0800cc91
 800cc84:	0800cc97 	.word	0x0800cc97
 800cc88:	0800cc9d 	.word	0x0800cc9d
 800cc8c:	0800cca3 	.word	0x0800cca3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800cc90:	2300      	movs	r3, #0
 800cc92:	73fb      	strb	r3, [r7, #15]
    break;
 800cc94:	e00b      	b.n	800ccae <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800cc96:	2302      	movs	r3, #2
 800cc98:	73fb      	strb	r3, [r7, #15]
    break;
 800cc9a:	e008      	b.n	800ccae <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800cc9c:	2301      	movs	r3, #1
 800cc9e:	73fb      	strb	r3, [r7, #15]
    break;
 800cca0:	e005      	b.n	800ccae <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800cca2:	2302      	movs	r3, #2
 800cca4:	73fb      	strb	r3, [r7, #15]
    break;
 800cca6:	e002      	b.n	800ccae <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800cca8:	2302      	movs	r3, #2
 800ccaa:	73fb      	strb	r3, [r7, #15]
    break;
 800ccac:	bf00      	nop
  }
  return usb_status;
 800ccae:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	3714      	adds	r7, #20
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccba:	4770      	bx	lr

0800ccbc <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b084      	sub	sp, #16
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ccc6:	79fb      	ldrb	r3, [r7, #7]
 800ccc8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800ccca:	79fb      	ldrb	r3, [r7, #7]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d102      	bne.n	800ccd6 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	73fb      	strb	r3, [r7, #15]
 800ccd4:	e001      	b.n	800ccda <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800ccda:	7bfb      	ldrb	r3, [r7, #15]
 800ccdc:	461a      	mov	r2, r3
 800ccde:	2110      	movs	r1, #16
 800cce0:	4803      	ldr	r0, [pc, #12]	; (800ccf0 <MX_DriverVbusHS+0x34>)
 800cce2:	f7f5 f857 	bl	8001d94 <HAL_GPIO_WritePin>
}
 800cce6:	bf00      	nop
 800cce8:	3710      	adds	r7, #16
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bd80      	pop	{r7, pc}
 800ccee:	bf00      	nop
 800ccf0:	40020800 	.word	0x40020800

0800ccf4 <malloc>:
 800ccf4:	4b02      	ldr	r3, [pc, #8]	; (800cd00 <malloc+0xc>)
 800ccf6:	4601      	mov	r1, r0
 800ccf8:	6818      	ldr	r0, [r3, #0]
 800ccfa:	f000 b82b 	b.w	800cd54 <_malloc_r>
 800ccfe:	bf00      	nop
 800cd00:	20000088 	.word	0x20000088

0800cd04 <free>:
 800cd04:	4b02      	ldr	r3, [pc, #8]	; (800cd10 <free+0xc>)
 800cd06:	4601      	mov	r1, r0
 800cd08:	6818      	ldr	r0, [r3, #0]
 800cd0a:	f000 bba7 	b.w	800d45c <_free_r>
 800cd0e:	bf00      	nop
 800cd10:	20000088 	.word	0x20000088

0800cd14 <sbrk_aligned>:
 800cd14:	b570      	push	{r4, r5, r6, lr}
 800cd16:	4e0e      	ldr	r6, [pc, #56]	; (800cd50 <sbrk_aligned+0x3c>)
 800cd18:	460c      	mov	r4, r1
 800cd1a:	6831      	ldr	r1, [r6, #0]
 800cd1c:	4605      	mov	r5, r0
 800cd1e:	b911      	cbnz	r1, 800cd26 <sbrk_aligned+0x12>
 800cd20:	f000 fb3e 	bl	800d3a0 <_sbrk_r>
 800cd24:	6030      	str	r0, [r6, #0]
 800cd26:	4621      	mov	r1, r4
 800cd28:	4628      	mov	r0, r5
 800cd2a:	f000 fb39 	bl	800d3a0 <_sbrk_r>
 800cd2e:	1c43      	adds	r3, r0, #1
 800cd30:	d00a      	beq.n	800cd48 <sbrk_aligned+0x34>
 800cd32:	1cc4      	adds	r4, r0, #3
 800cd34:	f024 0403 	bic.w	r4, r4, #3
 800cd38:	42a0      	cmp	r0, r4
 800cd3a:	d007      	beq.n	800cd4c <sbrk_aligned+0x38>
 800cd3c:	1a21      	subs	r1, r4, r0
 800cd3e:	4628      	mov	r0, r5
 800cd40:	f000 fb2e 	bl	800d3a0 <_sbrk_r>
 800cd44:	3001      	adds	r0, #1
 800cd46:	d101      	bne.n	800cd4c <sbrk_aligned+0x38>
 800cd48:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800cd4c:	4620      	mov	r0, r4
 800cd4e:	bd70      	pop	{r4, r5, r6, pc}
 800cd50:	20010dcc 	.word	0x20010dcc

0800cd54 <_malloc_r>:
 800cd54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd58:	1ccd      	adds	r5, r1, #3
 800cd5a:	f025 0503 	bic.w	r5, r5, #3
 800cd5e:	3508      	adds	r5, #8
 800cd60:	2d0c      	cmp	r5, #12
 800cd62:	bf38      	it	cc
 800cd64:	250c      	movcc	r5, #12
 800cd66:	2d00      	cmp	r5, #0
 800cd68:	4607      	mov	r7, r0
 800cd6a:	db01      	blt.n	800cd70 <_malloc_r+0x1c>
 800cd6c:	42a9      	cmp	r1, r5
 800cd6e:	d905      	bls.n	800cd7c <_malloc_r+0x28>
 800cd70:	230c      	movs	r3, #12
 800cd72:	603b      	str	r3, [r7, #0]
 800cd74:	2600      	movs	r6, #0
 800cd76:	4630      	mov	r0, r6
 800cd78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd7c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ce50 <_malloc_r+0xfc>
 800cd80:	f000 f868 	bl	800ce54 <__malloc_lock>
 800cd84:	f8d8 3000 	ldr.w	r3, [r8]
 800cd88:	461c      	mov	r4, r3
 800cd8a:	bb5c      	cbnz	r4, 800cde4 <_malloc_r+0x90>
 800cd8c:	4629      	mov	r1, r5
 800cd8e:	4638      	mov	r0, r7
 800cd90:	f7ff ffc0 	bl	800cd14 <sbrk_aligned>
 800cd94:	1c43      	adds	r3, r0, #1
 800cd96:	4604      	mov	r4, r0
 800cd98:	d155      	bne.n	800ce46 <_malloc_r+0xf2>
 800cd9a:	f8d8 4000 	ldr.w	r4, [r8]
 800cd9e:	4626      	mov	r6, r4
 800cda0:	2e00      	cmp	r6, #0
 800cda2:	d145      	bne.n	800ce30 <_malloc_r+0xdc>
 800cda4:	2c00      	cmp	r4, #0
 800cda6:	d048      	beq.n	800ce3a <_malloc_r+0xe6>
 800cda8:	6823      	ldr	r3, [r4, #0]
 800cdaa:	4631      	mov	r1, r6
 800cdac:	4638      	mov	r0, r7
 800cdae:	eb04 0903 	add.w	r9, r4, r3
 800cdb2:	f000 faf5 	bl	800d3a0 <_sbrk_r>
 800cdb6:	4581      	cmp	r9, r0
 800cdb8:	d13f      	bne.n	800ce3a <_malloc_r+0xe6>
 800cdba:	6821      	ldr	r1, [r4, #0]
 800cdbc:	1a6d      	subs	r5, r5, r1
 800cdbe:	4629      	mov	r1, r5
 800cdc0:	4638      	mov	r0, r7
 800cdc2:	f7ff ffa7 	bl	800cd14 <sbrk_aligned>
 800cdc6:	3001      	adds	r0, #1
 800cdc8:	d037      	beq.n	800ce3a <_malloc_r+0xe6>
 800cdca:	6823      	ldr	r3, [r4, #0]
 800cdcc:	442b      	add	r3, r5
 800cdce:	6023      	str	r3, [r4, #0]
 800cdd0:	f8d8 3000 	ldr.w	r3, [r8]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d038      	beq.n	800ce4a <_malloc_r+0xf6>
 800cdd8:	685a      	ldr	r2, [r3, #4]
 800cdda:	42a2      	cmp	r2, r4
 800cddc:	d12b      	bne.n	800ce36 <_malloc_r+0xe2>
 800cdde:	2200      	movs	r2, #0
 800cde0:	605a      	str	r2, [r3, #4]
 800cde2:	e00f      	b.n	800ce04 <_malloc_r+0xb0>
 800cde4:	6822      	ldr	r2, [r4, #0]
 800cde6:	1b52      	subs	r2, r2, r5
 800cde8:	d41f      	bmi.n	800ce2a <_malloc_r+0xd6>
 800cdea:	2a0b      	cmp	r2, #11
 800cdec:	d917      	bls.n	800ce1e <_malloc_r+0xca>
 800cdee:	1961      	adds	r1, r4, r5
 800cdf0:	42a3      	cmp	r3, r4
 800cdf2:	6025      	str	r5, [r4, #0]
 800cdf4:	bf18      	it	ne
 800cdf6:	6059      	strne	r1, [r3, #4]
 800cdf8:	6863      	ldr	r3, [r4, #4]
 800cdfa:	bf08      	it	eq
 800cdfc:	f8c8 1000 	streq.w	r1, [r8]
 800ce00:	5162      	str	r2, [r4, r5]
 800ce02:	604b      	str	r3, [r1, #4]
 800ce04:	4638      	mov	r0, r7
 800ce06:	f104 060b 	add.w	r6, r4, #11
 800ce0a:	f000 f829 	bl	800ce60 <__malloc_unlock>
 800ce0e:	f026 0607 	bic.w	r6, r6, #7
 800ce12:	1d23      	adds	r3, r4, #4
 800ce14:	1af2      	subs	r2, r6, r3
 800ce16:	d0ae      	beq.n	800cd76 <_malloc_r+0x22>
 800ce18:	1b9b      	subs	r3, r3, r6
 800ce1a:	50a3      	str	r3, [r4, r2]
 800ce1c:	e7ab      	b.n	800cd76 <_malloc_r+0x22>
 800ce1e:	42a3      	cmp	r3, r4
 800ce20:	6862      	ldr	r2, [r4, #4]
 800ce22:	d1dd      	bne.n	800cde0 <_malloc_r+0x8c>
 800ce24:	f8c8 2000 	str.w	r2, [r8]
 800ce28:	e7ec      	b.n	800ce04 <_malloc_r+0xb0>
 800ce2a:	4623      	mov	r3, r4
 800ce2c:	6864      	ldr	r4, [r4, #4]
 800ce2e:	e7ac      	b.n	800cd8a <_malloc_r+0x36>
 800ce30:	4634      	mov	r4, r6
 800ce32:	6876      	ldr	r6, [r6, #4]
 800ce34:	e7b4      	b.n	800cda0 <_malloc_r+0x4c>
 800ce36:	4613      	mov	r3, r2
 800ce38:	e7cc      	b.n	800cdd4 <_malloc_r+0x80>
 800ce3a:	230c      	movs	r3, #12
 800ce3c:	603b      	str	r3, [r7, #0]
 800ce3e:	4638      	mov	r0, r7
 800ce40:	f000 f80e 	bl	800ce60 <__malloc_unlock>
 800ce44:	e797      	b.n	800cd76 <_malloc_r+0x22>
 800ce46:	6025      	str	r5, [r4, #0]
 800ce48:	e7dc      	b.n	800ce04 <_malloc_r+0xb0>
 800ce4a:	605b      	str	r3, [r3, #4]
 800ce4c:	deff      	udf	#255	; 0xff
 800ce4e:	bf00      	nop
 800ce50:	20010dc8 	.word	0x20010dc8

0800ce54 <__malloc_lock>:
 800ce54:	4801      	ldr	r0, [pc, #4]	; (800ce5c <__malloc_lock+0x8>)
 800ce56:	f000 baf0 	b.w	800d43a <__retarget_lock_acquire_recursive>
 800ce5a:	bf00      	nop
 800ce5c:	20010f10 	.word	0x20010f10

0800ce60 <__malloc_unlock>:
 800ce60:	4801      	ldr	r0, [pc, #4]	; (800ce68 <__malloc_unlock+0x8>)
 800ce62:	f000 baeb 	b.w	800d43c <__retarget_lock_release_recursive>
 800ce66:	bf00      	nop
 800ce68:	20010f10 	.word	0x20010f10

0800ce6c <std>:
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	b510      	push	{r4, lr}
 800ce70:	4604      	mov	r4, r0
 800ce72:	e9c0 3300 	strd	r3, r3, [r0]
 800ce76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ce7a:	6083      	str	r3, [r0, #8]
 800ce7c:	8181      	strh	r1, [r0, #12]
 800ce7e:	6643      	str	r3, [r0, #100]	; 0x64
 800ce80:	81c2      	strh	r2, [r0, #14]
 800ce82:	6183      	str	r3, [r0, #24]
 800ce84:	4619      	mov	r1, r3
 800ce86:	2208      	movs	r2, #8
 800ce88:	305c      	adds	r0, #92	; 0x5c
 800ce8a:	f000 f9f7 	bl	800d27c <memset>
 800ce8e:	4b0d      	ldr	r3, [pc, #52]	; (800cec4 <std+0x58>)
 800ce90:	6263      	str	r3, [r4, #36]	; 0x24
 800ce92:	4b0d      	ldr	r3, [pc, #52]	; (800cec8 <std+0x5c>)
 800ce94:	62a3      	str	r3, [r4, #40]	; 0x28
 800ce96:	4b0d      	ldr	r3, [pc, #52]	; (800cecc <std+0x60>)
 800ce98:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ce9a:	4b0d      	ldr	r3, [pc, #52]	; (800ced0 <std+0x64>)
 800ce9c:	6323      	str	r3, [r4, #48]	; 0x30
 800ce9e:	4b0d      	ldr	r3, [pc, #52]	; (800ced4 <std+0x68>)
 800cea0:	6224      	str	r4, [r4, #32]
 800cea2:	429c      	cmp	r4, r3
 800cea4:	d006      	beq.n	800ceb4 <std+0x48>
 800cea6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ceaa:	4294      	cmp	r4, r2
 800ceac:	d002      	beq.n	800ceb4 <std+0x48>
 800ceae:	33d0      	adds	r3, #208	; 0xd0
 800ceb0:	429c      	cmp	r4, r3
 800ceb2:	d105      	bne.n	800cec0 <std+0x54>
 800ceb4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ceb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cebc:	f000 babc 	b.w	800d438 <__retarget_lock_init_recursive>
 800cec0:	bd10      	pop	{r4, pc}
 800cec2:	bf00      	nop
 800cec4:	0800d0cd 	.word	0x0800d0cd
 800cec8:	0800d0ef 	.word	0x0800d0ef
 800cecc:	0800d127 	.word	0x0800d127
 800ced0:	0800d14b 	.word	0x0800d14b
 800ced4:	20010dd0 	.word	0x20010dd0

0800ced8 <stdio_exit_handler>:
 800ced8:	4a02      	ldr	r2, [pc, #8]	; (800cee4 <stdio_exit_handler+0xc>)
 800ceda:	4903      	ldr	r1, [pc, #12]	; (800cee8 <stdio_exit_handler+0x10>)
 800cedc:	4803      	ldr	r0, [pc, #12]	; (800ceec <stdio_exit_handler+0x14>)
 800cede:	f000 b869 	b.w	800cfb4 <_fwalk_sglue>
 800cee2:	bf00      	nop
 800cee4:	20000030 	.word	0x20000030
 800cee8:	0800dba9 	.word	0x0800dba9
 800ceec:	2000003c 	.word	0x2000003c

0800cef0 <cleanup_stdio>:
 800cef0:	6841      	ldr	r1, [r0, #4]
 800cef2:	4b0c      	ldr	r3, [pc, #48]	; (800cf24 <cleanup_stdio+0x34>)
 800cef4:	4299      	cmp	r1, r3
 800cef6:	b510      	push	{r4, lr}
 800cef8:	4604      	mov	r4, r0
 800cefa:	d001      	beq.n	800cf00 <cleanup_stdio+0x10>
 800cefc:	f000 fe54 	bl	800dba8 <_fflush_r>
 800cf00:	68a1      	ldr	r1, [r4, #8]
 800cf02:	4b09      	ldr	r3, [pc, #36]	; (800cf28 <cleanup_stdio+0x38>)
 800cf04:	4299      	cmp	r1, r3
 800cf06:	d002      	beq.n	800cf0e <cleanup_stdio+0x1e>
 800cf08:	4620      	mov	r0, r4
 800cf0a:	f000 fe4d 	bl	800dba8 <_fflush_r>
 800cf0e:	68e1      	ldr	r1, [r4, #12]
 800cf10:	4b06      	ldr	r3, [pc, #24]	; (800cf2c <cleanup_stdio+0x3c>)
 800cf12:	4299      	cmp	r1, r3
 800cf14:	d004      	beq.n	800cf20 <cleanup_stdio+0x30>
 800cf16:	4620      	mov	r0, r4
 800cf18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf1c:	f000 be44 	b.w	800dba8 <_fflush_r>
 800cf20:	bd10      	pop	{r4, pc}
 800cf22:	bf00      	nop
 800cf24:	20010dd0 	.word	0x20010dd0
 800cf28:	20010e38 	.word	0x20010e38
 800cf2c:	20010ea0 	.word	0x20010ea0

0800cf30 <global_stdio_init.part.0>:
 800cf30:	b510      	push	{r4, lr}
 800cf32:	4b0b      	ldr	r3, [pc, #44]	; (800cf60 <global_stdio_init.part.0+0x30>)
 800cf34:	4c0b      	ldr	r4, [pc, #44]	; (800cf64 <global_stdio_init.part.0+0x34>)
 800cf36:	4a0c      	ldr	r2, [pc, #48]	; (800cf68 <global_stdio_init.part.0+0x38>)
 800cf38:	601a      	str	r2, [r3, #0]
 800cf3a:	4620      	mov	r0, r4
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	2104      	movs	r1, #4
 800cf40:	f7ff ff94 	bl	800ce6c <std>
 800cf44:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800cf48:	2201      	movs	r2, #1
 800cf4a:	2109      	movs	r1, #9
 800cf4c:	f7ff ff8e 	bl	800ce6c <std>
 800cf50:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800cf54:	2202      	movs	r2, #2
 800cf56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf5a:	2112      	movs	r1, #18
 800cf5c:	f7ff bf86 	b.w	800ce6c <std>
 800cf60:	20010f08 	.word	0x20010f08
 800cf64:	20010dd0 	.word	0x20010dd0
 800cf68:	0800ced9 	.word	0x0800ced9

0800cf6c <__sfp_lock_acquire>:
 800cf6c:	4801      	ldr	r0, [pc, #4]	; (800cf74 <__sfp_lock_acquire+0x8>)
 800cf6e:	f000 ba64 	b.w	800d43a <__retarget_lock_acquire_recursive>
 800cf72:	bf00      	nop
 800cf74:	20010f11 	.word	0x20010f11

0800cf78 <__sfp_lock_release>:
 800cf78:	4801      	ldr	r0, [pc, #4]	; (800cf80 <__sfp_lock_release+0x8>)
 800cf7a:	f000 ba5f 	b.w	800d43c <__retarget_lock_release_recursive>
 800cf7e:	bf00      	nop
 800cf80:	20010f11 	.word	0x20010f11

0800cf84 <__sinit>:
 800cf84:	b510      	push	{r4, lr}
 800cf86:	4604      	mov	r4, r0
 800cf88:	f7ff fff0 	bl	800cf6c <__sfp_lock_acquire>
 800cf8c:	6a23      	ldr	r3, [r4, #32]
 800cf8e:	b11b      	cbz	r3, 800cf98 <__sinit+0x14>
 800cf90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf94:	f7ff bff0 	b.w	800cf78 <__sfp_lock_release>
 800cf98:	4b04      	ldr	r3, [pc, #16]	; (800cfac <__sinit+0x28>)
 800cf9a:	6223      	str	r3, [r4, #32]
 800cf9c:	4b04      	ldr	r3, [pc, #16]	; (800cfb0 <__sinit+0x2c>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d1f5      	bne.n	800cf90 <__sinit+0xc>
 800cfa4:	f7ff ffc4 	bl	800cf30 <global_stdio_init.part.0>
 800cfa8:	e7f2      	b.n	800cf90 <__sinit+0xc>
 800cfaa:	bf00      	nop
 800cfac:	0800cef1 	.word	0x0800cef1
 800cfb0:	20010f08 	.word	0x20010f08

0800cfb4 <_fwalk_sglue>:
 800cfb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfb8:	4607      	mov	r7, r0
 800cfba:	4688      	mov	r8, r1
 800cfbc:	4614      	mov	r4, r2
 800cfbe:	2600      	movs	r6, #0
 800cfc0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cfc4:	f1b9 0901 	subs.w	r9, r9, #1
 800cfc8:	d505      	bpl.n	800cfd6 <_fwalk_sglue+0x22>
 800cfca:	6824      	ldr	r4, [r4, #0]
 800cfcc:	2c00      	cmp	r4, #0
 800cfce:	d1f7      	bne.n	800cfc0 <_fwalk_sglue+0xc>
 800cfd0:	4630      	mov	r0, r6
 800cfd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfd6:	89ab      	ldrh	r3, [r5, #12]
 800cfd8:	2b01      	cmp	r3, #1
 800cfda:	d907      	bls.n	800cfec <_fwalk_sglue+0x38>
 800cfdc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cfe0:	3301      	adds	r3, #1
 800cfe2:	d003      	beq.n	800cfec <_fwalk_sglue+0x38>
 800cfe4:	4629      	mov	r1, r5
 800cfe6:	4638      	mov	r0, r7
 800cfe8:	47c0      	blx	r8
 800cfea:	4306      	orrs	r6, r0
 800cfec:	3568      	adds	r5, #104	; 0x68
 800cfee:	e7e9      	b.n	800cfc4 <_fwalk_sglue+0x10>

0800cff0 <iprintf>:
 800cff0:	b40f      	push	{r0, r1, r2, r3}
 800cff2:	b507      	push	{r0, r1, r2, lr}
 800cff4:	4906      	ldr	r1, [pc, #24]	; (800d010 <iprintf+0x20>)
 800cff6:	ab04      	add	r3, sp, #16
 800cff8:	6808      	ldr	r0, [r1, #0]
 800cffa:	f853 2b04 	ldr.w	r2, [r3], #4
 800cffe:	6881      	ldr	r1, [r0, #8]
 800d000:	9301      	str	r3, [sp, #4]
 800d002:	f000 faa1 	bl	800d548 <_vfiprintf_r>
 800d006:	b003      	add	sp, #12
 800d008:	f85d eb04 	ldr.w	lr, [sp], #4
 800d00c:	b004      	add	sp, #16
 800d00e:	4770      	bx	lr
 800d010:	20000088 	.word	0x20000088

0800d014 <_puts_r>:
 800d014:	6a03      	ldr	r3, [r0, #32]
 800d016:	b570      	push	{r4, r5, r6, lr}
 800d018:	6884      	ldr	r4, [r0, #8]
 800d01a:	4605      	mov	r5, r0
 800d01c:	460e      	mov	r6, r1
 800d01e:	b90b      	cbnz	r3, 800d024 <_puts_r+0x10>
 800d020:	f7ff ffb0 	bl	800cf84 <__sinit>
 800d024:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d026:	07db      	lsls	r3, r3, #31
 800d028:	d405      	bmi.n	800d036 <_puts_r+0x22>
 800d02a:	89a3      	ldrh	r3, [r4, #12]
 800d02c:	0598      	lsls	r0, r3, #22
 800d02e:	d402      	bmi.n	800d036 <_puts_r+0x22>
 800d030:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d032:	f000 fa02 	bl	800d43a <__retarget_lock_acquire_recursive>
 800d036:	89a3      	ldrh	r3, [r4, #12]
 800d038:	0719      	lsls	r1, r3, #28
 800d03a:	d513      	bpl.n	800d064 <_puts_r+0x50>
 800d03c:	6923      	ldr	r3, [r4, #16]
 800d03e:	b18b      	cbz	r3, 800d064 <_puts_r+0x50>
 800d040:	3e01      	subs	r6, #1
 800d042:	68a3      	ldr	r3, [r4, #8]
 800d044:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d048:	3b01      	subs	r3, #1
 800d04a:	60a3      	str	r3, [r4, #8]
 800d04c:	b9e9      	cbnz	r1, 800d08a <_puts_r+0x76>
 800d04e:	2b00      	cmp	r3, #0
 800d050:	da2e      	bge.n	800d0b0 <_puts_r+0x9c>
 800d052:	4622      	mov	r2, r4
 800d054:	210a      	movs	r1, #10
 800d056:	4628      	mov	r0, r5
 800d058:	f000 f87b 	bl	800d152 <__swbuf_r>
 800d05c:	3001      	adds	r0, #1
 800d05e:	d007      	beq.n	800d070 <_puts_r+0x5c>
 800d060:	250a      	movs	r5, #10
 800d062:	e007      	b.n	800d074 <_puts_r+0x60>
 800d064:	4621      	mov	r1, r4
 800d066:	4628      	mov	r0, r5
 800d068:	f000 f8b0 	bl	800d1cc <__swsetup_r>
 800d06c:	2800      	cmp	r0, #0
 800d06e:	d0e7      	beq.n	800d040 <_puts_r+0x2c>
 800d070:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800d074:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d076:	07da      	lsls	r2, r3, #31
 800d078:	d405      	bmi.n	800d086 <_puts_r+0x72>
 800d07a:	89a3      	ldrh	r3, [r4, #12]
 800d07c:	059b      	lsls	r3, r3, #22
 800d07e:	d402      	bmi.n	800d086 <_puts_r+0x72>
 800d080:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d082:	f000 f9db 	bl	800d43c <__retarget_lock_release_recursive>
 800d086:	4628      	mov	r0, r5
 800d088:	bd70      	pop	{r4, r5, r6, pc}
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	da04      	bge.n	800d098 <_puts_r+0x84>
 800d08e:	69a2      	ldr	r2, [r4, #24]
 800d090:	429a      	cmp	r2, r3
 800d092:	dc06      	bgt.n	800d0a2 <_puts_r+0x8e>
 800d094:	290a      	cmp	r1, #10
 800d096:	d004      	beq.n	800d0a2 <_puts_r+0x8e>
 800d098:	6823      	ldr	r3, [r4, #0]
 800d09a:	1c5a      	adds	r2, r3, #1
 800d09c:	6022      	str	r2, [r4, #0]
 800d09e:	7019      	strb	r1, [r3, #0]
 800d0a0:	e7cf      	b.n	800d042 <_puts_r+0x2e>
 800d0a2:	4622      	mov	r2, r4
 800d0a4:	4628      	mov	r0, r5
 800d0a6:	f000 f854 	bl	800d152 <__swbuf_r>
 800d0aa:	3001      	adds	r0, #1
 800d0ac:	d1c9      	bne.n	800d042 <_puts_r+0x2e>
 800d0ae:	e7df      	b.n	800d070 <_puts_r+0x5c>
 800d0b0:	6823      	ldr	r3, [r4, #0]
 800d0b2:	250a      	movs	r5, #10
 800d0b4:	1c5a      	adds	r2, r3, #1
 800d0b6:	6022      	str	r2, [r4, #0]
 800d0b8:	701d      	strb	r5, [r3, #0]
 800d0ba:	e7db      	b.n	800d074 <_puts_r+0x60>

0800d0bc <puts>:
 800d0bc:	4b02      	ldr	r3, [pc, #8]	; (800d0c8 <puts+0xc>)
 800d0be:	4601      	mov	r1, r0
 800d0c0:	6818      	ldr	r0, [r3, #0]
 800d0c2:	f7ff bfa7 	b.w	800d014 <_puts_r>
 800d0c6:	bf00      	nop
 800d0c8:	20000088 	.word	0x20000088

0800d0cc <__sread>:
 800d0cc:	b510      	push	{r4, lr}
 800d0ce:	460c      	mov	r4, r1
 800d0d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0d4:	f000 f952 	bl	800d37c <_read_r>
 800d0d8:	2800      	cmp	r0, #0
 800d0da:	bfab      	itete	ge
 800d0dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d0de:	89a3      	ldrhlt	r3, [r4, #12]
 800d0e0:	181b      	addge	r3, r3, r0
 800d0e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d0e6:	bfac      	ite	ge
 800d0e8:	6563      	strge	r3, [r4, #84]	; 0x54
 800d0ea:	81a3      	strhlt	r3, [r4, #12]
 800d0ec:	bd10      	pop	{r4, pc}

0800d0ee <__swrite>:
 800d0ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0f2:	461f      	mov	r7, r3
 800d0f4:	898b      	ldrh	r3, [r1, #12]
 800d0f6:	05db      	lsls	r3, r3, #23
 800d0f8:	4605      	mov	r5, r0
 800d0fa:	460c      	mov	r4, r1
 800d0fc:	4616      	mov	r6, r2
 800d0fe:	d505      	bpl.n	800d10c <__swrite+0x1e>
 800d100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d104:	2302      	movs	r3, #2
 800d106:	2200      	movs	r2, #0
 800d108:	f000 f926 	bl	800d358 <_lseek_r>
 800d10c:	89a3      	ldrh	r3, [r4, #12]
 800d10e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d112:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d116:	81a3      	strh	r3, [r4, #12]
 800d118:	4632      	mov	r2, r6
 800d11a:	463b      	mov	r3, r7
 800d11c:	4628      	mov	r0, r5
 800d11e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d122:	f000 b94d 	b.w	800d3c0 <_write_r>

0800d126 <__sseek>:
 800d126:	b510      	push	{r4, lr}
 800d128:	460c      	mov	r4, r1
 800d12a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d12e:	f000 f913 	bl	800d358 <_lseek_r>
 800d132:	1c43      	adds	r3, r0, #1
 800d134:	89a3      	ldrh	r3, [r4, #12]
 800d136:	bf15      	itete	ne
 800d138:	6560      	strne	r0, [r4, #84]	; 0x54
 800d13a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d13e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d142:	81a3      	strheq	r3, [r4, #12]
 800d144:	bf18      	it	ne
 800d146:	81a3      	strhne	r3, [r4, #12]
 800d148:	bd10      	pop	{r4, pc}

0800d14a <__sclose>:
 800d14a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d14e:	f000 b89d 	b.w	800d28c <_close_r>

0800d152 <__swbuf_r>:
 800d152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d154:	460e      	mov	r6, r1
 800d156:	4614      	mov	r4, r2
 800d158:	4605      	mov	r5, r0
 800d15a:	b118      	cbz	r0, 800d164 <__swbuf_r+0x12>
 800d15c:	6a03      	ldr	r3, [r0, #32]
 800d15e:	b90b      	cbnz	r3, 800d164 <__swbuf_r+0x12>
 800d160:	f7ff ff10 	bl	800cf84 <__sinit>
 800d164:	69a3      	ldr	r3, [r4, #24]
 800d166:	60a3      	str	r3, [r4, #8]
 800d168:	89a3      	ldrh	r3, [r4, #12]
 800d16a:	071a      	lsls	r2, r3, #28
 800d16c:	d525      	bpl.n	800d1ba <__swbuf_r+0x68>
 800d16e:	6923      	ldr	r3, [r4, #16]
 800d170:	b31b      	cbz	r3, 800d1ba <__swbuf_r+0x68>
 800d172:	6823      	ldr	r3, [r4, #0]
 800d174:	6922      	ldr	r2, [r4, #16]
 800d176:	1a98      	subs	r0, r3, r2
 800d178:	6963      	ldr	r3, [r4, #20]
 800d17a:	b2f6      	uxtb	r6, r6
 800d17c:	4283      	cmp	r3, r0
 800d17e:	4637      	mov	r7, r6
 800d180:	dc04      	bgt.n	800d18c <__swbuf_r+0x3a>
 800d182:	4621      	mov	r1, r4
 800d184:	4628      	mov	r0, r5
 800d186:	f000 fd0f 	bl	800dba8 <_fflush_r>
 800d18a:	b9e0      	cbnz	r0, 800d1c6 <__swbuf_r+0x74>
 800d18c:	68a3      	ldr	r3, [r4, #8]
 800d18e:	3b01      	subs	r3, #1
 800d190:	60a3      	str	r3, [r4, #8]
 800d192:	6823      	ldr	r3, [r4, #0]
 800d194:	1c5a      	adds	r2, r3, #1
 800d196:	6022      	str	r2, [r4, #0]
 800d198:	701e      	strb	r6, [r3, #0]
 800d19a:	6962      	ldr	r2, [r4, #20]
 800d19c:	1c43      	adds	r3, r0, #1
 800d19e:	429a      	cmp	r2, r3
 800d1a0:	d004      	beq.n	800d1ac <__swbuf_r+0x5a>
 800d1a2:	89a3      	ldrh	r3, [r4, #12]
 800d1a4:	07db      	lsls	r3, r3, #31
 800d1a6:	d506      	bpl.n	800d1b6 <__swbuf_r+0x64>
 800d1a8:	2e0a      	cmp	r6, #10
 800d1aa:	d104      	bne.n	800d1b6 <__swbuf_r+0x64>
 800d1ac:	4621      	mov	r1, r4
 800d1ae:	4628      	mov	r0, r5
 800d1b0:	f000 fcfa 	bl	800dba8 <_fflush_r>
 800d1b4:	b938      	cbnz	r0, 800d1c6 <__swbuf_r+0x74>
 800d1b6:	4638      	mov	r0, r7
 800d1b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1ba:	4621      	mov	r1, r4
 800d1bc:	4628      	mov	r0, r5
 800d1be:	f000 f805 	bl	800d1cc <__swsetup_r>
 800d1c2:	2800      	cmp	r0, #0
 800d1c4:	d0d5      	beq.n	800d172 <__swbuf_r+0x20>
 800d1c6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d1ca:	e7f4      	b.n	800d1b6 <__swbuf_r+0x64>

0800d1cc <__swsetup_r>:
 800d1cc:	b538      	push	{r3, r4, r5, lr}
 800d1ce:	4b2a      	ldr	r3, [pc, #168]	; (800d278 <__swsetup_r+0xac>)
 800d1d0:	4605      	mov	r5, r0
 800d1d2:	6818      	ldr	r0, [r3, #0]
 800d1d4:	460c      	mov	r4, r1
 800d1d6:	b118      	cbz	r0, 800d1e0 <__swsetup_r+0x14>
 800d1d8:	6a03      	ldr	r3, [r0, #32]
 800d1da:	b90b      	cbnz	r3, 800d1e0 <__swsetup_r+0x14>
 800d1dc:	f7ff fed2 	bl	800cf84 <__sinit>
 800d1e0:	89a3      	ldrh	r3, [r4, #12]
 800d1e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d1e6:	0718      	lsls	r0, r3, #28
 800d1e8:	d422      	bmi.n	800d230 <__swsetup_r+0x64>
 800d1ea:	06d9      	lsls	r1, r3, #27
 800d1ec:	d407      	bmi.n	800d1fe <__swsetup_r+0x32>
 800d1ee:	2309      	movs	r3, #9
 800d1f0:	602b      	str	r3, [r5, #0]
 800d1f2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d1f6:	81a3      	strh	r3, [r4, #12]
 800d1f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d1fc:	e034      	b.n	800d268 <__swsetup_r+0x9c>
 800d1fe:	0758      	lsls	r0, r3, #29
 800d200:	d512      	bpl.n	800d228 <__swsetup_r+0x5c>
 800d202:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d204:	b141      	cbz	r1, 800d218 <__swsetup_r+0x4c>
 800d206:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d20a:	4299      	cmp	r1, r3
 800d20c:	d002      	beq.n	800d214 <__swsetup_r+0x48>
 800d20e:	4628      	mov	r0, r5
 800d210:	f000 f924 	bl	800d45c <_free_r>
 800d214:	2300      	movs	r3, #0
 800d216:	6363      	str	r3, [r4, #52]	; 0x34
 800d218:	89a3      	ldrh	r3, [r4, #12]
 800d21a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d21e:	81a3      	strh	r3, [r4, #12]
 800d220:	2300      	movs	r3, #0
 800d222:	6063      	str	r3, [r4, #4]
 800d224:	6923      	ldr	r3, [r4, #16]
 800d226:	6023      	str	r3, [r4, #0]
 800d228:	89a3      	ldrh	r3, [r4, #12]
 800d22a:	f043 0308 	orr.w	r3, r3, #8
 800d22e:	81a3      	strh	r3, [r4, #12]
 800d230:	6923      	ldr	r3, [r4, #16]
 800d232:	b94b      	cbnz	r3, 800d248 <__swsetup_r+0x7c>
 800d234:	89a3      	ldrh	r3, [r4, #12]
 800d236:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d23a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d23e:	d003      	beq.n	800d248 <__swsetup_r+0x7c>
 800d240:	4621      	mov	r1, r4
 800d242:	4628      	mov	r0, r5
 800d244:	f000 fcfe 	bl	800dc44 <__smakebuf_r>
 800d248:	89a0      	ldrh	r0, [r4, #12]
 800d24a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d24e:	f010 0301 	ands.w	r3, r0, #1
 800d252:	d00a      	beq.n	800d26a <__swsetup_r+0x9e>
 800d254:	2300      	movs	r3, #0
 800d256:	60a3      	str	r3, [r4, #8]
 800d258:	6963      	ldr	r3, [r4, #20]
 800d25a:	425b      	negs	r3, r3
 800d25c:	61a3      	str	r3, [r4, #24]
 800d25e:	6923      	ldr	r3, [r4, #16]
 800d260:	b943      	cbnz	r3, 800d274 <__swsetup_r+0xa8>
 800d262:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d266:	d1c4      	bne.n	800d1f2 <__swsetup_r+0x26>
 800d268:	bd38      	pop	{r3, r4, r5, pc}
 800d26a:	0781      	lsls	r1, r0, #30
 800d26c:	bf58      	it	pl
 800d26e:	6963      	ldrpl	r3, [r4, #20]
 800d270:	60a3      	str	r3, [r4, #8]
 800d272:	e7f4      	b.n	800d25e <__swsetup_r+0x92>
 800d274:	2000      	movs	r0, #0
 800d276:	e7f7      	b.n	800d268 <__swsetup_r+0x9c>
 800d278:	20000088 	.word	0x20000088

0800d27c <memset>:
 800d27c:	4402      	add	r2, r0
 800d27e:	4603      	mov	r3, r0
 800d280:	4293      	cmp	r3, r2
 800d282:	d100      	bne.n	800d286 <memset+0xa>
 800d284:	4770      	bx	lr
 800d286:	f803 1b01 	strb.w	r1, [r3], #1
 800d28a:	e7f9      	b.n	800d280 <memset+0x4>

0800d28c <_close_r>:
 800d28c:	b538      	push	{r3, r4, r5, lr}
 800d28e:	4d06      	ldr	r5, [pc, #24]	; (800d2a8 <_close_r+0x1c>)
 800d290:	2300      	movs	r3, #0
 800d292:	4604      	mov	r4, r0
 800d294:	4608      	mov	r0, r1
 800d296:	602b      	str	r3, [r5, #0]
 800d298:	f7f4 f83f 	bl	800131a <_close>
 800d29c:	1c43      	adds	r3, r0, #1
 800d29e:	d102      	bne.n	800d2a6 <_close_r+0x1a>
 800d2a0:	682b      	ldr	r3, [r5, #0]
 800d2a2:	b103      	cbz	r3, 800d2a6 <_close_r+0x1a>
 800d2a4:	6023      	str	r3, [r4, #0]
 800d2a6:	bd38      	pop	{r3, r4, r5, pc}
 800d2a8:	20010f0c 	.word	0x20010f0c

0800d2ac <_reclaim_reent>:
 800d2ac:	4b29      	ldr	r3, [pc, #164]	; (800d354 <_reclaim_reent+0xa8>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	4283      	cmp	r3, r0
 800d2b2:	b570      	push	{r4, r5, r6, lr}
 800d2b4:	4604      	mov	r4, r0
 800d2b6:	d04b      	beq.n	800d350 <_reclaim_reent+0xa4>
 800d2b8:	69c3      	ldr	r3, [r0, #28]
 800d2ba:	b143      	cbz	r3, 800d2ce <_reclaim_reent+0x22>
 800d2bc:	68db      	ldr	r3, [r3, #12]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d144      	bne.n	800d34c <_reclaim_reent+0xa0>
 800d2c2:	69e3      	ldr	r3, [r4, #28]
 800d2c4:	6819      	ldr	r1, [r3, #0]
 800d2c6:	b111      	cbz	r1, 800d2ce <_reclaim_reent+0x22>
 800d2c8:	4620      	mov	r0, r4
 800d2ca:	f000 f8c7 	bl	800d45c <_free_r>
 800d2ce:	6961      	ldr	r1, [r4, #20]
 800d2d0:	b111      	cbz	r1, 800d2d8 <_reclaim_reent+0x2c>
 800d2d2:	4620      	mov	r0, r4
 800d2d4:	f000 f8c2 	bl	800d45c <_free_r>
 800d2d8:	69e1      	ldr	r1, [r4, #28]
 800d2da:	b111      	cbz	r1, 800d2e2 <_reclaim_reent+0x36>
 800d2dc:	4620      	mov	r0, r4
 800d2de:	f000 f8bd 	bl	800d45c <_free_r>
 800d2e2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d2e4:	b111      	cbz	r1, 800d2ec <_reclaim_reent+0x40>
 800d2e6:	4620      	mov	r0, r4
 800d2e8:	f000 f8b8 	bl	800d45c <_free_r>
 800d2ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d2ee:	b111      	cbz	r1, 800d2f6 <_reclaim_reent+0x4a>
 800d2f0:	4620      	mov	r0, r4
 800d2f2:	f000 f8b3 	bl	800d45c <_free_r>
 800d2f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d2f8:	b111      	cbz	r1, 800d300 <_reclaim_reent+0x54>
 800d2fa:	4620      	mov	r0, r4
 800d2fc:	f000 f8ae 	bl	800d45c <_free_r>
 800d300:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d302:	b111      	cbz	r1, 800d30a <_reclaim_reent+0x5e>
 800d304:	4620      	mov	r0, r4
 800d306:	f000 f8a9 	bl	800d45c <_free_r>
 800d30a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d30c:	b111      	cbz	r1, 800d314 <_reclaim_reent+0x68>
 800d30e:	4620      	mov	r0, r4
 800d310:	f000 f8a4 	bl	800d45c <_free_r>
 800d314:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d316:	b111      	cbz	r1, 800d31e <_reclaim_reent+0x72>
 800d318:	4620      	mov	r0, r4
 800d31a:	f000 f89f 	bl	800d45c <_free_r>
 800d31e:	6a23      	ldr	r3, [r4, #32]
 800d320:	b1b3      	cbz	r3, 800d350 <_reclaim_reent+0xa4>
 800d322:	4620      	mov	r0, r4
 800d324:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d328:	4718      	bx	r3
 800d32a:	5949      	ldr	r1, [r1, r5]
 800d32c:	b941      	cbnz	r1, 800d340 <_reclaim_reent+0x94>
 800d32e:	3504      	adds	r5, #4
 800d330:	69e3      	ldr	r3, [r4, #28]
 800d332:	2d80      	cmp	r5, #128	; 0x80
 800d334:	68d9      	ldr	r1, [r3, #12]
 800d336:	d1f8      	bne.n	800d32a <_reclaim_reent+0x7e>
 800d338:	4620      	mov	r0, r4
 800d33a:	f000 f88f 	bl	800d45c <_free_r>
 800d33e:	e7c0      	b.n	800d2c2 <_reclaim_reent+0x16>
 800d340:	680e      	ldr	r6, [r1, #0]
 800d342:	4620      	mov	r0, r4
 800d344:	f000 f88a 	bl	800d45c <_free_r>
 800d348:	4631      	mov	r1, r6
 800d34a:	e7ef      	b.n	800d32c <_reclaim_reent+0x80>
 800d34c:	2500      	movs	r5, #0
 800d34e:	e7ef      	b.n	800d330 <_reclaim_reent+0x84>
 800d350:	bd70      	pop	{r4, r5, r6, pc}
 800d352:	bf00      	nop
 800d354:	20000088 	.word	0x20000088

0800d358 <_lseek_r>:
 800d358:	b538      	push	{r3, r4, r5, lr}
 800d35a:	4d07      	ldr	r5, [pc, #28]	; (800d378 <_lseek_r+0x20>)
 800d35c:	4604      	mov	r4, r0
 800d35e:	4608      	mov	r0, r1
 800d360:	4611      	mov	r1, r2
 800d362:	2200      	movs	r2, #0
 800d364:	602a      	str	r2, [r5, #0]
 800d366:	461a      	mov	r2, r3
 800d368:	f7f3 fffe 	bl	8001368 <_lseek>
 800d36c:	1c43      	adds	r3, r0, #1
 800d36e:	d102      	bne.n	800d376 <_lseek_r+0x1e>
 800d370:	682b      	ldr	r3, [r5, #0]
 800d372:	b103      	cbz	r3, 800d376 <_lseek_r+0x1e>
 800d374:	6023      	str	r3, [r4, #0]
 800d376:	bd38      	pop	{r3, r4, r5, pc}
 800d378:	20010f0c 	.word	0x20010f0c

0800d37c <_read_r>:
 800d37c:	b538      	push	{r3, r4, r5, lr}
 800d37e:	4d07      	ldr	r5, [pc, #28]	; (800d39c <_read_r+0x20>)
 800d380:	4604      	mov	r4, r0
 800d382:	4608      	mov	r0, r1
 800d384:	4611      	mov	r1, r2
 800d386:	2200      	movs	r2, #0
 800d388:	602a      	str	r2, [r5, #0]
 800d38a:	461a      	mov	r2, r3
 800d38c:	f7f3 ff8c 	bl	80012a8 <_read>
 800d390:	1c43      	adds	r3, r0, #1
 800d392:	d102      	bne.n	800d39a <_read_r+0x1e>
 800d394:	682b      	ldr	r3, [r5, #0]
 800d396:	b103      	cbz	r3, 800d39a <_read_r+0x1e>
 800d398:	6023      	str	r3, [r4, #0]
 800d39a:	bd38      	pop	{r3, r4, r5, pc}
 800d39c:	20010f0c 	.word	0x20010f0c

0800d3a0 <_sbrk_r>:
 800d3a0:	b538      	push	{r3, r4, r5, lr}
 800d3a2:	4d06      	ldr	r5, [pc, #24]	; (800d3bc <_sbrk_r+0x1c>)
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	4604      	mov	r4, r0
 800d3a8:	4608      	mov	r0, r1
 800d3aa:	602b      	str	r3, [r5, #0]
 800d3ac:	f7f3 ffea 	bl	8001384 <_sbrk>
 800d3b0:	1c43      	adds	r3, r0, #1
 800d3b2:	d102      	bne.n	800d3ba <_sbrk_r+0x1a>
 800d3b4:	682b      	ldr	r3, [r5, #0]
 800d3b6:	b103      	cbz	r3, 800d3ba <_sbrk_r+0x1a>
 800d3b8:	6023      	str	r3, [r4, #0]
 800d3ba:	bd38      	pop	{r3, r4, r5, pc}
 800d3bc:	20010f0c 	.word	0x20010f0c

0800d3c0 <_write_r>:
 800d3c0:	b538      	push	{r3, r4, r5, lr}
 800d3c2:	4d07      	ldr	r5, [pc, #28]	; (800d3e0 <_write_r+0x20>)
 800d3c4:	4604      	mov	r4, r0
 800d3c6:	4608      	mov	r0, r1
 800d3c8:	4611      	mov	r1, r2
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	602a      	str	r2, [r5, #0]
 800d3ce:	461a      	mov	r2, r3
 800d3d0:	f7f3 ff87 	bl	80012e2 <_write>
 800d3d4:	1c43      	adds	r3, r0, #1
 800d3d6:	d102      	bne.n	800d3de <_write_r+0x1e>
 800d3d8:	682b      	ldr	r3, [r5, #0]
 800d3da:	b103      	cbz	r3, 800d3de <_write_r+0x1e>
 800d3dc:	6023      	str	r3, [r4, #0]
 800d3de:	bd38      	pop	{r3, r4, r5, pc}
 800d3e0:	20010f0c 	.word	0x20010f0c

0800d3e4 <__errno>:
 800d3e4:	4b01      	ldr	r3, [pc, #4]	; (800d3ec <__errno+0x8>)
 800d3e6:	6818      	ldr	r0, [r3, #0]
 800d3e8:	4770      	bx	lr
 800d3ea:	bf00      	nop
 800d3ec:	20000088 	.word	0x20000088

0800d3f0 <__libc_init_array>:
 800d3f0:	b570      	push	{r4, r5, r6, lr}
 800d3f2:	4d0d      	ldr	r5, [pc, #52]	; (800d428 <__libc_init_array+0x38>)
 800d3f4:	4c0d      	ldr	r4, [pc, #52]	; (800d42c <__libc_init_array+0x3c>)
 800d3f6:	1b64      	subs	r4, r4, r5
 800d3f8:	10a4      	asrs	r4, r4, #2
 800d3fa:	2600      	movs	r6, #0
 800d3fc:	42a6      	cmp	r6, r4
 800d3fe:	d109      	bne.n	800d414 <__libc_init_array+0x24>
 800d400:	4d0b      	ldr	r5, [pc, #44]	; (800d430 <__libc_init_array+0x40>)
 800d402:	4c0c      	ldr	r4, [pc, #48]	; (800d434 <__libc_init_array+0x44>)
 800d404:	f000 fc7c 	bl	800dd00 <_init>
 800d408:	1b64      	subs	r4, r4, r5
 800d40a:	10a4      	asrs	r4, r4, #2
 800d40c:	2600      	movs	r6, #0
 800d40e:	42a6      	cmp	r6, r4
 800d410:	d105      	bne.n	800d41e <__libc_init_array+0x2e>
 800d412:	bd70      	pop	{r4, r5, r6, pc}
 800d414:	f855 3b04 	ldr.w	r3, [r5], #4
 800d418:	4798      	blx	r3
 800d41a:	3601      	adds	r6, #1
 800d41c:	e7ee      	b.n	800d3fc <__libc_init_array+0xc>
 800d41e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d422:	4798      	blx	r3
 800d424:	3601      	adds	r6, #1
 800d426:	e7f2      	b.n	800d40e <__libc_init_array+0x1e>
 800d428:	0800de78 	.word	0x0800de78
 800d42c:	0800de78 	.word	0x0800de78
 800d430:	0800de78 	.word	0x0800de78
 800d434:	0800de7c 	.word	0x0800de7c

0800d438 <__retarget_lock_init_recursive>:
 800d438:	4770      	bx	lr

0800d43a <__retarget_lock_acquire_recursive>:
 800d43a:	4770      	bx	lr

0800d43c <__retarget_lock_release_recursive>:
 800d43c:	4770      	bx	lr

0800d43e <memcpy>:
 800d43e:	440a      	add	r2, r1
 800d440:	4291      	cmp	r1, r2
 800d442:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d446:	d100      	bne.n	800d44a <memcpy+0xc>
 800d448:	4770      	bx	lr
 800d44a:	b510      	push	{r4, lr}
 800d44c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d450:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d454:	4291      	cmp	r1, r2
 800d456:	d1f9      	bne.n	800d44c <memcpy+0xe>
 800d458:	bd10      	pop	{r4, pc}
	...

0800d45c <_free_r>:
 800d45c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d45e:	2900      	cmp	r1, #0
 800d460:	d044      	beq.n	800d4ec <_free_r+0x90>
 800d462:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d466:	9001      	str	r0, [sp, #4]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	f1a1 0404 	sub.w	r4, r1, #4
 800d46e:	bfb8      	it	lt
 800d470:	18e4      	addlt	r4, r4, r3
 800d472:	f7ff fcef 	bl	800ce54 <__malloc_lock>
 800d476:	4a1e      	ldr	r2, [pc, #120]	; (800d4f0 <_free_r+0x94>)
 800d478:	9801      	ldr	r0, [sp, #4]
 800d47a:	6813      	ldr	r3, [r2, #0]
 800d47c:	b933      	cbnz	r3, 800d48c <_free_r+0x30>
 800d47e:	6063      	str	r3, [r4, #4]
 800d480:	6014      	str	r4, [r2, #0]
 800d482:	b003      	add	sp, #12
 800d484:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d488:	f7ff bcea 	b.w	800ce60 <__malloc_unlock>
 800d48c:	42a3      	cmp	r3, r4
 800d48e:	d908      	bls.n	800d4a2 <_free_r+0x46>
 800d490:	6825      	ldr	r5, [r4, #0]
 800d492:	1961      	adds	r1, r4, r5
 800d494:	428b      	cmp	r3, r1
 800d496:	bf01      	itttt	eq
 800d498:	6819      	ldreq	r1, [r3, #0]
 800d49a:	685b      	ldreq	r3, [r3, #4]
 800d49c:	1949      	addeq	r1, r1, r5
 800d49e:	6021      	streq	r1, [r4, #0]
 800d4a0:	e7ed      	b.n	800d47e <_free_r+0x22>
 800d4a2:	461a      	mov	r2, r3
 800d4a4:	685b      	ldr	r3, [r3, #4]
 800d4a6:	b10b      	cbz	r3, 800d4ac <_free_r+0x50>
 800d4a8:	42a3      	cmp	r3, r4
 800d4aa:	d9fa      	bls.n	800d4a2 <_free_r+0x46>
 800d4ac:	6811      	ldr	r1, [r2, #0]
 800d4ae:	1855      	adds	r5, r2, r1
 800d4b0:	42a5      	cmp	r5, r4
 800d4b2:	d10b      	bne.n	800d4cc <_free_r+0x70>
 800d4b4:	6824      	ldr	r4, [r4, #0]
 800d4b6:	4421      	add	r1, r4
 800d4b8:	1854      	adds	r4, r2, r1
 800d4ba:	42a3      	cmp	r3, r4
 800d4bc:	6011      	str	r1, [r2, #0]
 800d4be:	d1e0      	bne.n	800d482 <_free_r+0x26>
 800d4c0:	681c      	ldr	r4, [r3, #0]
 800d4c2:	685b      	ldr	r3, [r3, #4]
 800d4c4:	6053      	str	r3, [r2, #4]
 800d4c6:	440c      	add	r4, r1
 800d4c8:	6014      	str	r4, [r2, #0]
 800d4ca:	e7da      	b.n	800d482 <_free_r+0x26>
 800d4cc:	d902      	bls.n	800d4d4 <_free_r+0x78>
 800d4ce:	230c      	movs	r3, #12
 800d4d0:	6003      	str	r3, [r0, #0]
 800d4d2:	e7d6      	b.n	800d482 <_free_r+0x26>
 800d4d4:	6825      	ldr	r5, [r4, #0]
 800d4d6:	1961      	adds	r1, r4, r5
 800d4d8:	428b      	cmp	r3, r1
 800d4da:	bf04      	itt	eq
 800d4dc:	6819      	ldreq	r1, [r3, #0]
 800d4de:	685b      	ldreq	r3, [r3, #4]
 800d4e0:	6063      	str	r3, [r4, #4]
 800d4e2:	bf04      	itt	eq
 800d4e4:	1949      	addeq	r1, r1, r5
 800d4e6:	6021      	streq	r1, [r4, #0]
 800d4e8:	6054      	str	r4, [r2, #4]
 800d4ea:	e7ca      	b.n	800d482 <_free_r+0x26>
 800d4ec:	b003      	add	sp, #12
 800d4ee:	bd30      	pop	{r4, r5, pc}
 800d4f0:	20010dc8 	.word	0x20010dc8

0800d4f4 <__sfputc_r>:
 800d4f4:	6893      	ldr	r3, [r2, #8]
 800d4f6:	3b01      	subs	r3, #1
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	b410      	push	{r4}
 800d4fc:	6093      	str	r3, [r2, #8]
 800d4fe:	da08      	bge.n	800d512 <__sfputc_r+0x1e>
 800d500:	6994      	ldr	r4, [r2, #24]
 800d502:	42a3      	cmp	r3, r4
 800d504:	db01      	blt.n	800d50a <__sfputc_r+0x16>
 800d506:	290a      	cmp	r1, #10
 800d508:	d103      	bne.n	800d512 <__sfputc_r+0x1e>
 800d50a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d50e:	f7ff be20 	b.w	800d152 <__swbuf_r>
 800d512:	6813      	ldr	r3, [r2, #0]
 800d514:	1c58      	adds	r0, r3, #1
 800d516:	6010      	str	r0, [r2, #0]
 800d518:	7019      	strb	r1, [r3, #0]
 800d51a:	4608      	mov	r0, r1
 800d51c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d520:	4770      	bx	lr

0800d522 <__sfputs_r>:
 800d522:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d524:	4606      	mov	r6, r0
 800d526:	460f      	mov	r7, r1
 800d528:	4614      	mov	r4, r2
 800d52a:	18d5      	adds	r5, r2, r3
 800d52c:	42ac      	cmp	r4, r5
 800d52e:	d101      	bne.n	800d534 <__sfputs_r+0x12>
 800d530:	2000      	movs	r0, #0
 800d532:	e007      	b.n	800d544 <__sfputs_r+0x22>
 800d534:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d538:	463a      	mov	r2, r7
 800d53a:	4630      	mov	r0, r6
 800d53c:	f7ff ffda 	bl	800d4f4 <__sfputc_r>
 800d540:	1c43      	adds	r3, r0, #1
 800d542:	d1f3      	bne.n	800d52c <__sfputs_r+0xa>
 800d544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d548 <_vfiprintf_r>:
 800d548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d54c:	460d      	mov	r5, r1
 800d54e:	b09d      	sub	sp, #116	; 0x74
 800d550:	4614      	mov	r4, r2
 800d552:	4698      	mov	r8, r3
 800d554:	4606      	mov	r6, r0
 800d556:	b118      	cbz	r0, 800d560 <_vfiprintf_r+0x18>
 800d558:	6a03      	ldr	r3, [r0, #32]
 800d55a:	b90b      	cbnz	r3, 800d560 <_vfiprintf_r+0x18>
 800d55c:	f7ff fd12 	bl	800cf84 <__sinit>
 800d560:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d562:	07d9      	lsls	r1, r3, #31
 800d564:	d405      	bmi.n	800d572 <_vfiprintf_r+0x2a>
 800d566:	89ab      	ldrh	r3, [r5, #12]
 800d568:	059a      	lsls	r2, r3, #22
 800d56a:	d402      	bmi.n	800d572 <_vfiprintf_r+0x2a>
 800d56c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d56e:	f7ff ff64 	bl	800d43a <__retarget_lock_acquire_recursive>
 800d572:	89ab      	ldrh	r3, [r5, #12]
 800d574:	071b      	lsls	r3, r3, #28
 800d576:	d501      	bpl.n	800d57c <_vfiprintf_r+0x34>
 800d578:	692b      	ldr	r3, [r5, #16]
 800d57a:	b99b      	cbnz	r3, 800d5a4 <_vfiprintf_r+0x5c>
 800d57c:	4629      	mov	r1, r5
 800d57e:	4630      	mov	r0, r6
 800d580:	f7ff fe24 	bl	800d1cc <__swsetup_r>
 800d584:	b170      	cbz	r0, 800d5a4 <_vfiprintf_r+0x5c>
 800d586:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d588:	07dc      	lsls	r4, r3, #31
 800d58a:	d504      	bpl.n	800d596 <_vfiprintf_r+0x4e>
 800d58c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d590:	b01d      	add	sp, #116	; 0x74
 800d592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d596:	89ab      	ldrh	r3, [r5, #12]
 800d598:	0598      	lsls	r0, r3, #22
 800d59a:	d4f7      	bmi.n	800d58c <_vfiprintf_r+0x44>
 800d59c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d59e:	f7ff ff4d 	bl	800d43c <__retarget_lock_release_recursive>
 800d5a2:	e7f3      	b.n	800d58c <_vfiprintf_r+0x44>
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	9309      	str	r3, [sp, #36]	; 0x24
 800d5a8:	2320      	movs	r3, #32
 800d5aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d5ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800d5b2:	2330      	movs	r3, #48	; 0x30
 800d5b4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d768 <_vfiprintf_r+0x220>
 800d5b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d5bc:	f04f 0901 	mov.w	r9, #1
 800d5c0:	4623      	mov	r3, r4
 800d5c2:	469a      	mov	sl, r3
 800d5c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5c8:	b10a      	cbz	r2, 800d5ce <_vfiprintf_r+0x86>
 800d5ca:	2a25      	cmp	r2, #37	; 0x25
 800d5cc:	d1f9      	bne.n	800d5c2 <_vfiprintf_r+0x7a>
 800d5ce:	ebba 0b04 	subs.w	fp, sl, r4
 800d5d2:	d00b      	beq.n	800d5ec <_vfiprintf_r+0xa4>
 800d5d4:	465b      	mov	r3, fp
 800d5d6:	4622      	mov	r2, r4
 800d5d8:	4629      	mov	r1, r5
 800d5da:	4630      	mov	r0, r6
 800d5dc:	f7ff ffa1 	bl	800d522 <__sfputs_r>
 800d5e0:	3001      	adds	r0, #1
 800d5e2:	f000 80a9 	beq.w	800d738 <_vfiprintf_r+0x1f0>
 800d5e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d5e8:	445a      	add	r2, fp
 800d5ea:	9209      	str	r2, [sp, #36]	; 0x24
 800d5ec:	f89a 3000 	ldrb.w	r3, [sl]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	f000 80a1 	beq.w	800d738 <_vfiprintf_r+0x1f0>
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d5fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d600:	f10a 0a01 	add.w	sl, sl, #1
 800d604:	9304      	str	r3, [sp, #16]
 800d606:	9307      	str	r3, [sp, #28]
 800d608:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d60c:	931a      	str	r3, [sp, #104]	; 0x68
 800d60e:	4654      	mov	r4, sl
 800d610:	2205      	movs	r2, #5
 800d612:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d616:	4854      	ldr	r0, [pc, #336]	; (800d768 <_vfiprintf_r+0x220>)
 800d618:	f7f2 fdea 	bl	80001f0 <memchr>
 800d61c:	9a04      	ldr	r2, [sp, #16]
 800d61e:	b9d8      	cbnz	r0, 800d658 <_vfiprintf_r+0x110>
 800d620:	06d1      	lsls	r1, r2, #27
 800d622:	bf44      	itt	mi
 800d624:	2320      	movmi	r3, #32
 800d626:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d62a:	0713      	lsls	r3, r2, #28
 800d62c:	bf44      	itt	mi
 800d62e:	232b      	movmi	r3, #43	; 0x2b
 800d630:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d634:	f89a 3000 	ldrb.w	r3, [sl]
 800d638:	2b2a      	cmp	r3, #42	; 0x2a
 800d63a:	d015      	beq.n	800d668 <_vfiprintf_r+0x120>
 800d63c:	9a07      	ldr	r2, [sp, #28]
 800d63e:	4654      	mov	r4, sl
 800d640:	2000      	movs	r0, #0
 800d642:	f04f 0c0a 	mov.w	ip, #10
 800d646:	4621      	mov	r1, r4
 800d648:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d64c:	3b30      	subs	r3, #48	; 0x30
 800d64e:	2b09      	cmp	r3, #9
 800d650:	d94d      	bls.n	800d6ee <_vfiprintf_r+0x1a6>
 800d652:	b1b0      	cbz	r0, 800d682 <_vfiprintf_r+0x13a>
 800d654:	9207      	str	r2, [sp, #28]
 800d656:	e014      	b.n	800d682 <_vfiprintf_r+0x13a>
 800d658:	eba0 0308 	sub.w	r3, r0, r8
 800d65c:	fa09 f303 	lsl.w	r3, r9, r3
 800d660:	4313      	orrs	r3, r2
 800d662:	9304      	str	r3, [sp, #16]
 800d664:	46a2      	mov	sl, r4
 800d666:	e7d2      	b.n	800d60e <_vfiprintf_r+0xc6>
 800d668:	9b03      	ldr	r3, [sp, #12]
 800d66a:	1d19      	adds	r1, r3, #4
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	9103      	str	r1, [sp, #12]
 800d670:	2b00      	cmp	r3, #0
 800d672:	bfbb      	ittet	lt
 800d674:	425b      	neglt	r3, r3
 800d676:	f042 0202 	orrlt.w	r2, r2, #2
 800d67a:	9307      	strge	r3, [sp, #28]
 800d67c:	9307      	strlt	r3, [sp, #28]
 800d67e:	bfb8      	it	lt
 800d680:	9204      	strlt	r2, [sp, #16]
 800d682:	7823      	ldrb	r3, [r4, #0]
 800d684:	2b2e      	cmp	r3, #46	; 0x2e
 800d686:	d10c      	bne.n	800d6a2 <_vfiprintf_r+0x15a>
 800d688:	7863      	ldrb	r3, [r4, #1]
 800d68a:	2b2a      	cmp	r3, #42	; 0x2a
 800d68c:	d134      	bne.n	800d6f8 <_vfiprintf_r+0x1b0>
 800d68e:	9b03      	ldr	r3, [sp, #12]
 800d690:	1d1a      	adds	r2, r3, #4
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	9203      	str	r2, [sp, #12]
 800d696:	2b00      	cmp	r3, #0
 800d698:	bfb8      	it	lt
 800d69a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d69e:	3402      	adds	r4, #2
 800d6a0:	9305      	str	r3, [sp, #20]
 800d6a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d778 <_vfiprintf_r+0x230>
 800d6a6:	7821      	ldrb	r1, [r4, #0]
 800d6a8:	2203      	movs	r2, #3
 800d6aa:	4650      	mov	r0, sl
 800d6ac:	f7f2 fda0 	bl	80001f0 <memchr>
 800d6b0:	b138      	cbz	r0, 800d6c2 <_vfiprintf_r+0x17a>
 800d6b2:	9b04      	ldr	r3, [sp, #16]
 800d6b4:	eba0 000a 	sub.w	r0, r0, sl
 800d6b8:	2240      	movs	r2, #64	; 0x40
 800d6ba:	4082      	lsls	r2, r0
 800d6bc:	4313      	orrs	r3, r2
 800d6be:	3401      	adds	r4, #1
 800d6c0:	9304      	str	r3, [sp, #16]
 800d6c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6c6:	4829      	ldr	r0, [pc, #164]	; (800d76c <_vfiprintf_r+0x224>)
 800d6c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d6cc:	2206      	movs	r2, #6
 800d6ce:	f7f2 fd8f 	bl	80001f0 <memchr>
 800d6d2:	2800      	cmp	r0, #0
 800d6d4:	d03f      	beq.n	800d756 <_vfiprintf_r+0x20e>
 800d6d6:	4b26      	ldr	r3, [pc, #152]	; (800d770 <_vfiprintf_r+0x228>)
 800d6d8:	bb1b      	cbnz	r3, 800d722 <_vfiprintf_r+0x1da>
 800d6da:	9b03      	ldr	r3, [sp, #12]
 800d6dc:	3307      	adds	r3, #7
 800d6de:	f023 0307 	bic.w	r3, r3, #7
 800d6e2:	3308      	adds	r3, #8
 800d6e4:	9303      	str	r3, [sp, #12]
 800d6e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6e8:	443b      	add	r3, r7
 800d6ea:	9309      	str	r3, [sp, #36]	; 0x24
 800d6ec:	e768      	b.n	800d5c0 <_vfiprintf_r+0x78>
 800d6ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800d6f2:	460c      	mov	r4, r1
 800d6f4:	2001      	movs	r0, #1
 800d6f6:	e7a6      	b.n	800d646 <_vfiprintf_r+0xfe>
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	3401      	adds	r4, #1
 800d6fc:	9305      	str	r3, [sp, #20]
 800d6fe:	4619      	mov	r1, r3
 800d700:	f04f 0c0a 	mov.w	ip, #10
 800d704:	4620      	mov	r0, r4
 800d706:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d70a:	3a30      	subs	r2, #48	; 0x30
 800d70c:	2a09      	cmp	r2, #9
 800d70e:	d903      	bls.n	800d718 <_vfiprintf_r+0x1d0>
 800d710:	2b00      	cmp	r3, #0
 800d712:	d0c6      	beq.n	800d6a2 <_vfiprintf_r+0x15a>
 800d714:	9105      	str	r1, [sp, #20]
 800d716:	e7c4      	b.n	800d6a2 <_vfiprintf_r+0x15a>
 800d718:	fb0c 2101 	mla	r1, ip, r1, r2
 800d71c:	4604      	mov	r4, r0
 800d71e:	2301      	movs	r3, #1
 800d720:	e7f0      	b.n	800d704 <_vfiprintf_r+0x1bc>
 800d722:	ab03      	add	r3, sp, #12
 800d724:	9300      	str	r3, [sp, #0]
 800d726:	462a      	mov	r2, r5
 800d728:	4b12      	ldr	r3, [pc, #72]	; (800d774 <_vfiprintf_r+0x22c>)
 800d72a:	a904      	add	r1, sp, #16
 800d72c:	4630      	mov	r0, r6
 800d72e:	f3af 8000 	nop.w
 800d732:	4607      	mov	r7, r0
 800d734:	1c78      	adds	r0, r7, #1
 800d736:	d1d6      	bne.n	800d6e6 <_vfiprintf_r+0x19e>
 800d738:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d73a:	07d9      	lsls	r1, r3, #31
 800d73c:	d405      	bmi.n	800d74a <_vfiprintf_r+0x202>
 800d73e:	89ab      	ldrh	r3, [r5, #12]
 800d740:	059a      	lsls	r2, r3, #22
 800d742:	d402      	bmi.n	800d74a <_vfiprintf_r+0x202>
 800d744:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d746:	f7ff fe79 	bl	800d43c <__retarget_lock_release_recursive>
 800d74a:	89ab      	ldrh	r3, [r5, #12]
 800d74c:	065b      	lsls	r3, r3, #25
 800d74e:	f53f af1d 	bmi.w	800d58c <_vfiprintf_r+0x44>
 800d752:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d754:	e71c      	b.n	800d590 <_vfiprintf_r+0x48>
 800d756:	ab03      	add	r3, sp, #12
 800d758:	9300      	str	r3, [sp, #0]
 800d75a:	462a      	mov	r2, r5
 800d75c:	4b05      	ldr	r3, [pc, #20]	; (800d774 <_vfiprintf_r+0x22c>)
 800d75e:	a904      	add	r1, sp, #16
 800d760:	4630      	mov	r0, r6
 800d762:	f000 f879 	bl	800d858 <_printf_i>
 800d766:	e7e4      	b.n	800d732 <_vfiprintf_r+0x1ea>
 800d768:	0800de3c 	.word	0x0800de3c
 800d76c:	0800de46 	.word	0x0800de46
 800d770:	00000000 	.word	0x00000000
 800d774:	0800d523 	.word	0x0800d523
 800d778:	0800de42 	.word	0x0800de42

0800d77c <_printf_common>:
 800d77c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d780:	4616      	mov	r6, r2
 800d782:	4699      	mov	r9, r3
 800d784:	688a      	ldr	r2, [r1, #8]
 800d786:	690b      	ldr	r3, [r1, #16]
 800d788:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d78c:	4293      	cmp	r3, r2
 800d78e:	bfb8      	it	lt
 800d790:	4613      	movlt	r3, r2
 800d792:	6033      	str	r3, [r6, #0]
 800d794:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d798:	4607      	mov	r7, r0
 800d79a:	460c      	mov	r4, r1
 800d79c:	b10a      	cbz	r2, 800d7a2 <_printf_common+0x26>
 800d79e:	3301      	adds	r3, #1
 800d7a0:	6033      	str	r3, [r6, #0]
 800d7a2:	6823      	ldr	r3, [r4, #0]
 800d7a4:	0699      	lsls	r1, r3, #26
 800d7a6:	bf42      	ittt	mi
 800d7a8:	6833      	ldrmi	r3, [r6, #0]
 800d7aa:	3302      	addmi	r3, #2
 800d7ac:	6033      	strmi	r3, [r6, #0]
 800d7ae:	6825      	ldr	r5, [r4, #0]
 800d7b0:	f015 0506 	ands.w	r5, r5, #6
 800d7b4:	d106      	bne.n	800d7c4 <_printf_common+0x48>
 800d7b6:	f104 0a19 	add.w	sl, r4, #25
 800d7ba:	68e3      	ldr	r3, [r4, #12]
 800d7bc:	6832      	ldr	r2, [r6, #0]
 800d7be:	1a9b      	subs	r3, r3, r2
 800d7c0:	42ab      	cmp	r3, r5
 800d7c2:	dc26      	bgt.n	800d812 <_printf_common+0x96>
 800d7c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d7c8:	1e13      	subs	r3, r2, #0
 800d7ca:	6822      	ldr	r2, [r4, #0]
 800d7cc:	bf18      	it	ne
 800d7ce:	2301      	movne	r3, #1
 800d7d0:	0692      	lsls	r2, r2, #26
 800d7d2:	d42b      	bmi.n	800d82c <_printf_common+0xb0>
 800d7d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d7d8:	4649      	mov	r1, r9
 800d7da:	4638      	mov	r0, r7
 800d7dc:	47c0      	blx	r8
 800d7de:	3001      	adds	r0, #1
 800d7e0:	d01e      	beq.n	800d820 <_printf_common+0xa4>
 800d7e2:	6823      	ldr	r3, [r4, #0]
 800d7e4:	6922      	ldr	r2, [r4, #16]
 800d7e6:	f003 0306 	and.w	r3, r3, #6
 800d7ea:	2b04      	cmp	r3, #4
 800d7ec:	bf02      	ittt	eq
 800d7ee:	68e5      	ldreq	r5, [r4, #12]
 800d7f0:	6833      	ldreq	r3, [r6, #0]
 800d7f2:	1aed      	subeq	r5, r5, r3
 800d7f4:	68a3      	ldr	r3, [r4, #8]
 800d7f6:	bf0c      	ite	eq
 800d7f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d7fc:	2500      	movne	r5, #0
 800d7fe:	4293      	cmp	r3, r2
 800d800:	bfc4      	itt	gt
 800d802:	1a9b      	subgt	r3, r3, r2
 800d804:	18ed      	addgt	r5, r5, r3
 800d806:	2600      	movs	r6, #0
 800d808:	341a      	adds	r4, #26
 800d80a:	42b5      	cmp	r5, r6
 800d80c:	d11a      	bne.n	800d844 <_printf_common+0xc8>
 800d80e:	2000      	movs	r0, #0
 800d810:	e008      	b.n	800d824 <_printf_common+0xa8>
 800d812:	2301      	movs	r3, #1
 800d814:	4652      	mov	r2, sl
 800d816:	4649      	mov	r1, r9
 800d818:	4638      	mov	r0, r7
 800d81a:	47c0      	blx	r8
 800d81c:	3001      	adds	r0, #1
 800d81e:	d103      	bne.n	800d828 <_printf_common+0xac>
 800d820:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d828:	3501      	adds	r5, #1
 800d82a:	e7c6      	b.n	800d7ba <_printf_common+0x3e>
 800d82c:	18e1      	adds	r1, r4, r3
 800d82e:	1c5a      	adds	r2, r3, #1
 800d830:	2030      	movs	r0, #48	; 0x30
 800d832:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d836:	4422      	add	r2, r4
 800d838:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d83c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d840:	3302      	adds	r3, #2
 800d842:	e7c7      	b.n	800d7d4 <_printf_common+0x58>
 800d844:	2301      	movs	r3, #1
 800d846:	4622      	mov	r2, r4
 800d848:	4649      	mov	r1, r9
 800d84a:	4638      	mov	r0, r7
 800d84c:	47c0      	blx	r8
 800d84e:	3001      	adds	r0, #1
 800d850:	d0e6      	beq.n	800d820 <_printf_common+0xa4>
 800d852:	3601      	adds	r6, #1
 800d854:	e7d9      	b.n	800d80a <_printf_common+0x8e>
	...

0800d858 <_printf_i>:
 800d858:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d85c:	7e0f      	ldrb	r7, [r1, #24]
 800d85e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d860:	2f78      	cmp	r7, #120	; 0x78
 800d862:	4691      	mov	r9, r2
 800d864:	4680      	mov	r8, r0
 800d866:	460c      	mov	r4, r1
 800d868:	469a      	mov	sl, r3
 800d86a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d86e:	d807      	bhi.n	800d880 <_printf_i+0x28>
 800d870:	2f62      	cmp	r7, #98	; 0x62
 800d872:	d80a      	bhi.n	800d88a <_printf_i+0x32>
 800d874:	2f00      	cmp	r7, #0
 800d876:	f000 80d4 	beq.w	800da22 <_printf_i+0x1ca>
 800d87a:	2f58      	cmp	r7, #88	; 0x58
 800d87c:	f000 80c0 	beq.w	800da00 <_printf_i+0x1a8>
 800d880:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d884:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d888:	e03a      	b.n	800d900 <_printf_i+0xa8>
 800d88a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d88e:	2b15      	cmp	r3, #21
 800d890:	d8f6      	bhi.n	800d880 <_printf_i+0x28>
 800d892:	a101      	add	r1, pc, #4	; (adr r1, 800d898 <_printf_i+0x40>)
 800d894:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d898:	0800d8f1 	.word	0x0800d8f1
 800d89c:	0800d905 	.word	0x0800d905
 800d8a0:	0800d881 	.word	0x0800d881
 800d8a4:	0800d881 	.word	0x0800d881
 800d8a8:	0800d881 	.word	0x0800d881
 800d8ac:	0800d881 	.word	0x0800d881
 800d8b0:	0800d905 	.word	0x0800d905
 800d8b4:	0800d881 	.word	0x0800d881
 800d8b8:	0800d881 	.word	0x0800d881
 800d8bc:	0800d881 	.word	0x0800d881
 800d8c0:	0800d881 	.word	0x0800d881
 800d8c4:	0800da09 	.word	0x0800da09
 800d8c8:	0800d931 	.word	0x0800d931
 800d8cc:	0800d9c3 	.word	0x0800d9c3
 800d8d0:	0800d881 	.word	0x0800d881
 800d8d4:	0800d881 	.word	0x0800d881
 800d8d8:	0800da2b 	.word	0x0800da2b
 800d8dc:	0800d881 	.word	0x0800d881
 800d8e0:	0800d931 	.word	0x0800d931
 800d8e4:	0800d881 	.word	0x0800d881
 800d8e8:	0800d881 	.word	0x0800d881
 800d8ec:	0800d9cb 	.word	0x0800d9cb
 800d8f0:	682b      	ldr	r3, [r5, #0]
 800d8f2:	1d1a      	adds	r2, r3, #4
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	602a      	str	r2, [r5, #0]
 800d8f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d8fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d900:	2301      	movs	r3, #1
 800d902:	e09f      	b.n	800da44 <_printf_i+0x1ec>
 800d904:	6820      	ldr	r0, [r4, #0]
 800d906:	682b      	ldr	r3, [r5, #0]
 800d908:	0607      	lsls	r7, r0, #24
 800d90a:	f103 0104 	add.w	r1, r3, #4
 800d90e:	6029      	str	r1, [r5, #0]
 800d910:	d501      	bpl.n	800d916 <_printf_i+0xbe>
 800d912:	681e      	ldr	r6, [r3, #0]
 800d914:	e003      	b.n	800d91e <_printf_i+0xc6>
 800d916:	0646      	lsls	r6, r0, #25
 800d918:	d5fb      	bpl.n	800d912 <_printf_i+0xba>
 800d91a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d91e:	2e00      	cmp	r6, #0
 800d920:	da03      	bge.n	800d92a <_printf_i+0xd2>
 800d922:	232d      	movs	r3, #45	; 0x2d
 800d924:	4276      	negs	r6, r6
 800d926:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d92a:	485a      	ldr	r0, [pc, #360]	; (800da94 <_printf_i+0x23c>)
 800d92c:	230a      	movs	r3, #10
 800d92e:	e012      	b.n	800d956 <_printf_i+0xfe>
 800d930:	682b      	ldr	r3, [r5, #0]
 800d932:	6820      	ldr	r0, [r4, #0]
 800d934:	1d19      	adds	r1, r3, #4
 800d936:	6029      	str	r1, [r5, #0]
 800d938:	0605      	lsls	r5, r0, #24
 800d93a:	d501      	bpl.n	800d940 <_printf_i+0xe8>
 800d93c:	681e      	ldr	r6, [r3, #0]
 800d93e:	e002      	b.n	800d946 <_printf_i+0xee>
 800d940:	0641      	lsls	r1, r0, #25
 800d942:	d5fb      	bpl.n	800d93c <_printf_i+0xe4>
 800d944:	881e      	ldrh	r6, [r3, #0]
 800d946:	4853      	ldr	r0, [pc, #332]	; (800da94 <_printf_i+0x23c>)
 800d948:	2f6f      	cmp	r7, #111	; 0x6f
 800d94a:	bf0c      	ite	eq
 800d94c:	2308      	moveq	r3, #8
 800d94e:	230a      	movne	r3, #10
 800d950:	2100      	movs	r1, #0
 800d952:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d956:	6865      	ldr	r5, [r4, #4]
 800d958:	60a5      	str	r5, [r4, #8]
 800d95a:	2d00      	cmp	r5, #0
 800d95c:	bfa2      	ittt	ge
 800d95e:	6821      	ldrge	r1, [r4, #0]
 800d960:	f021 0104 	bicge.w	r1, r1, #4
 800d964:	6021      	strge	r1, [r4, #0]
 800d966:	b90e      	cbnz	r6, 800d96c <_printf_i+0x114>
 800d968:	2d00      	cmp	r5, #0
 800d96a:	d04b      	beq.n	800da04 <_printf_i+0x1ac>
 800d96c:	4615      	mov	r5, r2
 800d96e:	fbb6 f1f3 	udiv	r1, r6, r3
 800d972:	fb03 6711 	mls	r7, r3, r1, r6
 800d976:	5dc7      	ldrb	r7, [r0, r7]
 800d978:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d97c:	4637      	mov	r7, r6
 800d97e:	42bb      	cmp	r3, r7
 800d980:	460e      	mov	r6, r1
 800d982:	d9f4      	bls.n	800d96e <_printf_i+0x116>
 800d984:	2b08      	cmp	r3, #8
 800d986:	d10b      	bne.n	800d9a0 <_printf_i+0x148>
 800d988:	6823      	ldr	r3, [r4, #0]
 800d98a:	07de      	lsls	r6, r3, #31
 800d98c:	d508      	bpl.n	800d9a0 <_printf_i+0x148>
 800d98e:	6923      	ldr	r3, [r4, #16]
 800d990:	6861      	ldr	r1, [r4, #4]
 800d992:	4299      	cmp	r1, r3
 800d994:	bfde      	ittt	le
 800d996:	2330      	movle	r3, #48	; 0x30
 800d998:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d99c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d9a0:	1b52      	subs	r2, r2, r5
 800d9a2:	6122      	str	r2, [r4, #16]
 800d9a4:	f8cd a000 	str.w	sl, [sp]
 800d9a8:	464b      	mov	r3, r9
 800d9aa:	aa03      	add	r2, sp, #12
 800d9ac:	4621      	mov	r1, r4
 800d9ae:	4640      	mov	r0, r8
 800d9b0:	f7ff fee4 	bl	800d77c <_printf_common>
 800d9b4:	3001      	adds	r0, #1
 800d9b6:	d14a      	bne.n	800da4e <_printf_i+0x1f6>
 800d9b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d9bc:	b004      	add	sp, #16
 800d9be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9c2:	6823      	ldr	r3, [r4, #0]
 800d9c4:	f043 0320 	orr.w	r3, r3, #32
 800d9c8:	6023      	str	r3, [r4, #0]
 800d9ca:	4833      	ldr	r0, [pc, #204]	; (800da98 <_printf_i+0x240>)
 800d9cc:	2778      	movs	r7, #120	; 0x78
 800d9ce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d9d2:	6823      	ldr	r3, [r4, #0]
 800d9d4:	6829      	ldr	r1, [r5, #0]
 800d9d6:	061f      	lsls	r7, r3, #24
 800d9d8:	f851 6b04 	ldr.w	r6, [r1], #4
 800d9dc:	d402      	bmi.n	800d9e4 <_printf_i+0x18c>
 800d9de:	065f      	lsls	r7, r3, #25
 800d9e0:	bf48      	it	mi
 800d9e2:	b2b6      	uxthmi	r6, r6
 800d9e4:	07df      	lsls	r7, r3, #31
 800d9e6:	bf48      	it	mi
 800d9e8:	f043 0320 	orrmi.w	r3, r3, #32
 800d9ec:	6029      	str	r1, [r5, #0]
 800d9ee:	bf48      	it	mi
 800d9f0:	6023      	strmi	r3, [r4, #0]
 800d9f2:	b91e      	cbnz	r6, 800d9fc <_printf_i+0x1a4>
 800d9f4:	6823      	ldr	r3, [r4, #0]
 800d9f6:	f023 0320 	bic.w	r3, r3, #32
 800d9fa:	6023      	str	r3, [r4, #0]
 800d9fc:	2310      	movs	r3, #16
 800d9fe:	e7a7      	b.n	800d950 <_printf_i+0xf8>
 800da00:	4824      	ldr	r0, [pc, #144]	; (800da94 <_printf_i+0x23c>)
 800da02:	e7e4      	b.n	800d9ce <_printf_i+0x176>
 800da04:	4615      	mov	r5, r2
 800da06:	e7bd      	b.n	800d984 <_printf_i+0x12c>
 800da08:	682b      	ldr	r3, [r5, #0]
 800da0a:	6826      	ldr	r6, [r4, #0]
 800da0c:	6961      	ldr	r1, [r4, #20]
 800da0e:	1d18      	adds	r0, r3, #4
 800da10:	6028      	str	r0, [r5, #0]
 800da12:	0635      	lsls	r5, r6, #24
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	d501      	bpl.n	800da1c <_printf_i+0x1c4>
 800da18:	6019      	str	r1, [r3, #0]
 800da1a:	e002      	b.n	800da22 <_printf_i+0x1ca>
 800da1c:	0670      	lsls	r0, r6, #25
 800da1e:	d5fb      	bpl.n	800da18 <_printf_i+0x1c0>
 800da20:	8019      	strh	r1, [r3, #0]
 800da22:	2300      	movs	r3, #0
 800da24:	6123      	str	r3, [r4, #16]
 800da26:	4615      	mov	r5, r2
 800da28:	e7bc      	b.n	800d9a4 <_printf_i+0x14c>
 800da2a:	682b      	ldr	r3, [r5, #0]
 800da2c:	1d1a      	adds	r2, r3, #4
 800da2e:	602a      	str	r2, [r5, #0]
 800da30:	681d      	ldr	r5, [r3, #0]
 800da32:	6862      	ldr	r2, [r4, #4]
 800da34:	2100      	movs	r1, #0
 800da36:	4628      	mov	r0, r5
 800da38:	f7f2 fbda 	bl	80001f0 <memchr>
 800da3c:	b108      	cbz	r0, 800da42 <_printf_i+0x1ea>
 800da3e:	1b40      	subs	r0, r0, r5
 800da40:	6060      	str	r0, [r4, #4]
 800da42:	6863      	ldr	r3, [r4, #4]
 800da44:	6123      	str	r3, [r4, #16]
 800da46:	2300      	movs	r3, #0
 800da48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da4c:	e7aa      	b.n	800d9a4 <_printf_i+0x14c>
 800da4e:	6923      	ldr	r3, [r4, #16]
 800da50:	462a      	mov	r2, r5
 800da52:	4649      	mov	r1, r9
 800da54:	4640      	mov	r0, r8
 800da56:	47d0      	blx	sl
 800da58:	3001      	adds	r0, #1
 800da5a:	d0ad      	beq.n	800d9b8 <_printf_i+0x160>
 800da5c:	6823      	ldr	r3, [r4, #0]
 800da5e:	079b      	lsls	r3, r3, #30
 800da60:	d413      	bmi.n	800da8a <_printf_i+0x232>
 800da62:	68e0      	ldr	r0, [r4, #12]
 800da64:	9b03      	ldr	r3, [sp, #12]
 800da66:	4298      	cmp	r0, r3
 800da68:	bfb8      	it	lt
 800da6a:	4618      	movlt	r0, r3
 800da6c:	e7a6      	b.n	800d9bc <_printf_i+0x164>
 800da6e:	2301      	movs	r3, #1
 800da70:	4632      	mov	r2, r6
 800da72:	4649      	mov	r1, r9
 800da74:	4640      	mov	r0, r8
 800da76:	47d0      	blx	sl
 800da78:	3001      	adds	r0, #1
 800da7a:	d09d      	beq.n	800d9b8 <_printf_i+0x160>
 800da7c:	3501      	adds	r5, #1
 800da7e:	68e3      	ldr	r3, [r4, #12]
 800da80:	9903      	ldr	r1, [sp, #12]
 800da82:	1a5b      	subs	r3, r3, r1
 800da84:	42ab      	cmp	r3, r5
 800da86:	dcf2      	bgt.n	800da6e <_printf_i+0x216>
 800da88:	e7eb      	b.n	800da62 <_printf_i+0x20a>
 800da8a:	2500      	movs	r5, #0
 800da8c:	f104 0619 	add.w	r6, r4, #25
 800da90:	e7f5      	b.n	800da7e <_printf_i+0x226>
 800da92:	bf00      	nop
 800da94:	0800de4d 	.word	0x0800de4d
 800da98:	0800de5e 	.word	0x0800de5e

0800da9c <__sflush_r>:
 800da9c:	898a      	ldrh	r2, [r1, #12]
 800da9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daa2:	4605      	mov	r5, r0
 800daa4:	0710      	lsls	r0, r2, #28
 800daa6:	460c      	mov	r4, r1
 800daa8:	d458      	bmi.n	800db5c <__sflush_r+0xc0>
 800daaa:	684b      	ldr	r3, [r1, #4]
 800daac:	2b00      	cmp	r3, #0
 800daae:	dc05      	bgt.n	800dabc <__sflush_r+0x20>
 800dab0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	dc02      	bgt.n	800dabc <__sflush_r+0x20>
 800dab6:	2000      	movs	r0, #0
 800dab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dabc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dabe:	2e00      	cmp	r6, #0
 800dac0:	d0f9      	beq.n	800dab6 <__sflush_r+0x1a>
 800dac2:	2300      	movs	r3, #0
 800dac4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dac8:	682f      	ldr	r7, [r5, #0]
 800daca:	6a21      	ldr	r1, [r4, #32]
 800dacc:	602b      	str	r3, [r5, #0]
 800dace:	d032      	beq.n	800db36 <__sflush_r+0x9a>
 800dad0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dad2:	89a3      	ldrh	r3, [r4, #12]
 800dad4:	075a      	lsls	r2, r3, #29
 800dad6:	d505      	bpl.n	800dae4 <__sflush_r+0x48>
 800dad8:	6863      	ldr	r3, [r4, #4]
 800dada:	1ac0      	subs	r0, r0, r3
 800dadc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dade:	b10b      	cbz	r3, 800dae4 <__sflush_r+0x48>
 800dae0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dae2:	1ac0      	subs	r0, r0, r3
 800dae4:	2300      	movs	r3, #0
 800dae6:	4602      	mov	r2, r0
 800dae8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800daea:	6a21      	ldr	r1, [r4, #32]
 800daec:	4628      	mov	r0, r5
 800daee:	47b0      	blx	r6
 800daf0:	1c43      	adds	r3, r0, #1
 800daf2:	89a3      	ldrh	r3, [r4, #12]
 800daf4:	d106      	bne.n	800db04 <__sflush_r+0x68>
 800daf6:	6829      	ldr	r1, [r5, #0]
 800daf8:	291d      	cmp	r1, #29
 800dafa:	d82b      	bhi.n	800db54 <__sflush_r+0xb8>
 800dafc:	4a29      	ldr	r2, [pc, #164]	; (800dba4 <__sflush_r+0x108>)
 800dafe:	410a      	asrs	r2, r1
 800db00:	07d6      	lsls	r6, r2, #31
 800db02:	d427      	bmi.n	800db54 <__sflush_r+0xb8>
 800db04:	2200      	movs	r2, #0
 800db06:	6062      	str	r2, [r4, #4]
 800db08:	04d9      	lsls	r1, r3, #19
 800db0a:	6922      	ldr	r2, [r4, #16]
 800db0c:	6022      	str	r2, [r4, #0]
 800db0e:	d504      	bpl.n	800db1a <__sflush_r+0x7e>
 800db10:	1c42      	adds	r2, r0, #1
 800db12:	d101      	bne.n	800db18 <__sflush_r+0x7c>
 800db14:	682b      	ldr	r3, [r5, #0]
 800db16:	b903      	cbnz	r3, 800db1a <__sflush_r+0x7e>
 800db18:	6560      	str	r0, [r4, #84]	; 0x54
 800db1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800db1c:	602f      	str	r7, [r5, #0]
 800db1e:	2900      	cmp	r1, #0
 800db20:	d0c9      	beq.n	800dab6 <__sflush_r+0x1a>
 800db22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800db26:	4299      	cmp	r1, r3
 800db28:	d002      	beq.n	800db30 <__sflush_r+0x94>
 800db2a:	4628      	mov	r0, r5
 800db2c:	f7ff fc96 	bl	800d45c <_free_r>
 800db30:	2000      	movs	r0, #0
 800db32:	6360      	str	r0, [r4, #52]	; 0x34
 800db34:	e7c0      	b.n	800dab8 <__sflush_r+0x1c>
 800db36:	2301      	movs	r3, #1
 800db38:	4628      	mov	r0, r5
 800db3a:	47b0      	blx	r6
 800db3c:	1c41      	adds	r1, r0, #1
 800db3e:	d1c8      	bne.n	800dad2 <__sflush_r+0x36>
 800db40:	682b      	ldr	r3, [r5, #0]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d0c5      	beq.n	800dad2 <__sflush_r+0x36>
 800db46:	2b1d      	cmp	r3, #29
 800db48:	d001      	beq.n	800db4e <__sflush_r+0xb2>
 800db4a:	2b16      	cmp	r3, #22
 800db4c:	d101      	bne.n	800db52 <__sflush_r+0xb6>
 800db4e:	602f      	str	r7, [r5, #0]
 800db50:	e7b1      	b.n	800dab6 <__sflush_r+0x1a>
 800db52:	89a3      	ldrh	r3, [r4, #12]
 800db54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db58:	81a3      	strh	r3, [r4, #12]
 800db5a:	e7ad      	b.n	800dab8 <__sflush_r+0x1c>
 800db5c:	690f      	ldr	r7, [r1, #16]
 800db5e:	2f00      	cmp	r7, #0
 800db60:	d0a9      	beq.n	800dab6 <__sflush_r+0x1a>
 800db62:	0793      	lsls	r3, r2, #30
 800db64:	680e      	ldr	r6, [r1, #0]
 800db66:	bf08      	it	eq
 800db68:	694b      	ldreq	r3, [r1, #20]
 800db6a:	600f      	str	r7, [r1, #0]
 800db6c:	bf18      	it	ne
 800db6e:	2300      	movne	r3, #0
 800db70:	eba6 0807 	sub.w	r8, r6, r7
 800db74:	608b      	str	r3, [r1, #8]
 800db76:	f1b8 0f00 	cmp.w	r8, #0
 800db7a:	dd9c      	ble.n	800dab6 <__sflush_r+0x1a>
 800db7c:	6a21      	ldr	r1, [r4, #32]
 800db7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800db80:	4643      	mov	r3, r8
 800db82:	463a      	mov	r2, r7
 800db84:	4628      	mov	r0, r5
 800db86:	47b0      	blx	r6
 800db88:	2800      	cmp	r0, #0
 800db8a:	dc06      	bgt.n	800db9a <__sflush_r+0xfe>
 800db8c:	89a3      	ldrh	r3, [r4, #12]
 800db8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db92:	81a3      	strh	r3, [r4, #12]
 800db94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800db98:	e78e      	b.n	800dab8 <__sflush_r+0x1c>
 800db9a:	4407      	add	r7, r0
 800db9c:	eba8 0800 	sub.w	r8, r8, r0
 800dba0:	e7e9      	b.n	800db76 <__sflush_r+0xda>
 800dba2:	bf00      	nop
 800dba4:	dfbffffe 	.word	0xdfbffffe

0800dba8 <_fflush_r>:
 800dba8:	b538      	push	{r3, r4, r5, lr}
 800dbaa:	690b      	ldr	r3, [r1, #16]
 800dbac:	4605      	mov	r5, r0
 800dbae:	460c      	mov	r4, r1
 800dbb0:	b913      	cbnz	r3, 800dbb8 <_fflush_r+0x10>
 800dbb2:	2500      	movs	r5, #0
 800dbb4:	4628      	mov	r0, r5
 800dbb6:	bd38      	pop	{r3, r4, r5, pc}
 800dbb8:	b118      	cbz	r0, 800dbc2 <_fflush_r+0x1a>
 800dbba:	6a03      	ldr	r3, [r0, #32]
 800dbbc:	b90b      	cbnz	r3, 800dbc2 <_fflush_r+0x1a>
 800dbbe:	f7ff f9e1 	bl	800cf84 <__sinit>
 800dbc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d0f3      	beq.n	800dbb2 <_fflush_r+0xa>
 800dbca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dbcc:	07d0      	lsls	r0, r2, #31
 800dbce:	d404      	bmi.n	800dbda <_fflush_r+0x32>
 800dbd0:	0599      	lsls	r1, r3, #22
 800dbd2:	d402      	bmi.n	800dbda <_fflush_r+0x32>
 800dbd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dbd6:	f7ff fc30 	bl	800d43a <__retarget_lock_acquire_recursive>
 800dbda:	4628      	mov	r0, r5
 800dbdc:	4621      	mov	r1, r4
 800dbde:	f7ff ff5d 	bl	800da9c <__sflush_r>
 800dbe2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dbe4:	07da      	lsls	r2, r3, #31
 800dbe6:	4605      	mov	r5, r0
 800dbe8:	d4e4      	bmi.n	800dbb4 <_fflush_r+0xc>
 800dbea:	89a3      	ldrh	r3, [r4, #12]
 800dbec:	059b      	lsls	r3, r3, #22
 800dbee:	d4e1      	bmi.n	800dbb4 <_fflush_r+0xc>
 800dbf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dbf2:	f7ff fc23 	bl	800d43c <__retarget_lock_release_recursive>
 800dbf6:	e7dd      	b.n	800dbb4 <_fflush_r+0xc>

0800dbf8 <__swhatbuf_r>:
 800dbf8:	b570      	push	{r4, r5, r6, lr}
 800dbfa:	460c      	mov	r4, r1
 800dbfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc00:	2900      	cmp	r1, #0
 800dc02:	b096      	sub	sp, #88	; 0x58
 800dc04:	4615      	mov	r5, r2
 800dc06:	461e      	mov	r6, r3
 800dc08:	da0d      	bge.n	800dc26 <__swhatbuf_r+0x2e>
 800dc0a:	89a3      	ldrh	r3, [r4, #12]
 800dc0c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800dc10:	f04f 0100 	mov.w	r1, #0
 800dc14:	bf0c      	ite	eq
 800dc16:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800dc1a:	2340      	movne	r3, #64	; 0x40
 800dc1c:	2000      	movs	r0, #0
 800dc1e:	6031      	str	r1, [r6, #0]
 800dc20:	602b      	str	r3, [r5, #0]
 800dc22:	b016      	add	sp, #88	; 0x58
 800dc24:	bd70      	pop	{r4, r5, r6, pc}
 800dc26:	466a      	mov	r2, sp
 800dc28:	f000 f848 	bl	800dcbc <_fstat_r>
 800dc2c:	2800      	cmp	r0, #0
 800dc2e:	dbec      	blt.n	800dc0a <__swhatbuf_r+0x12>
 800dc30:	9901      	ldr	r1, [sp, #4]
 800dc32:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800dc36:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800dc3a:	4259      	negs	r1, r3
 800dc3c:	4159      	adcs	r1, r3
 800dc3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc42:	e7eb      	b.n	800dc1c <__swhatbuf_r+0x24>

0800dc44 <__smakebuf_r>:
 800dc44:	898b      	ldrh	r3, [r1, #12]
 800dc46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dc48:	079d      	lsls	r5, r3, #30
 800dc4a:	4606      	mov	r6, r0
 800dc4c:	460c      	mov	r4, r1
 800dc4e:	d507      	bpl.n	800dc60 <__smakebuf_r+0x1c>
 800dc50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dc54:	6023      	str	r3, [r4, #0]
 800dc56:	6123      	str	r3, [r4, #16]
 800dc58:	2301      	movs	r3, #1
 800dc5a:	6163      	str	r3, [r4, #20]
 800dc5c:	b002      	add	sp, #8
 800dc5e:	bd70      	pop	{r4, r5, r6, pc}
 800dc60:	ab01      	add	r3, sp, #4
 800dc62:	466a      	mov	r2, sp
 800dc64:	f7ff ffc8 	bl	800dbf8 <__swhatbuf_r>
 800dc68:	9900      	ldr	r1, [sp, #0]
 800dc6a:	4605      	mov	r5, r0
 800dc6c:	4630      	mov	r0, r6
 800dc6e:	f7ff f871 	bl	800cd54 <_malloc_r>
 800dc72:	b948      	cbnz	r0, 800dc88 <__smakebuf_r+0x44>
 800dc74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc78:	059a      	lsls	r2, r3, #22
 800dc7a:	d4ef      	bmi.n	800dc5c <__smakebuf_r+0x18>
 800dc7c:	f023 0303 	bic.w	r3, r3, #3
 800dc80:	f043 0302 	orr.w	r3, r3, #2
 800dc84:	81a3      	strh	r3, [r4, #12]
 800dc86:	e7e3      	b.n	800dc50 <__smakebuf_r+0xc>
 800dc88:	89a3      	ldrh	r3, [r4, #12]
 800dc8a:	6020      	str	r0, [r4, #0]
 800dc8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc90:	81a3      	strh	r3, [r4, #12]
 800dc92:	9b00      	ldr	r3, [sp, #0]
 800dc94:	6163      	str	r3, [r4, #20]
 800dc96:	9b01      	ldr	r3, [sp, #4]
 800dc98:	6120      	str	r0, [r4, #16]
 800dc9a:	b15b      	cbz	r3, 800dcb4 <__smakebuf_r+0x70>
 800dc9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dca0:	4630      	mov	r0, r6
 800dca2:	f000 f81d 	bl	800dce0 <_isatty_r>
 800dca6:	b128      	cbz	r0, 800dcb4 <__smakebuf_r+0x70>
 800dca8:	89a3      	ldrh	r3, [r4, #12]
 800dcaa:	f023 0303 	bic.w	r3, r3, #3
 800dcae:	f043 0301 	orr.w	r3, r3, #1
 800dcb2:	81a3      	strh	r3, [r4, #12]
 800dcb4:	89a3      	ldrh	r3, [r4, #12]
 800dcb6:	431d      	orrs	r5, r3
 800dcb8:	81a5      	strh	r5, [r4, #12]
 800dcba:	e7cf      	b.n	800dc5c <__smakebuf_r+0x18>

0800dcbc <_fstat_r>:
 800dcbc:	b538      	push	{r3, r4, r5, lr}
 800dcbe:	4d07      	ldr	r5, [pc, #28]	; (800dcdc <_fstat_r+0x20>)
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	4604      	mov	r4, r0
 800dcc4:	4608      	mov	r0, r1
 800dcc6:	4611      	mov	r1, r2
 800dcc8:	602b      	str	r3, [r5, #0]
 800dcca:	f7f3 fb32 	bl	8001332 <_fstat>
 800dcce:	1c43      	adds	r3, r0, #1
 800dcd0:	d102      	bne.n	800dcd8 <_fstat_r+0x1c>
 800dcd2:	682b      	ldr	r3, [r5, #0]
 800dcd4:	b103      	cbz	r3, 800dcd8 <_fstat_r+0x1c>
 800dcd6:	6023      	str	r3, [r4, #0]
 800dcd8:	bd38      	pop	{r3, r4, r5, pc}
 800dcda:	bf00      	nop
 800dcdc:	20010f0c 	.word	0x20010f0c

0800dce0 <_isatty_r>:
 800dce0:	b538      	push	{r3, r4, r5, lr}
 800dce2:	4d06      	ldr	r5, [pc, #24]	; (800dcfc <_isatty_r+0x1c>)
 800dce4:	2300      	movs	r3, #0
 800dce6:	4604      	mov	r4, r0
 800dce8:	4608      	mov	r0, r1
 800dcea:	602b      	str	r3, [r5, #0]
 800dcec:	f7f3 fb31 	bl	8001352 <_isatty>
 800dcf0:	1c43      	adds	r3, r0, #1
 800dcf2:	d102      	bne.n	800dcfa <_isatty_r+0x1a>
 800dcf4:	682b      	ldr	r3, [r5, #0]
 800dcf6:	b103      	cbz	r3, 800dcfa <_isatty_r+0x1a>
 800dcf8:	6023      	str	r3, [r4, #0]
 800dcfa:	bd38      	pop	{r3, r4, r5, pc}
 800dcfc:	20010f0c 	.word	0x20010f0c

0800dd00 <_init>:
 800dd00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd02:	bf00      	nop
 800dd04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd06:	bc08      	pop	{r3}
 800dd08:	469e      	mov	lr, r3
 800dd0a:	4770      	bx	lr

0800dd0c <_fini>:
 800dd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd0e:	bf00      	nop
 800dd10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd12:	bc08      	pop	{r3}
 800dd14:	469e      	mov	lr, r3
 800dd16:	4770      	bx	lr
